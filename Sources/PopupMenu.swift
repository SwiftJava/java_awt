
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.PopupMenu ///

open class PopupMenu: Menu {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var PopupMenuJNIClass: jclass?

    /// private static final java.lang.String java.awt.PopupMenu.base

    /// static int java.awt.PopupMenu.nameCounter

    // Skipping field: true false false false false false 

    /// private static final long java.awt.PopupMenu.serialVersionUID

    /// transient boolean java.awt.PopupMenu.isTrayIconPopup

    // Skipping field: true false false false false false 

    /// private static final java.lang.String java.awt.Menu.base

    /// private static int java.awt.Menu.nameCounter

    /// private static final long java.awt.Menu.serialVersionUID

    /// boolean java.awt.Menu.isHelpMenu

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Menu.items

    // Skipping field: true false false false false false 

    /// private int java.awt.Menu.menuSerializedDataVersion

    /// boolean java.awt.Menu.tearOff

    // Skipping field: true false false false false false 

    /// private static final java.lang.String java.awt.MenuItem.base

    /// private static int java.awt.MenuItem.nameCounter

    /// private static final long java.awt.MenuItem.serialVersionUID

    /// java.lang.String java.awt.MenuItem.actionCommand

    // Skipping field: true false false false false false 

    /// transient java.awt.event.ActionListener java.awt.MenuItem.actionListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.MenuItem.enabled

    // Skipping field: true false false false false false 

    /// long java.awt.MenuItem.eventMask

    // Skipping field: true false false false false false 

    /// java.lang.String java.awt.MenuItem.label

    // Skipping field: true false false false false false 

    /// private int java.awt.MenuItem.menuItemSerializedDataVersion

    /// private java.awt.MenuShortcut java.awt.MenuItem.shortcut

    /// static final java.lang.String java.awt.MenuComponent.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.MenuComponent.itemListenerK

    // Skipping field: true false false false false false 

    /// private static final long java.awt.MenuComponent.serialVersionUID

    /// private transient volatile java.security.AccessControlContext java.awt.MenuComponent.acc

    /// javax.accessibility.AccessibleContext java.awt.MenuComponent.accessibleContext

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.MenuComponent.appContext

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.MenuComponent.font

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.MenuComponent.name

    /// private boolean java.awt.MenuComponent.nameExplicitlySet

    /// boolean java.awt.MenuComponent.newEventsOnly

    // Skipping field: true false false false false false 

    /// transient java.awt.MenuContainer java.awt.MenuComponent.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.MenuComponentPeer java.awt.MenuComponent.peer

    // Skipping field: true false false false false false 

    /// public java.awt.PopupMenu() throws java.awt.HeadlessException

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/PopupMenu", classCache: &PopupMenu.PopupMenuJNIClass, methodSig: "()V", methodCache: &PopupMenu.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.PopupMenu(java.lang.String) throws java.awt.HeadlessException

    private static var new_MethodID_2: jmethodID?

    public convenience init( label: String? ) throws {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: label, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/PopupMenu", classCache: &PopupMenu.PopupMenuJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &PopupMenu.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _label: String? ) throws {
        try self.init( label: _label )
    }

    /// public void java.awt.PopupMenu.addNotify()

    // Skipping method: false true false false false 

    /// java.lang.String java.awt.PopupMenu.constructComponentName()

    // Skipping method: true false false false false 

    /// public javax.accessibility.AccessibleContext java.awt.PopupMenu.getAccessibleContext()

    // Skipping method: false true false false false 

    /// public java.awt.MenuContainer java.awt.PopupMenu.getParent()

    // Skipping method: false true false false false 

    /// public void java.awt.PopupMenu.show(java.awt.Component,int,int)

    private static var show_MethodID_3: jmethodID?

    open func show( origin: Component?, x: Int, y: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: origin, locals: &__locals )
        __args[1] = jvalue( i: jint(x) )
        __args[2] = jvalue( i: jint(y) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "show", methodSig: "(Ljava/awt/Component;II)V", methodCache: &PopupMenu.show_MethodID_3, args: &__args, locals: &__locals )
    }

    open func show( _ _origin: Component?, _ _x: Int, _ _y: Int ) {
        show( origin: _origin, x: _x, y: _y )
    }

}

