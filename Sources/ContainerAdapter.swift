
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:06 GMT 2016 ///

/// class java.awt.event.ContainerAdapter ///

open class ContainerAdapter: java_lang.JavaObject, ContainerListener {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.event.ContainerAdapter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ContainerAdapterJNIClass: jclass?

    /// public java.awt.event.ContainerAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/event/ContainerAdapter", classCache: &ContainerAdapter.ContainerAdapterJNIClass, methodSig: "()V", methodCache: &ContainerAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.event.ContainerAdapter.componentAdded(java.awt.event.ContainerEvent)

    private static var componentAdded_MethodID_2: jmethodID?

    open func componentAdded( arg0: ContainerEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentAdded", methodSig: "(Ljava/awt/event/ContainerEvent;)V", methodCache: &ContainerAdapter.componentAdded_MethodID_2, args: &__args, locals: &__locals )
    }

    open func componentAdded( _ _arg0: ContainerEvent? ) {
        componentAdded( arg0: _arg0 )
    }

    /// public void java.awt.event.ContainerAdapter.componentRemoved(java.awt.event.ContainerEvent)

    private static var componentRemoved_MethodID_3: jmethodID?

    open func componentRemoved( arg0: ContainerEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentRemoved", methodSig: "(Ljava/awt/event/ContainerEvent;)V", methodCache: &ContainerAdapter.componentRemoved_MethodID_3, args: &__args, locals: &__locals )
    }

    open func componentRemoved( _ _arg0: ContainerEvent? ) {
        componentRemoved( arg0: _arg0 )
    }

}
private typealias ContainerAdapter_componentAdded_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ContainerAdapter_componentAdded_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ContainerAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).componentAdded( arg0 != nil ? ContainerEvent( javaObject: arg0 ) : nil )
}

private typealias ContainerAdapter_componentRemoved_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ContainerAdapter_componentRemoved_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ContainerAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).componentRemoved( arg0 != nil ? ContainerEvent( javaObject: arg0 ) : nil )
}

private typealias ContainerAdapter_equals_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> jboolean

private func ContainerAdapter_equals_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> jboolean {
    let __return = ContainerAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).equals( arg0 != nil ? java_lang.JavaObject( javaObject: arg0 ) : nil )
    return JNIType.encode( value: __return, locals: nil ).z
}

private typealias ContainerAdapter_toString_6_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jobject?

private func ContainerAdapter_toString_6( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jobject? {
    let __return = ContainerAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).toString( )
    return JNIType.encode( value: __return, locals: nil ).l
}

private typealias ContainerAdapter_hashCode_7_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jint

private func ContainerAdapter_hashCode_7( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jint {
    let __return = ContainerAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).hashCode( )
    return JNIType.encode( value: __return, locals: nil ).i
}

open class ContainerAdapterBase: ContainerAdapter {

    private static var ContainerAdapterBaseJNIClass: jclass?
    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let ContainerAdapter_componentAdded_0_thunk: ContainerAdapter_componentAdded_0_type = ContainerAdapter_componentAdded_0
            natives.append( JNINativeMethod( name: strdup("__componentAdded"), signature: strdup("(Ljava/awt/event/ContainerEvent;)V"), fnPtr: unsafeBitCast( ContainerAdapter_componentAdded_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ContainerAdapter_componentRemoved_1_thunk: ContainerAdapter_componentRemoved_1_type = ContainerAdapter_componentRemoved_1
            natives.append( JNINativeMethod( name: strdup("__componentRemoved"), signature: strdup("(Ljava/awt/event/ContainerEvent;)V"), fnPtr: unsafeBitCast( ContainerAdapter_componentRemoved_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ContainerAdapter_equals_5_thunk: ContainerAdapter_equals_5_type = ContainerAdapter_equals_5
            natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(Ljava/lang/Object;)Z"), fnPtr: unsafeBitCast( ContainerAdapter_equals_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ContainerAdapter_toString_6_thunk: ContainerAdapter_toString_6_type = ContainerAdapter_toString_6
            natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("()Ljava/lang/String;"), fnPtr: unsafeBitCast( ContainerAdapter_toString_6_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ContainerAdapter_hashCode_7_thunk: ContainerAdapter_hashCode_7_type = ContainerAdapter_hashCode_7
            natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("()I"), fnPtr: unsafeBitCast( ContainerAdapter_hashCode_7_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/ContainerAdapterProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    override open var javaObject: jobject? {
        get {
            return super.javaObject
        }
        set(newValue) {
            super.javaObject = newValue
            ContainerAdapterBase.registerNatives()
            updateSwiftObject()
        }
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> ContainerAdapterBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: ContainerAdapterBase.self )
    }

    /// public java.awt.event.ContainerAdapter()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = swiftValue()

        let __object = JNIMethod.NewObject( className: "org/genie/java_awt/ContainerAdapterProxy", classCache: &ContainerAdapterBase.ContainerAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &ContainerAdapterBase.new_MethodID_4, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
