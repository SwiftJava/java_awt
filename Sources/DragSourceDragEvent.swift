
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:04 GMT 2016 ///

/// class java.awt.dnd.DragSourceDragEvent ///

open class DragSourceDragEvent: DragSourceEvent {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.dnd.DragSourceDragEvent", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DragSourceDragEventJNIClass: jclass?

    /// private static final long java.awt.dnd.DragSourceDragEvent.serialVersionUID

    /// private static final int java.awt.dnd.DragSourceDragEvent.JDK_1_3_MODIFIERS

    /// private static final int java.awt.dnd.DragSourceDragEvent.JDK_1_4_MODIFIERS

    /// private int java.awt.dnd.DragSourceDragEvent.targetActions

    /// private int java.awt.dnd.DragSourceDragEvent.dropAction

    /// private int java.awt.dnd.DragSourceDragEvent.gestureModifiers

    /// private boolean java.awt.dnd.DragSourceDragEvent.invalidModifiers

    /// private static final long java.awt.dnd.DragSourceEvent.serialVersionUID

    /// private final boolean java.awt.dnd.DragSourceEvent.locationSpecified

    /// private final int java.awt.dnd.DragSourceEvent.x

    /// private final int java.awt.dnd.DragSourceEvent.y

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_lang.JavaObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &DragSourceDragEvent.source_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_lang.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &DragSourceDragEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.awt.dnd.DragSourceDragEvent(java.awt.dnd.DragSourceContext,int,int,int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: DragSourceContext?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSourceDragEvent", classCache: &DragSourceDragEvent.DragSourceDragEventJNIClass, methodSig: "(Ljava/awt/dnd/DragSourceContext;IIIII)V", methodCache: &DragSourceDragEvent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: DragSourceContext?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public java.awt.dnd.DragSourceDragEvent(java.awt.dnd.DragSourceContext,int,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: DragSourceContext?, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSourceDragEvent", classCache: &DragSourceDragEvent.DragSourceDragEventJNIClass, methodSig: "(Ljava/awt/dnd/DragSourceContext;III)V", methodCache: &DragSourceDragEvent.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: DragSourceContext?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// private void java.awt.dnd.DragSourceDragEvent.setNewModifiers()

    /// private void java.awt.dnd.DragSourceDragEvent.setOldModifiers()

    /// public int java.awt.dnd.DragSourceDragEvent.getTargetActions()

    private static var getTargetActions_MethodID_3: jmethodID?

    open func getTargetActions() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTargetActions", methodSig: "()I", methodCache: &DragSourceDragEvent.getTargetActions_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.dnd.DragSourceDragEvent.getGestureModifiers()

    private static var getGestureModifiers_MethodID_4: jmethodID?

    open func getGestureModifiers() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getGestureModifiers", methodSig: "()I", methodCache: &DragSourceDragEvent.getGestureModifiers_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.dnd.DragSourceDragEvent.getGestureModifiersEx()

    private static var getGestureModifiersEx_MethodID_5: jmethodID?

    open func getGestureModifiersEx() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getGestureModifiersEx", methodSig: "()I", methodCache: &DragSourceDragEvent.getGestureModifiersEx_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.dnd.DragSourceDragEvent.getUserAction()

    private static var getUserAction_MethodID_6: jmethodID?

    open func getUserAction() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getUserAction", methodSig: "()I", methodCache: &DragSourceDragEvent.getUserAction_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.dnd.DragSourceDragEvent.getDropAction()

    private static var getDropAction_MethodID_7: jmethodID?

    open func getDropAction() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDropAction", methodSig: "()I", methodCache: &DragSourceDragEvent.getDropAction_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
