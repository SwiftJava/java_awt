
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.peer.MenuBarPeer ///

public protocol MenuBarPeer: MenuComponentPeer {

    /// public abstract void java.awt.peer.MenuBarPeer.addMenu(java.awt.Menu)

    func addMenu( m: Menu? )

    /// public abstract void java.awt.peer.MenuBarPeer.delMenu(int)

    func delMenu( index: Int )

    /// public abstract void java.awt.peer.MenuBarPeer.addHelpMenu(java.awt.Menu)

    func addHelpMenu( m: Menu? )

}


open class MenuBarPeerForward: MenuComponentPeerForward, MenuBarPeer {

    private static var MenuBarPeerJNIClass: jclass?

    /// public abstract void java.awt.peer.MenuBarPeer.addMenu(java.awt.Menu)

    private static var addMenu_MethodID_4: jmethodID?

    open func addMenu( m: Menu? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: m != nil ? m! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addMenu", methodSig: "(Ljava/awt/Menu;)V", methodCache: &MenuBarPeerForward.addMenu_MethodID_4, args: &__args, locals: &__locals )
    }

    open func addMenu( _ _m: Menu? ) {
        addMenu( m: _m )
    }

    /// public abstract void java.awt.peer.MenuBarPeer.delMenu(int)

    private static var delMenu_MethodID_5: jmethodID?

    open func delMenu( index: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: index, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "delMenu", methodSig: "(I)V", methodCache: &MenuBarPeerForward.delMenu_MethodID_5, args: &__args, locals: &__locals )
    }

    open func delMenu( _ _index: Int ) {
        delMenu( index: _index )
    }

    /// public abstract void java.awt.peer.MenuBarPeer.addHelpMenu(java.awt.Menu)

    private static var addHelpMenu_MethodID_6: jmethodID?

    open func addHelpMenu( m: Menu? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: m != nil ? m! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addHelpMenu", methodSig: "(Ljava/awt/Menu;)V", methodCache: &MenuBarPeerForward.addHelpMenu_MethodID_6, args: &__args, locals: &__locals )
    }

    open func addHelpMenu( _ _m: Menu? ) {
        addHelpMenu( m: _m )
    }

    /// public abstract void java.awt.peer.MenuComponentPeer.setFont(java.awt.Font)

    private static var setFont_MethodID_7: jmethodID?

    override open func setFont( f: Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: f != nil ? f! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &MenuBarPeerForward.setFont_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func setFont( _ _f: Font? ) {
        setFont( f: _f )
    }

    /// public abstract void java.awt.peer.MenuComponentPeer.dispose()

    private static var dispose_MethodID_8: jmethodID?

    override open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &MenuBarPeerForward.dispose_MethodID_8, args: &__args, locals: &__locals )
    }


}


