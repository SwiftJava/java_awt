
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.event.InvocationEvent ///

open class InvocationEvent: AWTEvent, ActiveEvent {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var InvocationEventJNIClass: jclass?

    /// public static final int java.awt.event.InvocationEvent.INVOCATION_FIRST

    private static var INVOCATION_FIRST_FieldID: jfieldID?

    open static var INVOCATION_FIRST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "INVOCATION_FIRST", fieldType: "I", fieldCache: &INVOCATION_FIRST_FieldID, className: "java/awt/event/InvocationEvent", classCache: &InvocationEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.InvocationEvent.INVOCATION_DEFAULT

    private static var INVOCATION_DEFAULT_FieldID: jfieldID?

    open static var INVOCATION_DEFAULT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "INVOCATION_DEFAULT", fieldType: "I", fieldCache: &INVOCATION_DEFAULT_FieldID, className: "java/awt/event/InvocationEvent", classCache: &InvocationEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.InvocationEvent.INVOCATION_LAST

    private static var INVOCATION_LAST_FieldID: jfieldID?

    open static var INVOCATION_LAST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "INVOCATION_LAST", fieldType: "I", fieldCache: &INVOCATION_LAST_FieldID, className: "java/awt/event/InvocationEvent", classCache: &InvocationEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// protected java.lang.Runnable java.awt.event.InvocationEvent.runnable

    private static var runnable_FieldID: jfieldID?

    open var runnable: java_swift.Runnable! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "runnable", fieldType: "Ljava/lang/Runnable;", fieldCache: &InvocationEvent.runnable_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_swift.RunnableForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "runnable", fieldType: "Ljava/lang/Runnable;", fieldCache: &InvocationEvent.runnable_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected volatile java.lang.Object java.awt.event.InvocationEvent.notifier

    private static var notifier_FieldID: jfieldID?

    open var notifier: java_swift.JavaObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "notifier", fieldType: "Ljava/lang/Object;", fieldCache: &InvocationEvent.notifier_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "notifier", fieldType: "Ljava/lang/Object;", fieldCache: &InvocationEvent.notifier_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private final java.lang.Runnable java.awt.event.InvocationEvent.listener

    /// private volatile boolean java.awt.event.InvocationEvent.dispatched

    /// protected boolean java.awt.event.InvocationEvent.catchExceptions

    private static var catchExceptions_FieldID: jfieldID?

    open var catchExceptions: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "catchExceptions", fieldType: "Z", fieldCache: &InvocationEvent.catchExceptions_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "catchExceptions", fieldType: "Z", fieldCache: &InvocationEvent.catchExceptions_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private java.lang.Exception java.awt.event.InvocationEvent.exception

    /// private java.lang.Throwable java.awt.event.InvocationEvent.throwable

    /// private long java.awt.event.InvocationEvent.when

    /// private static final long java.awt.event.InvocationEvent.serialVersionUID

    /// private static final sun.util.logging.PlatformLogger java.awt.AWTEvent.log

    /// private byte[] java.awt.AWTEvent.bdata

    /// protected int java.awt.AWTEvent.id

    private static var id_FieldID: jfieldID?

    override open var id: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "id", fieldType: "I", fieldCache: &InvocationEvent.id_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "id", fieldType: "I", fieldCache: &InvocationEvent.id_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean java.awt.AWTEvent.consumed

    private static var consumed_FieldID: jfieldID?

    override open var consumed: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &InvocationEvent.consumed_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &InvocationEvent.consumed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private transient volatile java.security.AccessControlContext java.awt.AWTEvent.acc

    /// transient boolean java.awt.AWTEvent.focusManagerIsDispatching

    /// transient boolean java.awt.AWTEvent.isPosted

    /// private transient boolean java.awt.AWTEvent.isSystemGenerated

    /// public static final long java.awt.AWTEvent.COMPONENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.CONTAINER_EVENT_MASK

    /// public static final long java.awt.AWTEvent.FOCUS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.KEY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ACTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ITEM_EVENT_MASK

    /// public static final long java.awt.AWTEvent.TEXT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK

    /// static final long java.awt.AWTEvent.INPUT_METHODS_ENABLED_MASK

    /// public static final long java.awt.AWTEvent.PAINT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INVOCATION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK

    /// public static final int java.awt.AWTEvent.RESERVED_ID_MAX

    /// private static java.lang.reflect.Field java.awt.AWTEvent.inputEvent_CanAccessSystemClipboard_Field

    /// private static final long java.awt.AWTEvent.serialVersionUID

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_swift.JavaObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &InvocationEvent.source_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &InvocationEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.event.InvocationEvent(java.lang.Object,int,java.lang.Runnable,java.lang.Object,java.lang.Runnable,boolean)

    /// protected java.awt.event.InvocationEvent(java.lang.Object,int,java.lang.Runnable,java.lang.Object,boolean)

    private static var new_MethodID_1: jmethodID?

    public convenience init( source: java_swift.JavaObject?, id: Int, runnable: java_swift.Runnable?, notifier: java_swift.JavaObject?, catchThrowables: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: id, locals: &__locals )
        __args[2] = JNIType.toJava( value: runnable, locals: &__locals )
        __args[3] = JNIType.toJava( value: notifier != nil ? notifier! as JNIObject : nil, locals: &__locals )
        __args[4] = JNIType.toJava( value: catchThrowables, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/InvocationEvent", classCache: &InvocationEvent.InvocationEventJNIClass, methodSig: "(Ljava/lang/Object;ILjava/lang/Runnable;Ljava/lang/Object;Z)V", methodCache: &InvocationEvent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: java_swift.JavaObject?, _ _id: Int, _ _runnable: java_swift.Runnable?, _ _notifier: java_swift.JavaObject?, _ _catchThrowables: Bool ) {
        self.init( source: _source, id: _id, runnable: _runnable, notifier: _notifier, catchThrowables: _catchThrowables )
    }

    /// public java.awt.event.InvocationEvent(java.lang.Object,java.lang.Runnable,java.lang.Runnable,boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( source: java_swift.JavaObject?, runnable: java_swift.Runnable?, listener: java_swift.Runnable?, catchThrowables: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: runnable, locals: &__locals )
        __args[2] = JNIType.toJava( value: listener, locals: &__locals )
        __args[3] = JNIType.toJava( value: catchThrowables, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/InvocationEvent", classCache: &InvocationEvent.InvocationEventJNIClass, methodSig: "(Ljava/lang/Object;Ljava/lang/Runnable;Ljava/lang/Runnable;Z)V", methodCache: &InvocationEvent.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: java_swift.JavaObject?, _ _runnable: java_swift.Runnable?, _ _listener: java_swift.Runnable?, _ _catchThrowables: Bool ) {
        self.init( source: _source, runnable: _runnable, listener: _listener, catchThrowables: _catchThrowables )
    }

    /// public java.awt.event.InvocationEvent(java.lang.Object,java.lang.Runnable,java.lang.Object,boolean)

    private static var new_MethodID_3: jmethodID?

    public convenience init( source: java_swift.JavaObject?, runnable: java_swift.Runnable?, notifier: java_swift.JavaObject?, catchThrowables: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: runnable, locals: &__locals )
        __args[2] = JNIType.toJava( value: notifier != nil ? notifier! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: catchThrowables, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/InvocationEvent", classCache: &InvocationEvent.InvocationEventJNIClass, methodSig: "(Ljava/lang/Object;Ljava/lang/Runnable;Ljava/lang/Object;Z)V", methodCache: &InvocationEvent.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: java_swift.JavaObject?, _ _runnable: java_swift.Runnable?, _ _notifier: java_swift.JavaObject?, _ _catchThrowables: Bool ) {
        self.init( source: _source, runnable: _runnable, notifier: _notifier, catchThrowables: _catchThrowables )
    }

    /// public java.awt.event.InvocationEvent(java.lang.Object,java.lang.Runnable)

    private static var new_MethodID_4: jmethodID?

    public convenience init( source: java_swift.JavaObject?, runnable: java_swift.Runnable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: runnable, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/InvocationEvent", classCache: &InvocationEvent.InvocationEventJNIClass, methodSig: "(Ljava/lang/Object;Ljava/lang/Runnable;)V", methodCache: &InvocationEvent.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: java_swift.JavaObject?, _ _runnable: java_swift.Runnable? ) {
        self.init( source: _source, runnable: _runnable )
    }

    /// public void java.awt.event.InvocationEvent.dispatch()

    private static var dispatch_MethodID_5: jmethodID?

    open func dispatch() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispatch", methodSig: "()V", methodCache: &InvocationEvent.dispatch_MethodID_5, args: &__args, locals: &__locals )
    }


    /// static void java.awt.event.InvocationEvent.access$000(java.awt.event.InvocationEvent,boolean)

    /// public java.lang.Exception java.awt.event.InvocationEvent.getException()

    private static var getException_MethodID_6: jmethodID?

    open func getException() -> java_lang.Exception! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getException", methodSig: "()Ljava/lang/Exception;", methodCache: &InvocationEvent.getException_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.Exception( javaObject: __return ) : nil
    }


    /// public java.lang.String java.awt.event.InvocationEvent.paramString()

    /// public boolean java.awt.event.InvocationEvent.isDispatched()

    private static var isDispatched_MethodID_7: jmethodID?

    open func isDispatched() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDispatched", methodSig: "()Z", methodCache: &InvocationEvent.isDispatched_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public java.lang.Throwable java.awt.event.InvocationEvent.getThrowable()

    private static var getThrowable_MethodID_8: jmethodID?

    open func getThrowable() -> java_swift.Throwable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getThrowable", methodSig: "()Ljava/lang/Throwable;", methodCache: &InvocationEvent.getThrowable_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.Throwable( javaObject: __return ) : nil
    }


    /// private void java.awt.event.InvocationEvent.finishedDispatching(boolean)

    /// public long java.awt.event.InvocationEvent.getWhen()

    private static var getWhen_MethodID_9: jmethodID?

    open func getWhen() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getWhen", methodSig: "()J", methodCache: &InvocationEvent.getWhen_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int64(), from: __return )
    }


}

