
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:19 GMT 2016 ///

/// class java.awt.image.FilteredImageSource ///

open class FilteredImageSource: java_lang.JavaObject, ImageProducer {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.FilteredImageSource", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FilteredImageSourceJNIClass: jclass?

    /// java.awt.image.ImageProducer java.awt.image.FilteredImageSource.src

    /// java.awt.image.ImageFilter java.awt.image.FilteredImageSource.filter

    /// private java.util.Hashtable java.awt.image.FilteredImageSource.proxies

    /// public java.awt.image.FilteredImageSource(java.awt.image.ImageProducer,java.awt.image.ImageFilter)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: ImageProducer?, arg1: ImageFilter? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/FilteredImageSource", classCache: &FilteredImageSource.FilteredImageSourceJNIClass, methodSig: "(Ljava/awt/image/ImageProducer;Ljava/awt/image/ImageFilter;)V", methodCache: &FilteredImageSource.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: ImageProducer?, _ _arg1: ImageFilter? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public synchronized void java.awt.image.FilteredImageSource.addConsumer(java.awt.image.ImageConsumer)

    private static var addConsumer_MethodID_2: jmethodID?

    open func addConsumer( arg0: ImageConsumer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addConsumer", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &FilteredImageSource.addConsumer_MethodID_2, args: &__args, locals: &__locals )
    }

    open func addConsumer( _ _arg0: ImageConsumer? ) {
        addConsumer( arg0: _arg0 )
    }

    /// public synchronized boolean java.awt.image.FilteredImageSource.isConsumer(java.awt.image.ImageConsumer)

    private static var isConsumer_MethodID_3: jmethodID?

    open func isConsumer( arg0: ImageConsumer? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isConsumer", methodSig: "(Ljava/awt/image/ImageConsumer;)Z", methodCache: &FilteredImageSource.isConsumer_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isConsumer( _ _arg0: ImageConsumer? ) -> Bool {
        return isConsumer( arg0: _arg0 )
    }

    /// public synchronized void java.awt.image.FilteredImageSource.removeConsumer(java.awt.image.ImageConsumer)

    private static var removeConsumer_MethodID_4: jmethodID?

    open func removeConsumer( arg0: ImageConsumer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeConsumer", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &FilteredImageSource.removeConsumer_MethodID_4, args: &__args, locals: &__locals )
    }

    open func removeConsumer( _ _arg0: ImageConsumer? ) {
        removeConsumer( arg0: _arg0 )
    }

    /// public void java.awt.image.FilteredImageSource.startProduction(java.awt.image.ImageConsumer)

    private static var startProduction_MethodID_5: jmethodID?

    open func startProduction( arg0: ImageConsumer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startProduction", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &FilteredImageSource.startProduction_MethodID_5, args: &__args, locals: &__locals )
    }

    open func startProduction( _ _arg0: ImageConsumer? ) {
        startProduction( arg0: _arg0 )
    }

    /// public void java.awt.image.FilteredImageSource.requestTopDownLeftRightResend(java.awt.image.ImageConsumer)

    private static var requestTopDownLeftRightResend_MethodID_6: jmethodID?

    open func requestTopDownLeftRightResend( arg0: ImageConsumer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "requestTopDownLeftRightResend", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &FilteredImageSource.requestTopDownLeftRightResend_MethodID_6, args: &__args, locals: &__locals )
    }

    open func requestTopDownLeftRightResend( _ _arg0: ImageConsumer? ) {
        requestTopDownLeftRightResend( arg0: _arg0 )
    }

}
