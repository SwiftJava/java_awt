
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:03 GMT 2016 ///

/// class java.awt.datatransfer.StringSelection ///

open class StringSelection: java_lang.JavaObject, Transferable, ClipboardOwner {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.datatransfer.StringSelection", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StringSelectionJNIClass: jclass?

    /// private static final int java.awt.datatransfer.StringSelection.STRING

    /// private static final int java.awt.datatransfer.StringSelection.PLAIN_TEXT

    /// private static final java.awt.datatransfer.DataFlavor[] java.awt.datatransfer.StringSelection.flavors

    /// private java.lang.String java.awt.datatransfer.StringSelection.data

    /// public java.awt.datatransfer.StringSelection(java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/datatransfer/StringSelection", classCache: &StringSelection.StringSelectionJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &StringSelection.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) {
        self.init( arg0: _arg0 )
    }

    /// public void java.awt.datatransfer.StringSelection.lostOwnership(java.awt.datatransfer.Clipboard,java.awt.datatransfer.Transferable)

    private static var lostOwnership_MethodID_2: jmethodID?

    open func lostOwnership( arg0: Clipboard?, arg1: Transferable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "lostOwnership", methodSig: "(Ljava/awt/datatransfer/Clipboard;Ljava/awt/datatransfer/Transferable;)V", methodCache: &StringSelection.lostOwnership_MethodID_2, args: &__args, locals: &__locals )
    }

    open func lostOwnership( _ _arg0: Clipboard?, _ _arg1: Transferable? ) {
        lostOwnership( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.datatransfer.DataFlavor[] java.awt.datatransfer.StringSelection.getTransferDataFlavors()

    private static var getTransferDataFlavors_MethodID_3: jmethodID?

    open func getTransferDataFlavors() -> [DataFlavor]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransferDataFlavors", methodSig: "()[Ljava/awt/datatransfer/DataFlavor;", methodCache: &StringSelection.getTransferDataFlavors_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: [DataFlavor](), from: __return )
    }


    /// public boolean java.awt.datatransfer.StringSelection.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)

    private static var isDataFlavorSupported_MethodID_4: jmethodID?

    open func isDataFlavorSupported( arg0: DataFlavor? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDataFlavorSupported", methodSig: "(Ljava/awt/datatransfer/DataFlavor;)Z", methodCache: &StringSelection.isDataFlavorSupported_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isDataFlavorSupported( _ _arg0: DataFlavor? ) -> Bool {
        return isDataFlavorSupported( arg0: _arg0 )
    }

    /// public java.lang.Object java.awt.datatransfer.StringSelection.getTransferData(java.awt.datatransfer.DataFlavor) throws java.awt.datatransfer.UnsupportedFlavorException,java.io.IOException

    private static var getTransferData_MethodID_5: jmethodID?

    open func getTransferData( arg0: DataFlavor? ) throws /* java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransferData", methodSig: "(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;", methodCache: &StringSelection.getTransferData_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw UnsupportedFlavorException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getTransferData( _ _arg0: DataFlavor? ) throws /* java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException */ -> java_lang.JavaObject! {
        return try getTransferData( arg0: _arg0 )
    }

}
