
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.CardLayout ///

open class CardLayout: java_swift.JavaObject, LayoutManager2, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CardLayoutJNIClass: jclass?

    /// private static final java.io.ObjectStreamField[] java.awt.CardLayout.serialPersistentFields

    /// private static final long java.awt.CardLayout.serialVersionUID

    /// int java.awt.CardLayout.currentCard

    // Skipping field: true false false false false false 

    /// int java.awt.CardLayout.hgap

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.CardLayout.vector

    // Skipping field: true false false false false false 

    /// int java.awt.CardLayout.vgap

    // Skipping field: true false false false false false 

    /// public java.awt.CardLayout()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/CardLayout", classCache: &CardLayout.CardLayoutJNIClass, methodSig: "()V", methodCache: &CardLayout.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.CardLayout(int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( hgap: Int, vgap: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(hgap) )
        __args[1] = jvalue( i: jint(vgap) )
        let __object = JNIMethod.NewObject( className: "java/awt/CardLayout", classCache: &CardLayout.CardLayoutJNIClass, methodSig: "(II)V", methodCache: &CardLayout.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _hgap: Int, _ _vgap: Int ) {
        self.init( hgap: _hgap, vgap: _vgap )
    }

    /// public void java.awt.CardLayout.addLayoutComponent(java.awt.Component,java.lang.Object)

    private static var addLayoutComponent_MethodID_3: jmethodID?

    open func addLayoutComponent( comp: Component?, constraints: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: comp, locals: &__locals )
        __args[1] = JNIType.toJava( value: constraints, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLayoutComponent", methodSig: "(Ljava/awt/Component;Ljava/lang/Object;)V", methodCache: &CardLayout.addLayoutComponent_MethodID_3, args: &__args, locals: &__locals )
    }

    open func addLayoutComponent( _ _comp: Component?, _ _constraints: java_swift.JavaObject? ) {
        addLayoutComponent( comp: _comp, constraints: _constraints )
    }

    /// public void java.awt.CardLayout.addLayoutComponent(java.lang.String,java.awt.Component)

    private static var addLayoutComponent_MethodID_4: jmethodID?

    open func addLayoutComponent( name: String?, comp: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = JNIType.toJava( value: comp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLayoutComponent", methodSig: "(Ljava/lang/String;Ljava/awt/Component;)V", methodCache: &CardLayout.addLayoutComponent_MethodID_4, args: &__args, locals: &__locals )
    }

    open func addLayoutComponent( _ _name: String?, _ _comp: Component? ) {
        addLayoutComponent( name: _name, comp: _comp )
    }

    /// void java.awt.CardLayout.checkLayout(java.awt.Container)

    // Skipping method: true false false false false 

    /// public void java.awt.CardLayout.first(java.awt.Container)

    private static var first_MethodID_5: jmethodID?

    open func first( parent: Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "first", methodSig: "(Ljava/awt/Container;)V", methodCache: &CardLayout.first_MethodID_5, args: &__args, locals: &__locals )
    }

    open func first( _ _parent: Container? ) {
        first( parent: _parent )
    }

    /// public int java.awt.CardLayout.getHgap()

    private static var getHgap_MethodID_6: jmethodID?

    open func getHgap() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getHgap", methodSig: "()I", methodCache: &CardLayout.getHgap_MethodID_6, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public float java.awt.CardLayout.getLayoutAlignmentX(java.awt.Container)

    private static var getLayoutAlignmentX_MethodID_7: jmethodID?

    open func getLayoutAlignmentX( target: Container? ) -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: target, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getLayoutAlignmentX", methodSig: "(Ljava/awt/Container;)F", methodCache: &CardLayout.getLayoutAlignmentX_MethodID_7, args: &__args, locals: &__locals )
        return __return
    }

    open func getLayoutAlignmentX( _ _target: Container? ) -> Float {
        return getLayoutAlignmentX( target: _target )
    }

    /// public float java.awt.CardLayout.getLayoutAlignmentY(java.awt.Container)

    private static var getLayoutAlignmentY_MethodID_8: jmethodID?

    open func getLayoutAlignmentY( target: Container? ) -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: target, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getLayoutAlignmentY", methodSig: "(Ljava/awt/Container;)F", methodCache: &CardLayout.getLayoutAlignmentY_MethodID_8, args: &__args, locals: &__locals )
        return __return
    }

    open func getLayoutAlignmentY( _ _target: Container? ) -> Float {
        return getLayoutAlignmentY( target: _target )
    }

    /// public int java.awt.CardLayout.getVgap()

    private static var getVgap_MethodID_9: jmethodID?

    open func getVgap() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getVgap", methodSig: "()I", methodCache: &CardLayout.getVgap_MethodID_9, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public void java.awt.CardLayout.invalidateLayout(java.awt.Container)

    private static var invalidateLayout_MethodID_10: jmethodID?

    open func invalidateLayout( target: Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: target, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "invalidateLayout", methodSig: "(Ljava/awt/Container;)V", methodCache: &CardLayout.invalidateLayout_MethodID_10, args: &__args, locals: &__locals )
    }

    open func invalidateLayout( _ _target: Container? ) {
        invalidateLayout( target: _target )
    }

    /// public void java.awt.CardLayout.last(java.awt.Container)

    private static var last_MethodID_11: jmethodID?

    open func last( parent: Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "last", methodSig: "(Ljava/awt/Container;)V", methodCache: &CardLayout.last_MethodID_11, args: &__args, locals: &__locals )
    }

    open func last( _ _parent: Container? ) {
        last( parent: _parent )
    }

    /// public void java.awt.CardLayout.layoutContainer(java.awt.Container)

    private static var layoutContainer_MethodID_12: jmethodID?

    open func layoutContainer( parent: Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layoutContainer", methodSig: "(Ljava/awt/Container;)V", methodCache: &CardLayout.layoutContainer_MethodID_12, args: &__args, locals: &__locals )
    }

    open func layoutContainer( _ _parent: Container? ) {
        layoutContainer( parent: _parent )
    }

    /// public java.awt.Dimension java.awt.CardLayout.maximumLayoutSize(java.awt.Container)

    private static var maximumLayoutSize_MethodID_13: jmethodID?

    open func maximumLayoutSize( target: Container? ) -> Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: target, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "maximumLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &CardLayout.maximumLayoutSize_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func maximumLayoutSize( _ _target: Container? ) -> Dimension! {
        return maximumLayoutSize( target: _target )
    }

    /// public java.awt.Dimension java.awt.CardLayout.minimumLayoutSize(java.awt.Container)

    private static var minimumLayoutSize_MethodID_14: jmethodID?

    open func minimumLayoutSize( parent: Container? ) -> Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "minimumLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &CardLayout.minimumLayoutSize_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func minimumLayoutSize( _ _parent: Container? ) -> Dimension! {
        return minimumLayoutSize( parent: _parent )
    }

    /// public void java.awt.CardLayout.next(java.awt.Container)

    private static var next_MethodID_15: jmethodID?

    open func next( parent: Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "next", methodSig: "(Ljava/awt/Container;)V", methodCache: &CardLayout.next_MethodID_15, args: &__args, locals: &__locals )
    }

    open func next( _ _parent: Container? ) {
        next( parent: _parent )
    }

    /// public java.awt.Dimension java.awt.CardLayout.preferredLayoutSize(java.awt.Container)

    private static var preferredLayoutSize_MethodID_16: jmethodID?

    open func preferredLayoutSize( parent: Container? ) -> Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "preferredLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &CardLayout.preferredLayoutSize_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func preferredLayoutSize( _ _parent: Container? ) -> Dimension! {
        return preferredLayoutSize( parent: _parent )
    }

    /// public void java.awt.CardLayout.previous(java.awt.Container)

    private static var previous_MethodID_17: jmethodID?

    open func previous( parent: Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "previous", methodSig: "(Ljava/awt/Container;)V", methodCache: &CardLayout.previous_MethodID_17, args: &__args, locals: &__locals )
    }

    open func previous( _ _parent: Container? ) {
        previous( parent: _parent )
    }

    /// private void java.awt.CardLayout.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// public void java.awt.CardLayout.removeLayoutComponent(java.awt.Component)

    private static var removeLayoutComponent_MethodID_18: jmethodID?

    open func removeLayoutComponent( comp: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeLayoutComponent", methodSig: "(Ljava/awt/Component;)V", methodCache: &CardLayout.removeLayoutComponent_MethodID_18, args: &__args, locals: &__locals )
    }

    open func removeLayoutComponent( _ _comp: Component? ) {
        removeLayoutComponent( comp: _comp )
    }

    /// public void java.awt.CardLayout.setHgap(int)

    private static var setHgap_MethodID_19: jmethodID?

    open func setHgap( hgap: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(hgap) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setHgap", methodSig: "(I)V", methodCache: &CardLayout.setHgap_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setHgap( _ _hgap: Int ) {
        setHgap( hgap: _hgap )
    }

    /// public void java.awt.CardLayout.setVgap(int)

    private static var setVgap_MethodID_20: jmethodID?

    open func setVgap( vgap: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(vgap) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVgap", methodSig: "(I)V", methodCache: &CardLayout.setVgap_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setVgap( _ _vgap: Int ) {
        setVgap( vgap: _vgap )
    }

    /// public void java.awt.CardLayout.show(java.awt.Container,java.lang.String)

    private static var show_MethodID_21: jmethodID?

    open func show( parent: Container?, name: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        __args[1] = JNIType.toJava( value: name, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "show", methodSig: "(Ljava/awt/Container;Ljava/lang/String;)V", methodCache: &CardLayout.show_MethodID_21, args: &__args, locals: &__locals )
    }

    open func show( _ _parent: Container?, _ _name: String? ) {
        show( parent: _parent, name: _name )
    }

    /// void java.awt.CardLayout.showDefaultComponent(java.awt.Container)

    // Skipping method: true false false false false 

    /// public java.lang.String java.awt.CardLayout.toString()

    // Skipping method: false true false false false 

    /// private void java.awt.CardLayout.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

}

