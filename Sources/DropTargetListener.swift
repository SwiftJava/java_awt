
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:42 GMT 2016 ///

/// interface java.awt.dnd.DropTargetListener ///

public protocol DropTargetListener: java_util.EventListener {

    /// public abstract void java.awt.dnd.DropTargetListener.dragEnter(java.awt.dnd.DropTargetDragEvent)

    func dragEnter( arg0: DropTargetDragEvent? )
    func dragEnter( _ _arg0: DropTargetDragEvent? )

    /// public abstract void java.awt.dnd.DropTargetListener.dragOver(java.awt.dnd.DropTargetDragEvent)

    func dragOver( arg0: DropTargetDragEvent? )
    func dragOver( _ _arg0: DropTargetDragEvent? )

    /// public abstract void java.awt.dnd.DropTargetListener.dropActionChanged(java.awt.dnd.DropTargetDragEvent)

    func dropActionChanged( arg0: DropTargetDragEvent? )
    func dropActionChanged( _ _arg0: DropTargetDragEvent? )

    /// public abstract void java.awt.dnd.DropTargetListener.dragExit(java.awt.dnd.DropTargetEvent)

    func dragExit( arg0: DropTargetEvent? )
    func dragExit( _ _arg0: DropTargetEvent? )

    /// public abstract void java.awt.dnd.DropTargetListener.drop(java.awt.dnd.DropTargetDropEvent)

    func drop( arg0: DropTargetDropEvent? )
    func drop( _ _arg0: DropTargetDropEvent? )

}

open class DropTargetListenerForward: java_util.EventListenerForward, DropTargetListener {

    private static var DropTargetListenerJNIClass: jclass?

    /// public abstract void java.awt.dnd.DropTargetListener.dragEnter(java.awt.dnd.DropTargetDragEvent)

    private static var dragEnter_MethodID_6: jmethodID?

    open func dragEnter( arg0: DropTargetDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragEnter", methodSig: "(Ljava/awt/dnd/DropTargetDragEvent;)V", methodCache: &DropTargetListenerForward.dragEnter_MethodID_6, args: &__args, locals: &__locals )
    }

    open func dragEnter( _ _arg0: DropTargetDragEvent? ) {
        dragEnter( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.dragOver(java.awt.dnd.DropTargetDragEvent)

    private static var dragOver_MethodID_7: jmethodID?

    open func dragOver( arg0: DropTargetDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragOver", methodSig: "(Ljava/awt/dnd/DropTargetDragEvent;)V", methodCache: &DropTargetListenerForward.dragOver_MethodID_7, args: &__args, locals: &__locals )
    }

    open func dragOver( _ _arg0: DropTargetDragEvent? ) {
        dragOver( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.dropActionChanged(java.awt.dnd.DropTargetDragEvent)

    private static var dropActionChanged_MethodID_8: jmethodID?

    open func dropActionChanged( arg0: DropTargetDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dropActionChanged", methodSig: "(Ljava/awt/dnd/DropTargetDragEvent;)V", methodCache: &DropTargetListenerForward.dropActionChanged_MethodID_8, args: &__args, locals: &__locals )
    }

    open func dropActionChanged( _ _arg0: DropTargetDragEvent? ) {
        dropActionChanged( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.dragExit(java.awt.dnd.DropTargetEvent)

    private static var dragExit_MethodID_9: jmethodID?

    open func dragExit( arg0: DropTargetEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragExit", methodSig: "(Ljava/awt/dnd/DropTargetEvent;)V", methodCache: &DropTargetListenerForward.dragExit_MethodID_9, args: &__args, locals: &__locals )
    }

    open func dragExit( _ _arg0: DropTargetEvent? ) {
        dragExit( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.drop(java.awt.dnd.DropTargetDropEvent)

    private static var drop_MethodID_10: jmethodID?

    open func drop( arg0: DropTargetDropEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drop", methodSig: "(Ljava/awt/dnd/DropTargetDropEvent;)V", methodCache: &DropTargetListenerForward.drop_MethodID_10, args: &__args, locals: &__locals )
    }

    open func drop( _ _arg0: DropTargetDropEvent? ) {
        drop( arg0: _arg0 )
    }

}


private typealias DropTargetListener_dragEnter_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DropTargetListener_dragEnter_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DropTargetListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dragEnter( arg0 != nil ? DropTargetDragEvent( javaObject: arg0 ) : nil )
}

private typealias DropTargetListener_dragOver_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DropTargetListener_dragOver_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DropTargetListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dragOver( arg0 != nil ? DropTargetDragEvent( javaObject: arg0 ) : nil )
}

private typealias DropTargetListener_dropActionChanged_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DropTargetListener_dropActionChanged_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DropTargetListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dropActionChanged( arg0 != nil ? DropTargetDragEvent( javaObject: arg0 ) : nil )
}

private typealias DropTargetListener_dragExit_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DropTargetListener_dragExit_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DropTargetListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dragExit( arg0 != nil ? DropTargetEvent( javaObject: arg0 ) : nil )
}

private typealias DropTargetListener_drop_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DropTargetListener_drop_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DropTargetListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).drop( arg0 != nil ? DropTargetDropEvent( javaObject: arg0 ) : nil )
}

open class DropTargetListenerBase: JNIObjectProxy, DropTargetListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let DropTargetListener_dragEnter_0_thunk: DropTargetListener_dragEnter_0_type = DropTargetListener_dragEnter_0
            natives.append( JNINativeMethod( name: strdup("__dragEnter"), signature: strdup("(Ljava/awt/dnd/DropTargetDragEvent;)V"), fnPtr: unsafeBitCast( DropTargetListener_dragEnter_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DropTargetListener_dragOver_1_thunk: DropTargetListener_dragOver_1_type = DropTargetListener_dragOver_1
            natives.append( JNINativeMethod( name: strdup("__dragOver"), signature: strdup("(Ljava/awt/dnd/DropTargetDragEvent;)V"), fnPtr: unsafeBitCast( DropTargetListener_dragOver_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DropTargetListener_dropActionChanged_2_thunk: DropTargetListener_dropActionChanged_2_type = DropTargetListener_dropActionChanged_2
            natives.append( JNINativeMethod( name: strdup("__dropActionChanged"), signature: strdup("(Ljava/awt/dnd/DropTargetDragEvent;)V"), fnPtr: unsafeBitCast( DropTargetListener_dropActionChanged_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DropTargetListener_dragExit_3_thunk: DropTargetListener_dragExit_3_type = DropTargetListener_dragExit_3
            natives.append( JNINativeMethod( name: strdup("__dragExit"), signature: strdup("(Ljava/awt/dnd/DropTargetEvent;)V"), fnPtr: unsafeBitCast( DropTargetListener_dragExit_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DropTargetListener_drop_4_thunk: DropTargetListener_drop_4_type = DropTargetListener_drop_4
            natives.append( JNINativeMethod( name: strdup("__drop"), signature: strdup("(Ljava/awt/dnd/DropTargetDropEvent;)V"), fnPtr: unsafeBitCast( DropTargetListener_drop_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/DropTargetListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        DropTargetListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/DropTargetListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> DropTargetListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: DropTargetListenerBase.self )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.dragEnter(java.awt.dnd.DropTargetDragEvent)

    open func dragEnter( arg0: DropTargetDragEvent? ) /**/ {
    }

    open func dragEnter( _ _arg0: DropTargetDragEvent? ) /**/ {
        dragEnter( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.dragOver(java.awt.dnd.DropTargetDragEvent)

    open func dragOver( arg0: DropTargetDragEvent? ) /**/ {
    }

    open func dragOver( _ _arg0: DropTargetDragEvent? ) /**/ {
        dragOver( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.dropActionChanged(java.awt.dnd.DropTargetDragEvent)

    open func dropActionChanged( arg0: DropTargetDragEvent? ) /**/ {
    }

    open func dropActionChanged( _ _arg0: DropTargetDragEvent? ) /**/ {
        dropActionChanged( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.dragExit(java.awt.dnd.DropTargetEvent)

    open func dragExit( arg0: DropTargetEvent? ) /**/ {
    }

    open func dragExit( _ _arg0: DropTargetEvent? ) /**/ {
        dragExit( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DropTargetListener.drop(java.awt.dnd.DropTargetDropEvent)

    open func drop( arg0: DropTargetDropEvent? ) /**/ {
    }

    open func drop( _ _arg0: DropTargetDropEvent? ) /**/ {
        drop( arg0: _arg0 )
    }

}
