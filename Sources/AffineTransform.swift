
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:58 GMT 2016 ///

/// class java.awt.geom.AffineTransform ///

open class AffineTransform: java_lang.JavaObject, java_lang.Cloneable, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.AffineTransform", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AffineTransformJNIClass: jclass?

    /// private static final int java.awt.geom.AffineTransform.TYPE_UNKNOWN

    /// public static final int java.awt.geom.AffineTransform.TYPE_IDENTITY

    private static var TYPE_IDENTITY_FieldID: jfieldID?

    open static var TYPE_IDENTITY: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_IDENTITY", fieldType: "I", fieldCache: &TYPE_IDENTITY_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_TRANSLATION

    private static var TYPE_TRANSLATION_FieldID: jfieldID?

    open static var TYPE_TRANSLATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_TRANSLATION", fieldType: "I", fieldCache: &TYPE_TRANSLATION_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_UNIFORM_SCALE

    private static var TYPE_UNIFORM_SCALE_FieldID: jfieldID?

    open static var TYPE_UNIFORM_SCALE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_UNIFORM_SCALE", fieldType: "I", fieldCache: &TYPE_UNIFORM_SCALE_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_GENERAL_SCALE

    private static var TYPE_GENERAL_SCALE_FieldID: jfieldID?

    open static var TYPE_GENERAL_SCALE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_GENERAL_SCALE", fieldType: "I", fieldCache: &TYPE_GENERAL_SCALE_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_MASK_SCALE

    private static var TYPE_MASK_SCALE_FieldID: jfieldID?

    open static var TYPE_MASK_SCALE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_MASK_SCALE", fieldType: "I", fieldCache: &TYPE_MASK_SCALE_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_FLIP

    private static var TYPE_FLIP_FieldID: jfieldID?

    open static var TYPE_FLIP: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_FLIP", fieldType: "I", fieldCache: &TYPE_FLIP_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_QUADRANT_ROTATION

    private static var TYPE_QUADRANT_ROTATION_FieldID: jfieldID?

    open static var TYPE_QUADRANT_ROTATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_QUADRANT_ROTATION", fieldType: "I", fieldCache: &TYPE_QUADRANT_ROTATION_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_GENERAL_ROTATION

    private static var TYPE_GENERAL_ROTATION_FieldID: jfieldID?

    open static var TYPE_GENERAL_ROTATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_GENERAL_ROTATION", fieldType: "I", fieldCache: &TYPE_GENERAL_ROTATION_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_MASK_ROTATION

    private static var TYPE_MASK_ROTATION_FieldID: jfieldID?

    open static var TYPE_MASK_ROTATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_MASK_ROTATION", fieldType: "I", fieldCache: &TYPE_MASK_ROTATION_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.AffineTransform.TYPE_GENERAL_TRANSFORM

    private static var TYPE_GENERAL_TRANSFORM_FieldID: jfieldID?

    open static var TYPE_GENERAL_TRANSFORM: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE_GENERAL_TRANSFORM", fieldType: "I", fieldCache: &TYPE_GENERAL_TRANSFORM_FieldID, className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// static final int java.awt.geom.AffineTransform.APPLY_IDENTITY

    /// static final int java.awt.geom.AffineTransform.APPLY_TRANSLATE

    /// static final int java.awt.geom.AffineTransform.APPLY_SCALE

    /// static final int java.awt.geom.AffineTransform.APPLY_SHEAR

    /// private static final int java.awt.geom.AffineTransform.HI_SHIFT

    /// private static final int java.awt.geom.AffineTransform.HI_IDENTITY

    /// private static final int java.awt.geom.AffineTransform.HI_TRANSLATE

    /// private static final int java.awt.geom.AffineTransform.HI_SCALE

    /// private static final int java.awt.geom.AffineTransform.HI_SHEAR

    /// double java.awt.geom.AffineTransform.m00

    /// double java.awt.geom.AffineTransform.m10

    /// double java.awt.geom.AffineTransform.m01

    /// double java.awt.geom.AffineTransform.m11

    /// double java.awt.geom.AffineTransform.m02

    /// double java.awt.geom.AffineTransform.m12

    /// transient int java.awt.geom.AffineTransform.state

    /// private transient int java.awt.geom.AffineTransform.type

    /// private static final int[] java.awt.geom.AffineTransform.rot90conversion

    /// private static final long java.awt.geom.AffineTransform.serialVersionUID

    /// public java.awt.geom.AffineTransform(float,float,float,float,float,float)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Float, arg1: Float, arg2: Float, arg3: Float, arg4: Float, arg5: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/AffineTransform", classCache: &AffineTransform.AffineTransformJNIClass, methodSig: "(FFFFFF)V", methodCache: &AffineTransform.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Float, _ _arg2: Float, _ _arg3: Float, _ _arg4: Float, _ _arg5: Float ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public java.awt.geom.AffineTransform(double[])

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/AffineTransform", classCache: &AffineTransform.AffineTransformJNIClass, methodSig: "([D)V", methodCache: &AffineTransform.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [Double]? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.geom.AffineTransform(float[])

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: [Float]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/AffineTransform", classCache: &AffineTransform.AffineTransformJNIClass, methodSig: "([F)V", methodCache: &AffineTransform.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [Float]? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.geom.AffineTransform()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/AffineTransform", classCache: &AffineTransform.AffineTransformJNIClass, methodSig: "()V", methodCache: &AffineTransform.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// private java.awt.geom.AffineTransform(double,double,double,double,double,double,int)

    /// public java.awt.geom.AffineTransform(java.awt.geom.AffineTransform)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/AffineTransform", classCache: &AffineTransform.AffineTransformJNIClass, methodSig: "(Ljava/awt/geom/AffineTransform;)V", methodCache: &AffineTransform.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: AffineTransform? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.geom.AffineTransform(double,double,double,double,double,double)

    private static var new_MethodID_6: jmethodID?

    public convenience init( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/AffineTransform", classCache: &AffineTransform.AffineTransformJNIClass, methodSig: "(DDDDDD)V", methodCache: &AffineTransform.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public boolean java.awt.geom.AffineTransform.equals(java.lang.Object)

    /// public java.lang.String java.awt.geom.AffineTransform.toString()

    /// public int java.awt.geom.AffineTransform.hashCode()

    /// public java.lang.Object java.awt.geom.AffineTransform.clone()

    private static var clone_MethodID_7: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &AffineTransform.clone_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public void java.awt.geom.AffineTransform.transform(float[],int,double[],int,int)

    private static var transform_MethodID_8: jmethodID?

    open func transform( arg0: [Float]?, arg1: Int, arg2: [Double]?, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transform", methodSig: "([FI[DII)V", methodCache: &AffineTransform.transform_MethodID_8, args: &__args, locals: &__locals )
    }

    open func transform( _ _arg0: [Float]?, _ _arg1: Int, _ _arg2: [Double]?, _ _arg3: Int, _ _arg4: Int ) {
        transform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public java.awt.geom.Point2D java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D,java.awt.geom.Point2D)

    private static var transform_MethodID_9: jmethodID?

    open func transform( arg0: Point2D?, arg1: Point2D? ) -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "transform", methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)Ljava/awt/geom/Point2D;", methodCache: &AffineTransform.transform_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }

    open func transform( _ _arg0: Point2D?, _ _arg1: Point2D? ) -> Point2D! {
        return transform( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.transform(java.awt.geom.Point2D[],int,java.awt.geom.Point2D[],int,int)

    private static var transform_MethodID_10: jmethodID?

    open func transform( arg0: [Point2D]?, arg1: Int, arg2: [Point2D]?, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transform", methodSig: "([Ljava/awt/geom/Point2D;I[Ljava/awt/geom/Point2D;II)V", methodCache: &AffineTransform.transform_MethodID_10, args: &__args, locals: &__locals )
    }

    open func transform( _ _arg0: [Point2D]?, _ _arg1: Int, _ _arg2: [Point2D]?, _ _arg3: Int, _ _arg4: Int ) {
        transform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.geom.AffineTransform.transform(float[],int,float[],int,int)

    private static var transform_MethodID_11: jmethodID?

    open func transform( arg0: [Float]?, arg1: Int, arg2: [Float]?, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transform", methodSig: "([FI[FII)V", methodCache: &AffineTransform.transform_MethodID_11, args: &__args, locals: &__locals )
    }

    open func transform( _ _arg0: [Float]?, _ _arg1: Int, _ _arg2: [Float]?, _ _arg3: Int, _ _arg4: Int ) {
        transform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.geom.AffineTransform.transform(double[],int,double[],int,int)

    private static var transform_MethodID_12: jmethodID?

    open func transform( arg0: [Double]?, arg1: Int, arg2: [Double]?, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transform", methodSig: "([DI[DII)V", methodCache: &AffineTransform.transform_MethodID_12, args: &__args, locals: &__locals )
    }

    open func transform( _ _arg0: [Double]?, _ _arg1: Int, _ _arg2: [Double]?, _ _arg3: Int, _ _arg4: Int ) {
        transform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.geom.AffineTransform.transform(double[],int,float[],int,int)

    private static var transform_MethodID_13: jmethodID?

    open func transform( arg0: [Double]?, arg1: Int, arg2: [Float]?, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transform", methodSig: "([DI[FII)V", methodCache: &AffineTransform.transform_MethodID_13, args: &__args, locals: &__locals )
    }

    open func transform( _ _arg0: [Double]?, _ _arg1: Int, _ _arg2: [Float]?, _ _arg3: Int, _ _arg4: Int ) {
        transform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// private void java.awt.geom.AffineTransform.writeObject(java.io.ObjectOutputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// private void java.awt.geom.AffineTransform.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// public int java.awt.geom.AffineTransform.getType()

    private static var getType_MethodID_14: jmethodID?

    open func getType() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getType", methodSig: "()I", methodCache: &AffineTransform.getType_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.geom.AffineTransform.rotate(double,double,double,double)

    private static var rotate_MethodID_15: jmethodID?

    open func rotate( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rotate", methodSig: "(DDDD)V", methodCache: &AffineTransform.rotate_MethodID_15, args: &__args, locals: &__locals )
    }

    open func rotate( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) {
        rotate( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.geom.AffineTransform.rotate(double)

    private static var rotate_MethodID_16: jmethodID?

    open func rotate( arg0: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rotate", methodSig: "(D)V", methodCache: &AffineTransform.rotate_MethodID_16, args: &__args, locals: &__locals )
    }

    open func rotate( _ _arg0: Double ) {
        rotate( arg0: _arg0 )
    }

    /// public void java.awt.geom.AffineTransform.rotate(double,double,double)

    private static var rotate_MethodID_17: jmethodID?

    open func rotate( arg0: Double, arg1: Double, arg2: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rotate", methodSig: "(DDD)V", methodCache: &AffineTransform.rotate_MethodID_17, args: &__args, locals: &__locals )
    }

    open func rotate( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double ) {
        rotate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.geom.AffineTransform.rotate(double,double)

    private static var rotate_MethodID_18: jmethodID?

    open func rotate( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rotate", methodSig: "(DD)V", methodCache: &AffineTransform.rotate_MethodID_18, args: &__args, locals: &__locals )
    }

    open func rotate( _ _arg0: Double, _ _arg1: Double ) {
        rotate( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.scale(double,double)

    private static var scale_MethodID_19: jmethodID?

    open func scale( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "scale", methodSig: "(DD)V", methodCache: &AffineTransform.scale_MethodID_19, args: &__args, locals: &__locals )
    }

    open func scale( _ _arg0: Double, _ _arg1: Double ) {
        scale( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.translate(double,double)

    private static var translate_MethodID_20: jmethodID?

    open func translate( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "translate", methodSig: "(DD)V", methodCache: &AffineTransform.translate_MethodID_20, args: &__args, locals: &__locals )
    }

    open func translate( _ _arg0: Double, _ _arg1: Double ) {
        translate( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getTranslateInstance(double,double)

    private static var getTranslateInstance_MethodID_21: jmethodID?

    open class func getTranslateInstance( arg0: Double, arg1: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getTranslateInstance", methodSig: "(DD)Ljava/awt/geom/AffineTransform;", methodCache: &getTranslateInstance_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getTranslateInstance( _ _arg0: Double, _ _arg1: Double ) -> AffineTransform! {
        return getTranslateInstance( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.preConcatenate(java.awt.geom.AffineTransform)

    private static var preConcatenate_MethodID_22: jmethodID?

    open func preConcatenate( arg0: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "preConcatenate", methodSig: "(Ljava/awt/geom/AffineTransform;)V", methodCache: &AffineTransform.preConcatenate_MethodID_22, args: &__args, locals: &__locals )
    }

    open func preConcatenate( _ _arg0: AffineTransform? ) {
        preConcatenate( arg0: _arg0 )
    }

    /// public void java.awt.geom.AffineTransform.getMatrix(double[])

    private static var getMatrix_MethodID_23: jmethodID?

    open func getMatrix( arg0: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "getMatrix", methodSig: "([D)V", methodCache: &AffineTransform.getMatrix_MethodID_23, args: &__args, locals: &__locals )
    }

    open func getMatrix( _ _arg0: [Double]? ) {
        getMatrix( arg0: _arg0 )
    }

    /// public double java.awt.geom.AffineTransform.getTranslateY()

    private static var getTranslateY_MethodID_24: jmethodID?

    open func getTranslateY() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getTranslateY", methodSig: "()D", methodCache: &AffineTransform.getTranslateY_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public void java.awt.geom.AffineTransform.deltaTransform(double[],int,double[],int,int)

    private static var deltaTransform_MethodID_25: jmethodID?

    open func deltaTransform( arg0: [Double]?, arg1: Int, arg2: [Double]?, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "deltaTransform", methodSig: "([DI[DII)V", methodCache: &AffineTransform.deltaTransform_MethodID_25, args: &__args, locals: &__locals )
    }

    open func deltaTransform( _ _arg0: [Double]?, _ _arg1: Int, _ _arg2: [Double]?, _ _arg3: Int, _ _arg4: Int ) {
        deltaTransform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public java.awt.geom.Point2D java.awt.geom.AffineTransform.deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)

    private static var deltaTransform_MethodID_26: jmethodID?

    open func deltaTransform( arg0: Point2D?, arg1: Point2D? ) -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deltaTransform", methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)Ljava/awt/geom/Point2D;", methodCache: &AffineTransform.deltaTransform_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }

    open func deltaTransform( _ _arg0: Point2D?, _ _arg1: Point2D? ) -> Point2D! {
        return deltaTransform( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.setTransform(java.awt.geom.AffineTransform)

    private static var setTransform_MethodID_27: jmethodID?

    open func setTransform( arg0: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTransform", methodSig: "(Ljava/awt/geom/AffineTransform;)V", methodCache: &AffineTransform.setTransform_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setTransform( _ _arg0: AffineTransform? ) {
        setTransform( arg0: _arg0 )
    }

    /// public void java.awt.geom.AffineTransform.setTransform(double,double,double,double,double,double)

    private static var setTransform_MethodID_28: jmethodID?

    open func setTransform( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTransform", methodSig: "(DDDDDD)V", methodCache: &AffineTransform.setTransform_MethodID_28, args: &__args, locals: &__locals )
    }

    open func setTransform( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double ) {
        setTransform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.geom.AffineTransform.concatenate(java.awt.geom.AffineTransform)

    private static var concatenate_MethodID_29: jmethodID?

    open func concatenate( arg0: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "concatenate", methodSig: "(Ljava/awt/geom/AffineTransform;)V", methodCache: &AffineTransform.concatenate_MethodID_29, args: &__args, locals: &__locals )
    }

    open func concatenate( _ _arg0: AffineTransform? ) {
        concatenate( arg0: _arg0 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getRotateInstance(double,double,double)

    private static var getRotateInstance_MethodID_30: jmethodID?

    open class func getRotateInstance( arg0: Double, arg1: Double, arg2: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getRotateInstance", methodSig: "(DDD)Ljava/awt/geom/AffineTransform;", methodCache: &getRotateInstance_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getRotateInstance( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double ) -> AffineTransform! {
        return getRotateInstance( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getRotateInstance(double)

    private static var getRotateInstance_MethodID_31: jmethodID?

    open class func getRotateInstance( arg0: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getRotateInstance", methodSig: "(D)Ljava/awt/geom/AffineTransform;", methodCache: &getRotateInstance_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getRotateInstance( _ _arg0: Double ) -> AffineTransform! {
        return getRotateInstance( arg0: _arg0 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getRotateInstance(double,double)

    private static var getRotateInstance_MethodID_32: jmethodID?

    open class func getRotateInstance( arg0: Double, arg1: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getRotateInstance", methodSig: "(DD)Ljava/awt/geom/AffineTransform;", methodCache: &getRotateInstance_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getRotateInstance( _ _arg0: Double, _ _arg1: Double ) -> AffineTransform! {
        return getRotateInstance( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getRotateInstance(double,double,double,double)

    private static var getRotateInstance_MethodID_33: jmethodID?

    open class func getRotateInstance( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getRotateInstance", methodSig: "(DDDD)Ljava/awt/geom/AffineTransform;", methodCache: &getRotateInstance_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getRotateInstance( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) -> AffineTransform! {
        return getRotateInstance( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getQuadrantRotateInstance(int,double,double)

    private static var getQuadrantRotateInstance_MethodID_34: jmethodID?

    open class func getQuadrantRotateInstance( arg0: Int, arg1: Double, arg2: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getQuadrantRotateInstance", methodSig: "(IDD)Ljava/awt/geom/AffineTransform;", methodCache: &getQuadrantRotateInstance_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getQuadrantRotateInstance( _ _arg0: Int, _ _arg1: Double, _ _arg2: Double ) -> AffineTransform! {
        return getQuadrantRotateInstance( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getQuadrantRotateInstance(int)

    private static var getQuadrantRotateInstance_MethodID_35: jmethodID?

    open class func getQuadrantRotateInstance( arg0: Int ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getQuadrantRotateInstance", methodSig: "(I)Ljava/awt/geom/AffineTransform;", methodCache: &getQuadrantRotateInstance_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getQuadrantRotateInstance( _ _arg0: Int ) -> AffineTransform! {
        return getQuadrantRotateInstance( arg0: _arg0 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getScaleInstance(double,double)

    private static var getScaleInstance_MethodID_36: jmethodID?

    open class func getScaleInstance( arg0: Double, arg1: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getScaleInstance", methodSig: "(DD)Ljava/awt/geom/AffineTransform;", methodCache: &getScaleInstance_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getScaleInstance( _ _arg0: Double, _ _arg1: Double ) -> AffineTransform! {
        return getScaleInstance( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.geom.AffineTransform java.awt.geom.AffineTransform.getShearInstance(double,double)

    private static var getShearInstance_MethodID_37: jmethodID?

    open class func getShearInstance( arg0: Double, arg1: Double ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/geom/AffineTransform", classCache: &AffineTransformJNIClass, methodName: "getShearInstance", methodSig: "(DD)Ljava/awt/geom/AffineTransform;", methodCache: &getShearInstance_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open class func getShearInstance( _ _arg0: Double, _ _arg1: Double ) -> AffineTransform! {
        return getShearInstance( arg0: _arg0, arg1: _arg1 )
    }

    /// private void java.awt.geom.AffineTransform.calculateType()

    /// public double java.awt.geom.AffineTransform.getDeterminant()

    private static var getDeterminant_MethodID_38: jmethodID?

    open func getDeterminant() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getDeterminant", methodSig: "()D", methodCache: &AffineTransform.getDeterminant_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// void java.awt.geom.AffineTransform.updateState()

    /// private void java.awt.geom.AffineTransform.stateError()

    /// public double java.awt.geom.AffineTransform.getScaleX()

    private static var getScaleX_MethodID_39: jmethodID?

    open func getScaleX() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getScaleX", methodSig: "()D", methodCache: &AffineTransform.getScaleX_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public double java.awt.geom.AffineTransform.getScaleY()

    private static var getScaleY_MethodID_40: jmethodID?

    open func getScaleY() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getScaleY", methodSig: "()D", methodCache: &AffineTransform.getScaleY_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public double java.awt.geom.AffineTransform.getShearX()

    private static var getShearX_MethodID_41: jmethodID?

    open func getShearX() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getShearX", methodSig: "()D", methodCache: &AffineTransform.getShearX_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public double java.awt.geom.AffineTransform.getShearY()

    private static var getShearY_MethodID_42: jmethodID?

    open func getShearY() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getShearY", methodSig: "()D", methodCache: &AffineTransform.getShearY_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public double java.awt.geom.AffineTransform.getTranslateX()

    private static var getTranslateX_MethodID_43: jmethodID?

    open func getTranslateX() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getTranslateX", methodSig: "()D", methodCache: &AffineTransform.getTranslateX_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// private final void java.awt.geom.AffineTransform.rotate90()

    /// private final void java.awt.geom.AffineTransform.rotate180()

    /// private final void java.awt.geom.AffineTransform.rotate270()

    /// public void java.awt.geom.AffineTransform.quadrantRotate(int,double,double)

    private static var quadrantRotate_MethodID_44: jmethodID?

    open func quadrantRotate( arg0: Int, arg1: Double, arg2: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "quadrantRotate", methodSig: "(IDD)V", methodCache: &AffineTransform.quadrantRotate_MethodID_44, args: &__args, locals: &__locals )
    }

    open func quadrantRotate( _ _arg0: Int, _ _arg1: Double, _ _arg2: Double ) {
        quadrantRotate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.geom.AffineTransform.quadrantRotate(int)

    private static var quadrantRotate_MethodID_45: jmethodID?

    open func quadrantRotate( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "quadrantRotate", methodSig: "(I)V", methodCache: &AffineTransform.quadrantRotate_MethodID_45, args: &__args, locals: &__locals )
    }

    open func quadrantRotate( _ _arg0: Int ) {
        quadrantRotate( arg0: _arg0 )
    }

    /// public void java.awt.geom.AffineTransform.shear(double,double)

    private static var shear_MethodID_46: jmethodID?

    open func shear( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "shear", methodSig: "(DD)V", methodCache: &AffineTransform.shear_MethodID_46, args: &__args, locals: &__locals )
    }

    open func shear( _ _arg0: Double, _ _arg1: Double ) {
        shear( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.setToIdentity()

    private static var setToIdentity_MethodID_47: jmethodID?

    open func setToIdentity() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToIdentity", methodSig: "()V", methodCache: &AffineTransform.setToIdentity_MethodID_47, args: &__args, locals: &__locals )
    }


    /// public void java.awt.geom.AffineTransform.setToTranslation(double,double)

    private static var setToTranslation_MethodID_48: jmethodID?

    open func setToTranslation( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToTranslation", methodSig: "(DD)V", methodCache: &AffineTransform.setToTranslation_MethodID_48, args: &__args, locals: &__locals )
    }

    open func setToTranslation( _ _arg0: Double, _ _arg1: Double ) {
        setToTranslation( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.setToRotation(double,double)

    private static var setToRotation_MethodID_49: jmethodID?

    open func setToRotation( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToRotation", methodSig: "(DD)V", methodCache: &AffineTransform.setToRotation_MethodID_49, args: &__args, locals: &__locals )
    }

    open func setToRotation( _ _arg0: Double, _ _arg1: Double ) {
        setToRotation( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.setToRotation(double)

    private static var setToRotation_MethodID_50: jmethodID?

    open func setToRotation( arg0: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToRotation", methodSig: "(D)V", methodCache: &AffineTransform.setToRotation_MethodID_50, args: &__args, locals: &__locals )
    }

    open func setToRotation( _ _arg0: Double ) {
        setToRotation( arg0: _arg0 )
    }

    /// public void java.awt.geom.AffineTransform.setToRotation(double,double,double)

    private static var setToRotation_MethodID_51: jmethodID?

    open func setToRotation( arg0: Double, arg1: Double, arg2: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToRotation", methodSig: "(DDD)V", methodCache: &AffineTransform.setToRotation_MethodID_51, args: &__args, locals: &__locals )
    }

    open func setToRotation( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double ) {
        setToRotation( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.geom.AffineTransform.setToRotation(double,double,double,double)

    private static var setToRotation_MethodID_52: jmethodID?

    open func setToRotation( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToRotation", methodSig: "(DDDD)V", methodCache: &AffineTransform.setToRotation_MethodID_52, args: &__args, locals: &__locals )
    }

    open func setToRotation( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) {
        setToRotation( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.geom.AffineTransform.setToQuadrantRotation(int)

    private static var setToQuadrantRotation_MethodID_53: jmethodID?

    open func setToQuadrantRotation( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToQuadrantRotation", methodSig: "(I)V", methodCache: &AffineTransform.setToQuadrantRotation_MethodID_53, args: &__args, locals: &__locals )
    }

    open func setToQuadrantRotation( _ _arg0: Int ) {
        setToQuadrantRotation( arg0: _arg0 )
    }

    /// public void java.awt.geom.AffineTransform.setToQuadrantRotation(int,double,double)

    private static var setToQuadrantRotation_MethodID_54: jmethodID?

    open func setToQuadrantRotation( arg0: Int, arg1: Double, arg2: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToQuadrantRotation", methodSig: "(IDD)V", methodCache: &AffineTransform.setToQuadrantRotation_MethodID_54, args: &__args, locals: &__locals )
    }

    open func setToQuadrantRotation( _ _arg0: Int, _ _arg1: Double, _ _arg2: Double ) {
        setToQuadrantRotation( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.geom.AffineTransform.setToScale(double,double)

    private static var setToScale_MethodID_55: jmethodID?

    open func setToScale( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToScale", methodSig: "(DD)V", methodCache: &AffineTransform.setToScale_MethodID_55, args: &__args, locals: &__locals )
    }

    open func setToScale( _ _arg0: Double, _ _arg1: Double ) {
        setToScale( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.AffineTransform.setToShear(double,double)

    private static var setToShear_MethodID_56: jmethodID?

    open func setToShear( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToShear", methodSig: "(DD)V", methodCache: &AffineTransform.setToShear_MethodID_56, args: &__args, locals: &__locals )
    }

    open func setToShear( _ _arg0: Double, _ _arg1: Double ) {
        setToShear( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.geom.AffineTransform java.awt.geom.AffineTransform.createInverse() throws java.awt.geom.NoninvertibleTransformException

    private static var createInverse_MethodID_57: jmethodID?

    open func createInverse() throws /* java.awt.geom.NoninvertibleTransformException */ -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createInverse", methodSig: "()Ljava/awt/geom/AffineTransform;", methodCache: &AffineTransform.createInverse_MethodID_57, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NoninvertibleTransformException( javaObject: throwable )
        }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }


    /// public void java.awt.geom.AffineTransform.invert() throws java.awt.geom.NoninvertibleTransformException

    private static var invert_MethodID_58: jmethodID?

    open func invert() throws /* java.awt.geom.NoninvertibleTransformException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "invert", methodSig: "()V", methodCache: &AffineTransform.invert_MethodID_58, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NoninvertibleTransformException( javaObject: throwable )
        }
    }


    /// public void java.awt.geom.AffineTransform.inverseTransform(double[],int,double[],int,int) throws java.awt.geom.NoninvertibleTransformException

    private static var inverseTransform_MethodID_59: jmethodID?

    open func inverseTransform( arg0: [Double]?, arg1: Int, arg2: [Double]?, arg3: Int, arg4: Int ) throws /* java.awt.geom.NoninvertibleTransformException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "inverseTransform", methodSig: "([DI[DII)V", methodCache: &AffineTransform.inverseTransform_MethodID_59, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw NoninvertibleTransformException( javaObject: throwable )
        }
    }

    open func inverseTransform( _ _arg0: [Double]?, _ _arg1: Int, _ _arg2: [Double]?, _ _arg3: Int, _ _arg4: Int ) throws /* java.awt.geom.NoninvertibleTransformException */ {
        try inverseTransform( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public java.awt.geom.Point2D java.awt.geom.AffineTransform.inverseTransform(java.awt.geom.Point2D,java.awt.geom.Point2D) throws java.awt.geom.NoninvertibleTransformException

    private static var inverseTransform_MethodID_60: jmethodID?

    open func inverseTransform( arg0: Point2D?, arg1: Point2D? ) throws /* java.awt.geom.NoninvertibleTransformException */ -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "inverseTransform", methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)Ljava/awt/geom/Point2D;", methodCache: &AffineTransform.inverseTransform_MethodID_60, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw NoninvertibleTransformException( javaObject: throwable )
        }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }

    open func inverseTransform( _ _arg0: Point2D?, _ _arg1: Point2D? ) throws /* java.awt.geom.NoninvertibleTransformException */ -> Point2D! {
        return try inverseTransform( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Shape java.awt.geom.AffineTransform.createTransformedShape(java.awt.Shape)

    private static var createTransformedShape_MethodID_61: jmethodID?

    open func createTransformedShape( arg0: Shape? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createTransformedShape", methodSig: "(Ljava/awt/Shape;)Ljava/awt/Shape;", methodCache: &AffineTransform.createTransformedShape_MethodID_61, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func createTransformedShape( _ _arg0: Shape? ) -> Shape! {
        return createTransformedShape( arg0: _arg0 )
    }

    /// private static double java.awt.geom.AffineTransform._matround(double)

    /// public boolean java.awt.geom.AffineTransform.isIdentity()

    private static var isIdentity_MethodID_62: jmethodID?

    open func isIdentity() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isIdentity", methodSig: "()Z", methodCache: &AffineTransform.isIdentity_MethodID_62, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


}
