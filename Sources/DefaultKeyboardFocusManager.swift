
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.DefaultKeyboardFocusManager ///

open class DefaultKeyboardFocusManager: KeyboardFocusManager {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DefaultKeyboardFocusManagerJNIClass: jclass?

    /// private static final java.lang.ref.WeakReference java.awt.DefaultKeyboardFocusManager.NULL_COMPONENT_WR

    /// private static final java.lang.ref.WeakReference java.awt.DefaultKeyboardFocusManager.NULL_WINDOW_WR

    /// private static final sun.util.logging.PlatformLogger java.awt.DefaultKeyboardFocusManager.focusLog

    /// private boolean java.awt.DefaultKeyboardFocusManager.consumeNextKeyTyped

    /// private java.util.LinkedList java.awt.DefaultKeyboardFocusManager.enqueuedKeyEvents

    /// private int java.awt.DefaultKeyboardFocusManager.inSendMessage

    /// private java.lang.ref.WeakReference java.awt.DefaultKeyboardFocusManager.realOppositeComponentWR

    /// private java.lang.ref.WeakReference java.awt.DefaultKeyboardFocusManager.realOppositeWindowWR

    /// private java.util.LinkedList java.awt.DefaultKeyboardFocusManager.typeAheadMarkers

    /// static final boolean java.awt.KeyboardFocusManager.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final int java.awt.KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS

    // Skipping field: false true false false false false 

    /// static final int java.awt.KeyboardFocusManager.SNFH_FAILURE

    // Skipping field: true false false false false false 

    /// static final int java.awt.KeyboardFocusManager.SNFH_SUCCESS_HANDLED

    // Skipping field: true false false false false false 

    /// static final int java.awt.KeyboardFocusManager.SNFH_SUCCESS_PROCEED

    // Skipping field: true false false false false false 

    /// static final int java.awt.KeyboardFocusManager.TRAVERSAL_KEY_LENGTH

    // Skipping field: true false false false false false 

    /// public static final int java.awt.KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS

    // Skipping field: false true false false false false 

    /// private static java.awt.Window java.awt.KeyboardFocusManager.activeWindow

    /// private static boolean java.awt.KeyboardFocusManager.allowSyncFocusRequests

    /// private static boolean java.awt.KeyboardFocusManager.clearingCurrentLightweightRequests

    /// private static java.awt.Container java.awt.KeyboardFocusManager.currentFocusCycleRoot

    /// private static java.util.LinkedList java.awt.KeyboardFocusManager.currentLightweightRequests

    /// private static final java.lang.String[] java.awt.KeyboardFocusManager.defaultFocusTraversalKeyPropertyNames

    /// private static final java.awt.AWTKeyStroke[][] java.awt.KeyboardFocusManager.defaultFocusTraversalKeyStrokes

    /// private static volatile boolean java.awt.KeyboardFocusManager.disableRestoreFocus

    /// private static final sun.util.logging.PlatformLogger java.awt.KeyboardFocusManager.focusLog

    /// private static java.awt.Component java.awt.KeyboardFocusManager.focusOwner

    /// private static java.awt.Window java.awt.KeyboardFocusManager.focusedWindow

    /// private static java.util.LinkedList java.awt.KeyboardFocusManager.heavyweightRequests

    /// private static final sun.util.logging.PlatformLogger java.awt.KeyboardFocusManager.log

    /// private static java.util.Map java.awt.KeyboardFocusManager.mostRecentFocusOwners

    /// private static java.awt.Component java.awt.KeyboardFocusManager.newFocusOwner

    /// private static java.awt.Component java.awt.KeyboardFocusManager.permanentFocusOwner

    /// static java.lang.reflect.Field java.awt.KeyboardFocusManager.proxyActive

    // Skipping field: true false false false false false 

    /// private static java.awt.AWTPermission java.awt.KeyboardFocusManager.replaceKeyboardFocusManagerPermission

    /// private java.beans.PropertyChangeSupport java.awt.KeyboardFocusManager.changeSupport

    /// transient java.awt.SequencedEvent java.awt.KeyboardFocusManager.currentSequencedEvent

    // Skipping field: true false false false false false 

    /// private java.util.Set[] java.awt.KeyboardFocusManager.defaultFocusTraversalKeys

    /// private java.awt.FocusTraversalPolicy java.awt.KeyboardFocusManager.defaultPolicy

    /// private java.util.LinkedList java.awt.KeyboardFocusManager.keyEventDispatchers

    /// private java.util.LinkedList java.awt.KeyboardFocusManager.keyEventPostProcessors

    /// transient java.awt.peer.KeyboardFocusManagerPeer java.awt.KeyboardFocusManager.peer

    // Skipping field: true false false false false false 

    /// private java.beans.VetoableChangeSupport java.awt.KeyboardFocusManager.vetoableSupport

    /// public java.awt.DefaultKeyboardFocusManager()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/DefaultKeyboardFocusManager", classCache: &DefaultKeyboardFocusManager.DefaultKeyboardFocusManagerJNIClass, methodSig: "()V", methodCache: &DefaultKeyboardFocusManager.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static void java.awt.DefaultKeyboardFocusManager.access$000(java.awt.DefaultKeyboardFocusManager,java.awt.event.KeyEvent)

    // Skipping method: true false false false false 

    /// static int java.awt.DefaultKeyboardFocusManager.access$108(java.awt.DefaultKeyboardFocusManager)

    // Skipping method: true false false false false 

    /// static int java.awt.DefaultKeyboardFocusManager.access$110(java.awt.DefaultKeyboardFocusManager)

    // Skipping method: true false false false false 

    /// static boolean java.awt.DefaultKeyboardFocusManager.sendMessage(java.awt.Component,java.awt.AWTEvent)

    // Skipping method: true false false false false 

    /// void java.awt.DefaultKeyboardFocusManager.clearMarkers()

    // Skipping method: true false false false false 

    /// private void java.awt.DefaultKeyboardFocusManager.consumeNextKeyTyped(java.awt.event.KeyEvent)

    /// private boolean java.awt.DefaultKeyboardFocusManager.consumeProcessedKeyEvent(java.awt.event.KeyEvent)

    /// private void java.awt.DefaultKeyboardFocusManager.consumeTraversalKey(java.awt.event.KeyEvent)

    /// protected synchronized void java.awt.DefaultKeyboardFocusManager.dequeueKeyEvents(long,java.awt.Component)

    private static var dequeueKeyEvents_MethodID_2: jmethodID?

    override open func dequeueKeyEvents( arg0: Int64, arg1: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: arg0 )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dequeueKeyEvents", methodSig: "(JLjava/awt/Component;)V", methodCache: &DefaultKeyboardFocusManager.dequeueKeyEvents_MethodID_2, args: &__args, locals: &__locals )
    }

    override open func dequeueKeyEvents( _ _arg0: Int64, _ _arg1: Component? ) {
        dequeueKeyEvents( arg0: _arg0, arg1: _arg1 )
    }

    /// protected synchronized void java.awt.DefaultKeyboardFocusManager.discardKeyEvents(java.awt.Component)

    private static var discardKeyEvents_MethodID_3: jmethodID?

    override open func discardKeyEvents( arg0: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "discardKeyEvents", methodSig: "(Ljava/awt/Component;)V", methodCache: &DefaultKeyboardFocusManager.discardKeyEvents_MethodID_3, args: &__args, locals: &__locals )
    }

    override open func discardKeyEvents( _ _arg0: Component? ) {
        discardKeyEvents( arg0: _arg0 )
    }

    /// public boolean java.awt.DefaultKeyboardFocusManager.dispatchEvent(java.awt.AWTEvent)

    // Skipping method: false true false false false 

    /// public boolean java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(java.awt.event.KeyEvent)

    // Skipping method: false true false false false 

    /// private boolean java.awt.DefaultKeyboardFocusManager.doRestoreFocus(java.awt.Component,java.awt.Component,boolean)

    /// public void java.awt.DefaultKeyboardFocusManager.downFocusCycle(java.awt.Container)

    // Skipping method: false true false false false 

    /// void java.awt.DefaultKeyboardFocusManager.dumpMarkers()

    // Skipping method: true false false false false 

    /// protected synchronized void java.awt.DefaultKeyboardFocusManager.enqueueKeyEvents(long,java.awt.Component)

    private static var enqueueKeyEvents_MethodID_4: jmethodID?

    override open func enqueueKeyEvents( arg0: Int64, arg1: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( j: arg0 )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "enqueueKeyEvents", methodSig: "(JLjava/awt/Component;)V", methodCache: &DefaultKeyboardFocusManager.enqueueKeyEvents_MethodID_4, args: &__args, locals: &__locals )
    }

    override open func enqueueKeyEvents( _ _arg0: Int64, _ _arg1: Component? ) {
        enqueueKeyEvents( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.DefaultKeyboardFocusManager.focusNextComponent(java.awt.Component)

    // Skipping method: false true false false false 

    /// public void java.awt.DefaultKeyboardFocusManager.focusPreviousComponent(java.awt.Component)

    // Skipping method: false true false false false 

    /// private java.awt.Window java.awt.DefaultKeyboardFocusManager.getOwningFrameDialog(java.awt.Window)

    /// private boolean java.awt.DefaultKeyboardFocusManager.hasMarker(java.awt.Component)

    /// public boolean java.awt.DefaultKeyboardFocusManager.postProcessKeyEvent(java.awt.event.KeyEvent)

    // Skipping method: false true false false false 

    /// private boolean java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(java.awt.event.KeyEvent)

    /// public void java.awt.DefaultKeyboardFocusManager.processKeyEvent(java.awt.Component,java.awt.event.KeyEvent)

    // Skipping method: false true false false false 

    /// private void java.awt.DefaultKeyboardFocusManager.pumpApprovedKeyEvents()

    /// private void java.awt.DefaultKeyboardFocusManager.purgeStampedEvents(long,long)

    /// private boolean java.awt.DefaultKeyboardFocusManager.repostIfFollowsKeyEvents(java.awt.event.WindowEvent)

    /// private boolean java.awt.DefaultKeyboardFocusManager.restoreFocus(java.awt.Component,boolean)

    /// private void java.awt.DefaultKeyboardFocusManager.restoreFocus(java.awt.event.FocusEvent,java.awt.Window)

    /// private boolean java.awt.DefaultKeyboardFocusManager.restoreFocus(java.awt.Window,java.awt.Component,boolean)

    /// private void java.awt.DefaultKeyboardFocusManager.restoreFocus(java.awt.event.WindowEvent)

    /// private boolean java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(java.awt.Component,java.awt.AWTEvent)

    /// public void java.awt.DefaultKeyboardFocusManager.upFocusCycle(java.awt.Component)

    // Skipping method: false true false false false 

}

