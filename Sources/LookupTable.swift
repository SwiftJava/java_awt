
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.image.LookupTable ///

open class LookupTable: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LookupTableJNIClass: jclass?

    /// int java.awt.image.LookupTable.numComponents

    /// int java.awt.image.LookupTable.offset

    /// int java.awt.image.LookupTable.numEntries

    /// protected java.awt.image.LookupTable(int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( offset: Int, numComponents: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: offset, locals: &__locals )
        __args[1] = JNIType.toJava( value: numComponents, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/LookupTable", classCache: &LookupTable.LookupTableJNIClass, methodSig: "(II)V", methodCache: &LookupTable.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _offset: Int, _ _numComponents: Int ) {
        self.init( offset: _offset, numComponents: _numComponents )
    }

    /// public int java.awt.image.LookupTable.getOffset()

    private static var getOffset_MethodID_2: jmethodID?

    open func getOffset() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getOffset", methodSig: "()I", methodCache: &LookupTable.getOffset_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public int java.awt.image.LookupTable.getNumComponents()

    private static var getNumComponents_MethodID_3: jmethodID?

    open func getNumComponents() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumComponents", methodSig: "()I", methodCache: &LookupTable.getNumComponents_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public abstract int[] java.awt.image.LookupTable.lookupPixel(int[],int[])

    private static var lookupPixel_MethodID_4: jmethodID?

    open func lookupPixel( src: [Int32]?, dest: [Int32]? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: src, locals: &__locals )
        __args[1] = JNIType.toJava( value: dest, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "lookupPixel", methodSig: "([I[I)[I", methodCache: &LookupTable.lookupPixel_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Int32](), from: __return )
    }

    open func lookupPixel( _ _src: [Int32]?, _ _dest: [Int32]? ) -> [Int32]! {
        return lookupPixel( src: _src, dest: _dest )
    }

}

