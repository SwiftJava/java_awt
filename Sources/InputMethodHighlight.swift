
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:09 GMT 2016 ///

/// class java.awt.im.InputMethodHighlight ///

open class InputMethodHighlight: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.im.InputMethodHighlight", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var InputMethodHighlightJNIClass: jclass?

    /// public static final int java.awt.im.InputMethodHighlight.RAW_TEXT

    private static var RAW_TEXT_FieldID: jfieldID?

    open static var RAW_TEXT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "RAW_TEXT", fieldType: "I", fieldCache: &RAW_TEXT_FieldID, className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlightJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.im.InputMethodHighlight.CONVERTED_TEXT

    private static var CONVERTED_TEXT_FieldID: jfieldID?

    open static var CONVERTED_TEXT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CONVERTED_TEXT", fieldType: "I", fieldCache: &CONVERTED_TEXT_FieldID, className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlightJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.UNSELECTED_RAW_TEXT_HIGHLIGHT

    private static var UNSELECTED_RAW_TEXT_HIGHLIGHT_FieldID: jfieldID?

    open static var UNSELECTED_RAW_TEXT_HIGHLIGHT: InputMethodHighlight! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UNSELECTED_RAW_TEXT_HIGHLIGHT", fieldType: "Ljava/awt/im/InputMethodHighlight;", fieldCache: &UNSELECTED_RAW_TEXT_HIGHLIGHT_FieldID, className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlightJNIClass )
            return __value != nil ? InputMethodHighlight( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.SELECTED_RAW_TEXT_HIGHLIGHT

    private static var SELECTED_RAW_TEXT_HIGHLIGHT_FieldID: jfieldID?

    open static var SELECTED_RAW_TEXT_HIGHLIGHT: InputMethodHighlight! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SELECTED_RAW_TEXT_HIGHLIGHT", fieldType: "Ljava/awt/im/InputMethodHighlight;", fieldCache: &SELECTED_RAW_TEXT_HIGHLIGHT_FieldID, className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlightJNIClass )
            return __value != nil ? InputMethodHighlight( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.UNSELECTED_CONVERTED_TEXT_HIGHLIGHT

    private static var UNSELECTED_CONVERTED_TEXT_HIGHLIGHT_FieldID: jfieldID?

    open static var UNSELECTED_CONVERTED_TEXT_HIGHLIGHT: InputMethodHighlight! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UNSELECTED_CONVERTED_TEXT_HIGHLIGHT", fieldType: "Ljava/awt/im/InputMethodHighlight;", fieldCache: &UNSELECTED_CONVERTED_TEXT_HIGHLIGHT_FieldID, className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlightJNIClass )
            return __value != nil ? InputMethodHighlight( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.im.InputMethodHighlight java.awt.im.InputMethodHighlight.SELECTED_CONVERTED_TEXT_HIGHLIGHT

    private static var SELECTED_CONVERTED_TEXT_HIGHLIGHT_FieldID: jfieldID?

    open static var SELECTED_CONVERTED_TEXT_HIGHLIGHT: InputMethodHighlight! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SELECTED_CONVERTED_TEXT_HIGHLIGHT", fieldType: "Ljava/awt/im/InputMethodHighlight;", fieldCache: &SELECTED_CONVERTED_TEXT_HIGHLIGHT_FieldID, className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlightJNIClass )
            return __value != nil ? InputMethodHighlight( javaObject: __value ) : nil
        }
    }

    /// private boolean java.awt.im.InputMethodHighlight.selected

    /// private int java.awt.im.InputMethodHighlight.state

    /// private int java.awt.im.InputMethodHighlight.variation

    /// private java.util.Map java.awt.im.InputMethodHighlight.style

    /// public java.awt.im.InputMethodHighlight(boolean,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Bool, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlight.InputMethodHighlightJNIClass, methodSig: "(ZI)V", methodCache: &InputMethodHighlight.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.im.InputMethodHighlight(boolean,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Bool, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlight.InputMethodHighlightJNIClass, methodSig: "(ZII)V", methodCache: &InputMethodHighlight.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool, _ _arg1: Int, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.im.InputMethodHighlight(boolean,int,int,java.util.Map)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Bool, arg1: Int, arg2: Int, arg3: java_util.Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/awt/im/InputMethodHighlight", classCache: &InputMethodHighlight.InputMethodHighlightJNIClass, methodSig: "(ZIILjava/util/Map;)V", methodCache: &InputMethodHighlight.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Bool, _ _arg1: Int, _ _arg2: Int, _ _arg3: java_util.Map? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public int java.awt.im.InputMethodHighlight.getState()

    private static var getState_MethodID_4: jmethodID?

    open func getState() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getState", methodSig: "()I", methodCache: &InputMethodHighlight.getState_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.util.Map java.awt.im.InputMethodHighlight.getStyle()

    private static var getStyle_MethodID_5: jmethodID?

    open func getStyle() -> java_util.Map! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStyle", methodSig: "()Ljava/util/Map;", methodCache: &InputMethodHighlight.getStyle_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.MapForward( javaObject: __return ) : nil
    }


    /// public boolean java.awt.im.InputMethodHighlight.isSelected()

    private static var isSelected_MethodID_6: jmethodID?

    open func isSelected() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isSelected", methodSig: "()Z", methodCache: &InputMethodHighlight.isSelected_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.awt.im.InputMethodHighlight.getVariation()

    private static var getVariation_MethodID_7: jmethodID?

    open func getVariation() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getVariation", methodSig: "()I", methodCache: &InputMethodHighlight.getVariation_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
