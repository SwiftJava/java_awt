
import java_swift
import java_util
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:30 GMT 2016 ///

/// interface java.awt.im.spi.InputMethod ///

public protocol InputMethod: JavaProtocol {

    /// public abstract boolean java.awt.im.spi.InputMethod.setLocale(java.util.Locale)

    func setLocale( arg0: java_util.JavaLocale? ) -> Bool
    func setLocale( _ _arg0: java_util.JavaLocale? ) -> Bool

    /// public abstract java.util.Locale java.awt.im.spi.InputMethod.getLocale()

    func getLocale() -> java_util.JavaLocale!

    /// public abstract void java.awt.im.spi.InputMethod.dispose()

    func dispose()

    /// public abstract void java.awt.im.spi.InputMethod.dispatchEvent(java.awt.AWTEvent)

    func dispatchEvent( arg0: AWTEvent? )
    func dispatchEvent( _ _arg0: AWTEvent? )

    /// public abstract void java.awt.im.spi.InputMethod.removeNotify()

    func removeNotify()

    /// public abstract void java.awt.im.spi.InputMethod.endComposition()

    func endComposition()

    /// public abstract void java.awt.im.spi.InputMethod.setCharacterSubsets(java.lang.Character$Subset[])

    func setCharacterSubsets( arg0: [Character_Subset]? )
    func setCharacterSubsets( _ _arg0: [Character_Subset]? )

    /// public abstract void java.awt.im.spi.InputMethod.setCompositionEnabled(boolean)

    func setCompositionEnabled( arg0: Bool )
    func setCompositionEnabled( _ _arg0: Bool )

    /// public abstract boolean java.awt.im.spi.InputMethod.isCompositionEnabled()

    func isCompositionEnabled() -> Bool

    /// public abstract void java.awt.im.spi.InputMethod.reconvert()

    func reconvert()

    /// public abstract void java.awt.im.spi.InputMethod.activate()

    func activate()

    /// public abstract void java.awt.im.spi.InputMethod.setInputMethodContext(java.awt.im.spi.InputMethodContext)

    func setInputMethodContext( arg0: InputMethodContext? )
    func setInputMethodContext( _ _arg0: InputMethodContext? )

    /// public abstract void java.awt.im.spi.InputMethod.notifyClientWindowChange(java.awt.Rectangle)

    func notifyClientWindowChange( arg0: Rectangle? )
    func notifyClientWindowChange( _ _arg0: Rectangle? )

    /// public abstract void java.awt.im.spi.InputMethod.deactivate(boolean)

    func deactivate( arg0: Bool )
    func deactivate( _ _arg0: Bool )

    /// public abstract void java.awt.im.spi.InputMethod.hideWindows()

    func hideWindows()

    /// public abstract java.lang.Object java.awt.im.spi.InputMethod.getControlObject()

    func getControlObject() -> java_lang.JavaObject!

}

open class InputMethodForward: JNIObjectForward, InputMethod {

    private static var InputMethodJNIClass: jclass?

    /// public abstract boolean java.awt.im.spi.InputMethod.setLocale(java.util.Locale)

    private static var setLocale_MethodID_17: jmethodID?

    open func setLocale( arg0: java_util.JavaLocale? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "setLocale", methodSig: "(Ljava/util/Locale;)Z", methodCache: &InputMethodForward.setLocale_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func setLocale( _ _arg0: java_util.JavaLocale? ) -> Bool {
        return setLocale( arg0: _arg0 )
    }

    /// public abstract java.util.Locale java.awt.im.spi.InputMethod.getLocale()

    private static var getLocale_MethodID_18: jmethodID?

    open func getLocale() -> java_util.JavaLocale! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocale", methodSig: "()Ljava/util/Locale;", methodCache: &InputMethodForward.getLocale_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.JavaLocale( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.im.spi.InputMethod.dispose()

    private static var dispose_MethodID_19: jmethodID?

    open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &InputMethodForward.dispose_MethodID_19, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.im.spi.InputMethod.dispatchEvent(java.awt.AWTEvent)

    private static var dispatchEvent_MethodID_20: jmethodID?

    open func dispatchEvent( arg0: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispatchEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &InputMethodForward.dispatchEvent_MethodID_20, args: &__args, locals: &__locals )
    }

    open func dispatchEvent( _ _arg0: AWTEvent? ) {
        dispatchEvent( arg0: _arg0 )
    }

    /// public abstract void java.awt.im.spi.InputMethod.removeNotify()

    private static var removeNotify_MethodID_21: jmethodID?

    open func removeNotify() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeNotify", methodSig: "()V", methodCache: &InputMethodForward.removeNotify_MethodID_21, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.im.spi.InputMethod.endComposition()

    private static var endComposition_MethodID_22: jmethodID?

    open func endComposition() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "endComposition", methodSig: "()V", methodCache: &InputMethodForward.endComposition_MethodID_22, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.im.spi.InputMethod.setCharacterSubsets(java.lang.Character$Subset[])

    private static var setCharacterSubsets_MethodID_23: jmethodID?

    open func setCharacterSubsets( arg0: [Character_Subset]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterSubsets", methodSig: "([Ljava/lang/Character$Subset;)V", methodCache: &InputMethodForward.setCharacterSubsets_MethodID_23, args: &__args, locals: &__locals )
    }

    open func setCharacterSubsets( _ _arg0: [Character_Subset]? ) {
        setCharacterSubsets( arg0: _arg0 )
    }

    /// public abstract void java.awt.im.spi.InputMethod.setCompositionEnabled(boolean)

    private static var setCompositionEnabled_MethodID_24: jmethodID?

    open func setCompositionEnabled( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCompositionEnabled", methodSig: "(Z)V", methodCache: &InputMethodForward.setCompositionEnabled_MethodID_24, args: &__args, locals: &__locals )
    }

    open func setCompositionEnabled( _ _arg0: Bool ) {
        setCompositionEnabled( arg0: _arg0 )
    }

    /// public abstract boolean java.awt.im.spi.InputMethod.isCompositionEnabled()

    private static var isCompositionEnabled_MethodID_25: jmethodID?

    open func isCompositionEnabled() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isCompositionEnabled", methodSig: "()Z", methodCache: &InputMethodForward.isCompositionEnabled_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.im.spi.InputMethod.reconvert()

    private static var reconvert_MethodID_26: jmethodID?

    open func reconvert() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reconvert", methodSig: "()V", methodCache: &InputMethodForward.reconvert_MethodID_26, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.im.spi.InputMethod.activate()

    private static var activate_MethodID_27: jmethodID?

    open func activate() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "activate", methodSig: "()V", methodCache: &InputMethodForward.activate_MethodID_27, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.im.spi.InputMethod.setInputMethodContext(java.awt.im.spi.InputMethodContext)

    private static var setInputMethodContext_MethodID_28: jmethodID?

    open func setInputMethodContext( arg0: InputMethodContext? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInputMethodContext", methodSig: "(Ljava/awt/im/spi/InputMethodContext;)V", methodCache: &InputMethodForward.setInputMethodContext_MethodID_28, args: &__args, locals: &__locals )
    }

    open func setInputMethodContext( _ _arg0: InputMethodContext? ) {
        setInputMethodContext( arg0: _arg0 )
    }

    /// public abstract void java.awt.im.spi.InputMethod.notifyClientWindowChange(java.awt.Rectangle)

    private static var notifyClientWindowChange_MethodID_29: jmethodID?

    open func notifyClientWindowChange( arg0: Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "notifyClientWindowChange", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &InputMethodForward.notifyClientWindowChange_MethodID_29, args: &__args, locals: &__locals )
    }

    open func notifyClientWindowChange( _ _arg0: Rectangle? ) {
        notifyClientWindowChange( arg0: _arg0 )
    }

    /// public abstract void java.awt.im.spi.InputMethod.deactivate(boolean)

    private static var deactivate_MethodID_30: jmethodID?

    open func deactivate( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "deactivate", methodSig: "(Z)V", methodCache: &InputMethodForward.deactivate_MethodID_30, args: &__args, locals: &__locals )
    }

    open func deactivate( _ _arg0: Bool ) {
        deactivate( arg0: _arg0 )
    }

    /// public abstract void java.awt.im.spi.InputMethod.hideWindows()

    private static var hideWindows_MethodID_31: jmethodID?

    open func hideWindows() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "hideWindows", methodSig: "()V", methodCache: &InputMethodForward.hideWindows_MethodID_31, args: &__args, locals: &__locals )
    }


    /// public abstract java.lang.Object java.awt.im.spi.InputMethod.getControlObject()

    private static var getControlObject_MethodID_32: jmethodID?

    open func getControlObject() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getControlObject", methodSig: "()Ljava/lang/Object;", methodCache: &InputMethodForward.getControlObject_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


}


