
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.Transparency ///

public protocol Transparency: JavaProtocol {

    /// public static final int java.awt.Transparency.OPAQUE

    static var OPAQUE: Int { get }

    /// public static final int java.awt.Transparency.BITMASK

    static var BITMASK: Int { get }

    /// public static final int java.awt.Transparency.TRANSLUCENT

    static var TRANSLUCENT: Int { get }

    /// public abstract int java.awt.Transparency.getTransparency()

    func getTransparency() -> Int

}


open class TransparencyForward: JNIObjectForward, Transparency {

    private static var TransparencyJNIClass: jclass?

    /// public static final int java.awt.Transparency.OPAQUE

    private static var OPAQUE_FieldID: jfieldID?

    open static var OPAQUE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "OPAQUE", fieldType: "I", fieldCache: &OPAQUE_FieldID, className: "java/awt/Transparency", classCache: &TransparencyJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.BITMASK

    private static var BITMASK_FieldID: jfieldID?

    open static var BITMASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BITMASK", fieldType: "I", fieldCache: &BITMASK_FieldID, className: "java/awt/Transparency", classCache: &TransparencyJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.TRANSLUCENT

    private static var TRANSLUCENT_FieldID: jfieldID?

    open static var TRANSLUCENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TRANSLUCENT", fieldType: "I", fieldCache: &TRANSLUCENT_FieldID, className: "java/awt/Transparency", classCache: &TransparencyJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public abstract int java.awt.Transparency.getTransparency()

    private static var getTransparency_MethodID_2: jmethodID?

    open func getTransparency() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTransparency", methodSig: "()I", methodCache: &TransparencyForward.getTransparency_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


}


