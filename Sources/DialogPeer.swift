
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.peer.DialogPeer ///

public protocol DialogPeer: WindowPeer {

    /// public abstract void java.awt.peer.DialogPeer.setResizable(boolean)

    func setResizable( resizeable: Bool )

    /// public abstract void java.awt.peer.DialogPeer.blockWindows(java.util.List)

    func blockWindows( windows: java_util.List? )

    /// public abstract void java.awt.peer.DialogPeer.setTitle(java.lang.String)

    func setTitle( title: String? )

}


open class DialogPeerForward: WindowPeerForward, DialogPeer {

    private static var DialogPeerJNIClass: jclass?

    /// public abstract void java.awt.peer.DialogPeer.setResizable(boolean)

    private static var setResizable_MethodID_4: jmethodID?

    open func setResizable( resizeable: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: resizeable, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setResizable", methodSig: "(Z)V", methodCache: &DialogPeerForward.setResizable_MethodID_4, args: &__args, locals: &__locals )
    }

    open func setResizable( _ _resizeable: Bool ) {
        setResizable( resizeable: _resizeable )
    }

    /// public abstract void java.awt.peer.DialogPeer.blockWindows(java.util.List)

    private static var blockWindows_MethodID_5: jmethodID?

    open func blockWindows( windows: java_util.List? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: windows, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "blockWindows", methodSig: "(Ljava/util/List;)V", methodCache: &DialogPeerForward.blockWindows_MethodID_5, args: &__args, locals: &__locals )
    }

    open func blockWindows( _ _windows: java_util.List? ) {
        blockWindows( windows: _windows )
    }

    /// public abstract void java.awt.peer.DialogPeer.setTitle(java.lang.String)

    private static var setTitle_MethodID_6: jmethodID?

    open func setTitle( title: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: title, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTitle", methodSig: "(Ljava/lang/String;)V", methodCache: &DialogPeerForward.setTitle_MethodID_6, args: &__args, locals: &__locals )
    }

    open func setTitle( _ _title: String? ) {
        setTitle( title: _title )
    }

    /// public abstract void java.awt.peer.WindowPeer.toBack()

    private static var toBack_MethodID_7: jmethodID?

    override open func toBack() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "toBack", methodSig: "()V", methodCache: &DialogPeerForward.toBack_MethodID_7, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.WindowPeer.setOpacity(float)

    private static var setOpacity_MethodID_8: jmethodID?

    override open func setOpacity( opacity: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: opacity, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setOpacity", methodSig: "(F)V", methodCache: &DialogPeerForward.setOpacity_MethodID_8, args: &__args, locals: &__locals )
    }

    override open func setOpacity( _ _opacity: Float ) {
        setOpacity( opacity: _opacity )
    }

    /// public abstract void java.awt.peer.WindowPeer.setModalBlocked(java.awt.Dialog,boolean)

    private static var setModalBlocked_MethodID_9: jmethodID?

    override open func setModalBlocked( blocker: Dialog?, blocked: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: blocker != nil ? blocker! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: blocked, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setModalBlocked", methodSig: "(Ljava/awt/Dialog;Z)V", methodCache: &DialogPeerForward.setModalBlocked_MethodID_9, args: &__args, locals: &__locals )
    }

    override open func setModalBlocked( _ _blocker: Dialog?, _ _blocked: Bool ) {
        setModalBlocked( blocker: _blocker, blocked: _blocked )
    }

    /// public abstract void java.awt.peer.WindowPeer.updateWindow()

    private static var updateWindow_MethodID_10: jmethodID?

    override open func updateWindow() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateWindow", methodSig: "()V", methodCache: &DialogPeerForward.updateWindow_MethodID_10, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.WindowPeer.updateIconImages()

    private static var updateIconImages_MethodID_11: jmethodID?

    override open func updateIconImages() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateIconImages", methodSig: "()V", methodCache: &DialogPeerForward.updateIconImages_MethodID_11, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.WindowPeer.updateMinimumSize()

    private static var updateMinimumSize_MethodID_12: jmethodID?

    override open func updateMinimumSize() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateMinimumSize", methodSig: "()V", methodCache: &DialogPeerForward.updateMinimumSize_MethodID_12, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.WindowPeer.updateFocusableWindowState()

    private static var updateFocusableWindowState_MethodID_13: jmethodID?

    override open func updateFocusableWindowState() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateFocusableWindowState", methodSig: "()V", methodCache: &DialogPeerForward.updateFocusableWindowState_MethodID_13, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.WindowPeer.updateAlwaysOnTopState()

    private static var updateAlwaysOnTopState_MethodID_14: jmethodID?

    override open func updateAlwaysOnTopState() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateAlwaysOnTopState", methodSig: "()V", methodCache: &DialogPeerForward.updateAlwaysOnTopState_MethodID_14, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.WindowPeer.repositionSecurityWarning()

    private static var repositionSecurityWarning_MethodID_15: jmethodID?

    override open func repositionSecurityWarning() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "repositionSecurityWarning", methodSig: "()V", methodCache: &DialogPeerForward.repositionSecurityWarning_MethodID_15, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.WindowPeer.setOpaque(boolean)

    private static var setOpaque_MethodID_16: jmethodID?

    override open func setOpaque( isOpaque: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: isOpaque, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setOpaque", methodSig: "(Z)V", methodCache: &DialogPeerForward.setOpaque_MethodID_16, args: &__args, locals: &__locals )
    }

    override open func setOpaque( _ _isOpaque: Bool ) {
        setOpaque( isOpaque: _isOpaque )
    }

    /// public abstract void java.awt.peer.WindowPeer.toFront()

    private static var toFront_MethodID_17: jmethodID?

    override open func toFront() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "toFront", methodSig: "()V", methodCache: &DialogPeerForward.toFront_MethodID_17, args: &__args, locals: &__locals )
    }


    /// public abstract java.awt.Insets java.awt.peer.ContainerPeer.getInsets()

    private static var getInsets_MethodID_18: jmethodID?

    override open func getInsets() -> Insets! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInsets", methodSig: "()Ljava/awt/Insets;", methodCache: &DialogPeerForward.getInsets_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Insets( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ContainerPeer.beginValidate()

    private static var beginValidate_MethodID_19: jmethodID?

    override open func beginValidate() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "beginValidate", methodSig: "()V", methodCache: &DialogPeerForward.beginValidate_MethodID_19, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ContainerPeer.endValidate()

    private static var endValidate_MethodID_20: jmethodID?

    override open func endValidate() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "endValidate", methodSig: "()V", methodCache: &DialogPeerForward.endValidate_MethodID_20, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ContainerPeer.beginLayout()

    private static var beginLayout_MethodID_21: jmethodID?

    override open func beginLayout() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "beginLayout", methodSig: "()V", methodCache: &DialogPeerForward.beginLayout_MethodID_21, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ContainerPeer.endLayout()

    private static var endLayout_MethodID_22: jmethodID?

    override open func endLayout() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "endLayout", methodSig: "()V", methodCache: &DialogPeerForward.endLayout_MethodID_22, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.print(java.awt.Graphics)

    private static var print_MethodID_23: jmethodID?

    override open func print( g: Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "print", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &DialogPeerForward.print_MethodID_23, args: &__args, locals: &__locals )
    }

    override open func print( _ _g: Graphics? ) {
        print( g: _g )
    }

    /// public abstract void java.awt.peer.ComponentPeer.flip(int,int,int,int,java.awt.BufferCapabilities$FlipContents)

    private static var flip_MethodID_24: jmethodID?

    override open func flip( x1: Int, y1: Int, x2: Int, y2: Int, flipAction: BufferCapabilities_FlipContents? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: x2, locals: &__locals )
        __args[3] = JNIType.toJava( value: y2, locals: &__locals )
        __args[4] = JNIType.toJava( value: flipAction != nil ? flipAction! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flip", methodSig: "(IIIILjava/awt/BufferCapabilities$FlipContents;)V", methodCache: &DialogPeerForward.flip_MethodID_24, args: &__args, locals: &__locals )
    }

    override open func flip( _ _x1: Int, _ _y1: Int, _ _x2: Int, _ _y2: Int, _ _flipAction: BufferCapabilities_FlipContents? ) {
        flip( x1: _x1, y1: _y1, x2: _x2, y2: _y2, flipAction: _flipAction )
    }

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getPreferredSize()

    private static var getPreferredSize_MethodID_25: jmethodID?

    override open func getPreferredSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &DialogPeerForward.getPreferredSize_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.setBackground(java.awt.Color)

    private static var setBackground_MethodID_26: jmethodID?

    override open func setBackground( c: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &DialogPeerForward.setBackground_MethodID_26, args: &__args, locals: &__locals )
    }

    override open func setBackground( _ _c: Color? ) {
        setBackground( c: _c )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setForeground(java.awt.Color)

    private static var setForeground_MethodID_27: jmethodID?

    override open func setForeground( c: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setForeground", methodSig: "(Ljava/awt/Color;)V", methodCache: &DialogPeerForward.setForeground_MethodID_27, args: &__args, locals: &__locals )
    }

    override open func setForeground( _ _c: Color? ) {
        setForeground( c: _c )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setFont(java.awt.Font)

    private static var setFont_MethodID_28: jmethodID?

    override open func setFont( f: Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: f != nil ? f! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &DialogPeerForward.setFont_MethodID_28, args: &__args, locals: &__locals )
    }

    override open func setFont( _ _f: Font? ) {
        setFont( f: _f )
    }

    /// public abstract void java.awt.peer.ComponentPeer.paint(java.awt.Graphics)

    private static var paint_MethodID_29: jmethodID?

    override open func paint( g: Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &DialogPeerForward.paint_MethodID_29, args: &__args, locals: &__locals )
    }

    override open func paint( _ _g: Graphics? ) {
        paint( g: _g )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.isObscured()

    private static var isObscured_MethodID_30: jmethodID?

    override open func isObscured() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isObscured", methodSig: "()Z", methodCache: &DialogPeerForward.isObscured_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.canDetermineObscurity()

    private static var canDetermineObscurity_MethodID_31: jmethodID?

    override open func canDetermineObscurity() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "canDetermineObscurity", methodSig: "()Z", methodCache: &DialogPeerForward.canDetermineObscurity_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.coalescePaintEvent(java.awt.event.PaintEvent)

    private static var coalescePaintEvent_MethodID_32: jmethodID?

    override open func coalescePaintEvent( e: PaintEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "coalescePaintEvent", methodSig: "(Ljava/awt/event/PaintEvent;)V", methodCache: &DialogPeerForward.coalescePaintEvent_MethodID_32, args: &__args, locals: &__locals )
    }

    override open func coalescePaintEvent( _ _e: PaintEvent? ) {
        coalescePaintEvent( e: _e )
    }

    /// public abstract void java.awt.peer.ComponentPeer.createBuffers(int,java.awt.BufferCapabilities) throws java.awt.AWTException

    private static var createBuffers_MethodID_33: jmethodID?

    override open func createBuffers( numBuffers: Int, caps: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: numBuffers, locals: &__locals )
        __args[1] = JNIType.toJava( value: caps != nil ? caps! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createBuffers", methodSig: "(ILjava/awt/BufferCapabilities;)V", methodCache: &DialogPeerForward.createBuffers_MethodID_33, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw AWTException( javaObject: throwable )
        }
    }

    override open func createBuffers( _ _numBuffers: Int, _ _caps: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        try createBuffers( numBuffers: _numBuffers, caps: _caps )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.requestFocus(java.awt.Component,boolean,boolean,long,sun.awt.CausedFocusEvent$Cause)

    private static var requestFocus_MethodID_34: jmethodID?

    override open func requestFocus( lightweightChild: Component?, temporary: Bool, focusedWindowChangeAllowed: Bool, time: Int64, cause: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: lightweightChild != nil ? lightweightChild! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: temporary, locals: &__locals )
        __args[2] = JNIType.toJava( value: focusedWindowChangeAllowed, locals: &__locals )
        __args[3] = JNIType.toJava( value: time, locals: &__locals )
        __args[4] = JNIType.toJava( value: cause != nil ? cause! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestFocus", methodSig: "(Ljava/awt/Component;ZZJLsun/awt/CausedFocusEvent$Cause;)Z", methodCache: &DialogPeerForward.requestFocus_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func requestFocus( _ _lightweightChild: Component?, _ _temporary: Bool, _ _focusedWindowChangeAllowed: Bool, _ _time: Int64, _ _cause: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool {
        return requestFocus( lightweightChild: _lightweightChild, temporary: _temporary, focusedWindowChangeAllowed: _focusedWindowChangeAllowed, time: _time, cause: _cause )
    }

    /// public abstract java.awt.FontMetrics java.awt.peer.ComponentPeer.getFontMetrics(java.awt.Font)

    private static var getFontMetrics_MethodID_35: jmethodID?

    override open func getFontMetrics( font: Font? ) -> FontMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: font != nil ? font! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", methodCache: &DialogPeerForward.getFontMetrics_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FontMetrics( javaObject: __return ) : nil
    }

    override open func getFontMetrics( _ _font: Font? ) -> FontMetrics! {
        return getFontMetrics( font: _font )
    }

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getMinimumSize()

    private static var getMinimumSize_MethodID_36: jmethodID?

    override open func getMinimumSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMinimumSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &DialogPeerForward.getMinimumSize_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Graphics java.awt.peer.ComponentPeer.getGraphics()

    private static var getGraphics_MethodID_37: jmethodID?

    override open func getGraphics() -> Graphics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphics", methodSig: "()Ljava/awt/Graphics;", methodCache: &DialogPeerForward.getGraphics_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Graphics( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.setVisible(boolean)

    private static var setVisible_MethodID_38: jmethodID?

    override open func setVisible( v: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: v, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &DialogPeerForward.setVisible_MethodID_38, args: &__args, locals: &__locals )
    }

    override open func setVisible( _ _v: Bool ) {
        setVisible( v: _v )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setEnabled(boolean)

    private static var setEnabled_MethodID_39: jmethodID?

    override open func setEnabled( e: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &DialogPeerForward.setEnabled_MethodID_39, args: &__args, locals: &__locals )
    }

    override open func setEnabled( _ _e: Bool ) {
        setEnabled( e: _e )
    }

    /// public abstract void java.awt.peer.ComponentPeer.dispose()

    private static var dispose_MethodID_40: jmethodID?

    override open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &DialogPeerForward.dispose_MethodID_40, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.setBounds(int,int,int,int,int)

    private static var setBounds_MethodID_41: jmethodID?

    override open func setBounds( x: Int, y: Int, width: Int, height: Int, op: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: width, locals: &__locals )
        __args[3] = JNIType.toJava( value: height, locals: &__locals )
        __args[4] = JNIType.toJava( value: op, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBounds", methodSig: "(IIIII)V", methodCache: &DialogPeerForward.setBounds_MethodID_41, args: &__args, locals: &__locals )
    }

    override open func setBounds( _ _x: Int, _ _y: Int, _ _width: Int, _ _height: Int, _ _op: Int ) {
        setBounds( x: _x, y: _y, width: _width, height: _height, op: _op )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.updateGraphicsData(java.awt.GraphicsConfiguration)

    private static var updateGraphicsData_MethodID_42: jmethodID?

    override open func updateGraphicsData( gc: GraphicsConfiguration? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: gc != nil ? gc! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "updateGraphicsData", methodSig: "(Ljava/awt/GraphicsConfiguration;)Z", methodCache: &DialogPeerForward.updateGraphicsData_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func updateGraphicsData( _ _gc: GraphicsConfiguration? ) -> Bool {
        return updateGraphicsData( gc: _gc )
    }

    /// public abstract void java.awt.peer.ComponentPeer.layout()

    private static var layout_MethodID_43: jmethodID?

    override open func layout() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layout", methodSig: "()V", methodCache: &DialogPeerForward.layout_MethodID_43, args: &__args, locals: &__locals )
    }


    /// public abstract java.awt.GraphicsConfiguration java.awt.peer.ComponentPeer.getGraphicsConfiguration()

    private static var getGraphicsConfiguration_MethodID_44: jmethodID?

    override open func getGraphicsConfiguration() -> GraphicsConfiguration! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphicsConfiguration", methodSig: "()Ljava/awt/GraphicsConfiguration;", methodCache: &DialogPeerForward.getGraphicsConfiguration_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GraphicsConfiguration( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.updateCursorImmediately()

    private static var updateCursorImmediately_MethodID_45: jmethodID?

    override open func updateCursorImmediately() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateCursorImmediately", methodSig: "()V", methodCache: &DialogPeerForward.updateCursorImmediately_MethodID_45, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.isFocusable()

    private static var isFocusable_MethodID_46: jmethodID?

    override open func isFocusable() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusable", methodSig: "()Z", methodCache: &DialogPeerForward.isFocusable_MethodID_46, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.isReparentSupported()

    private static var isReparentSupported_MethodID_47: jmethodID?

    override open func isReparentSupported() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isReparentSupported", methodSig: "()Z", methodCache: &DialogPeerForward.isReparentSupported_MethodID_47, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.reparent(java.awt.peer.ContainerPeer)

    private static var reparent_MethodID_48: jmethodID?

    override open func reparent( newContainer: ContainerPeer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: newContainer, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reparent", methodSig: "(Ljava/awt/peer/ContainerPeer;)V", methodCache: &DialogPeerForward.reparent_MethodID_48, args: &__args, locals: &__locals )
    }

    override open func reparent( _ _newContainer: ContainerPeer? ) {
        reparent( newContainer: _newContainer )
    }

    /// public abstract void java.awt.peer.ComponentPeer.handleEvent(java.awt.AWTEvent)

    private static var handleEvent_MethodID_49: jmethodID?

    override open func handleEvent( e: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "handleEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &DialogPeerForward.handleEvent_MethodID_49, args: &__args, locals: &__locals )
    }

    override open func handleEvent( _ _e: AWTEvent? ) {
        handleEvent( e: _e )
    }

    /// public abstract java.awt.image.ColorModel java.awt.peer.ComponentPeer.getColorModel()

    private static var getColorModel_MethodID_50: jmethodID?

    override open func getColorModel() -> ColorModel! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColorModel", methodSig: "()Ljava/awt/image/ColorModel;", methodCache: &DialogPeerForward.getColorModel_MethodID_50, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ColorModel( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Point java.awt.peer.ComponentPeer.getLocationOnScreen()

    private static var getLocationOnScreen_MethodID_51: jmethodID?

    override open func getLocationOnScreen() -> Point! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocationOnScreen", methodSig: "()Ljava/awt/Point;", methodCache: &DialogPeerForward.getLocationOnScreen_MethodID_51, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(int,int)

    private static var createImage_MethodID_52: jmethodID?

    override open func createImage( width: Int, height: Int ) -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: width, locals: &__locals )
        __args[1] = JNIType.toJava( value: height, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createImage", methodSig: "(II)Ljava/awt/Image;", methodCache: &DialogPeerForward.createImage_MethodID_52, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    override open func createImage( _ _width: Int, _ _height: Int ) -> Image! {
        return createImage( width: _width, height: _height )
    }

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(java.awt.image.ImageProducer)

    private static var createImage_MethodID_53: jmethodID?

    override open func createImage( producer: ImageProducer? ) -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: producer, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createImage", methodSig: "(Ljava/awt/image/ImageProducer;)Ljava/awt/Image;", methodCache: &DialogPeerForward.createImage_MethodID_53, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    override open func createImage( _ _producer: ImageProducer? ) -> Image! {
        return createImage( producer: _producer )
    }

    /// public abstract java.awt.image.VolatileImage java.awt.peer.ComponentPeer.createVolatileImage(int,int)

    private static var createVolatileImage_MethodID_54: jmethodID?

    override open func createVolatileImage( width: Int, height: Int ) -> VolatileImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: width, locals: &__locals )
        __args[1] = JNIType.toJava( value: height, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createVolatileImage", methodSig: "(II)Ljava/awt/image/VolatileImage;", methodCache: &DialogPeerForward.createVolatileImage_MethodID_54, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? VolatileImage( javaObject: __return ) : nil
    }

    override open func createVolatileImage( _ _width: Int, _ _height: Int ) -> VolatileImage! {
        return createVolatileImage( width: _width, height: _height )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    private static var prepareImage_MethodID_55: jmethodID?

    override open func prepareImage( img: Image?, w: Int, h: Int, o: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: img != nil ? img! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: w, locals: &__locals )
        __args[2] = JNIType.toJava( value: h, locals: &__locals )
        __args[3] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "prepareImage", methodSig: "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z", methodCache: &DialogPeerForward.prepareImage_MethodID_55, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func prepareImage( _ _img: Image?, _ _w: Int, _ _h: Int, _ _o: ImageObserver? ) -> Bool {
        return prepareImage( img: _img, w: _w, h: _h, o: _o )
    }

    /// public abstract int java.awt.peer.ComponentPeer.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    private static var checkImage_MethodID_56: jmethodID?

    override open func checkImage( img: Image?, w: Int, h: Int, o: ImageObserver? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: img != nil ? img! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: w, locals: &__locals )
        __args[2] = JNIType.toJava( value: h, locals: &__locals )
        __args[3] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "checkImage", methodSig: "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)I", methodCache: &DialogPeerForward.checkImage_MethodID_56, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    override open func checkImage( _ _img: Image?, _ _w: Int, _ _h: Int, _ _o: ImageObserver? ) -> Int {
        return checkImage( img: _img, w: _w, h: _h, o: _o )
    }

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.getBackBuffer()

    private static var getBackBuffer_MethodID_57: jmethodID?

    override open func getBackBuffer() -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBackBuffer", methodSig: "()Ljava/awt/Image;", methodCache: &DialogPeerForward.getBackBuffer_MethodID_57, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.handlesWheelScrolling()

    private static var handlesWheelScrolling_MethodID_58: jmethodID?

    override open func handlesWheelScrolling() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "handlesWheelScrolling", methodSig: "()Z", methodCache: &DialogPeerForward.handlesWheelScrolling_MethodID_58, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.destroyBuffers()

    private static var destroyBuffers_MethodID_59: jmethodID?

    override open func destroyBuffers() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "destroyBuffers", methodSig: "()V", methodCache: &DialogPeerForward.destroyBuffers_MethodID_59, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.applyShape(sun.java2d.pipe.Region)

    private static var applyShape_MethodID_60: jmethodID?

    override open func applyShape( shape: /* sun.java2d.pipe.Region */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: shape != nil ? shape! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applyShape", methodSig: "(Lsun/java2d/pipe/Region;)V", methodCache: &DialogPeerForward.applyShape_MethodID_60, args: &__args, locals: &__locals )
    }

    override open func applyShape( _ _shape: /* sun.java2d.pipe.Region */ UnclassedObject? ) {
        applyShape( shape: _shape )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setZOrder(java.awt.peer.ComponentPeer)

    private static var setZOrder_MethodID_61: jmethodID?

    override open func setZOrder( above: ComponentPeer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: above, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setZOrder", methodSig: "(Ljava/awt/peer/ComponentPeer;)V", methodCache: &DialogPeerForward.setZOrder_MethodID_61, args: &__args, locals: &__locals )
    }

    override open func setZOrder( _ _above: ComponentPeer? ) {
        setZOrder( above: _above )
    }

}


