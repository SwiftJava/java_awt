
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.MenuItem ///

open class MenuItem: MenuComponent {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MenuItemJNIClass: jclass?

    /// boolean java.awt.MenuItem.enabled

    /// java.lang.String java.awt.MenuItem.label

    /// java.lang.String java.awt.MenuItem.actionCommand

    /// long java.awt.MenuItem.eventMask

    /// transient java.awt.event.ActionListener java.awt.MenuItem.actionListener

    /// private java.awt.MenuShortcut java.awt.MenuItem.shortcut

    /// private static final java.lang.String java.awt.MenuItem.base

    /// private static int java.awt.MenuItem.nameCounter

    /// private static final long java.awt.MenuItem.serialVersionUID

    /// private int java.awt.MenuItem.menuItemSerializedDataVersion

    /// transient java.awt.peer.MenuComponentPeer java.awt.MenuComponent.peer

    /// transient java.awt.MenuContainer java.awt.MenuComponent.parent

    /// transient sun.awt.AppContext java.awt.MenuComponent.appContext

    /// java.awt.Font java.awt.MenuComponent.font

    /// private java.lang.String java.awt.MenuComponent.name

    /// private boolean java.awt.MenuComponent.nameExplicitlySet

    /// boolean java.awt.MenuComponent.newEventsOnly

    /// private transient volatile java.security.AccessControlContext java.awt.MenuComponent.acc

    /// static final java.lang.String java.awt.MenuComponent.actionListenerK

    /// static final java.lang.String java.awt.MenuComponent.itemListenerK

    /// private static final long java.awt.MenuComponent.serialVersionUID

    /// javax.accessibility.AccessibleContext java.awt.MenuComponent.accessibleContext

    /// public java.awt.MenuItem(java.lang.String,java.awt.MenuShortcut) throws java.awt.HeadlessException

    private static var new_MethodID_1: jmethodID?

    public convenience init( label: String?, s: MenuShortcut? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: label, locals: &__locals )
        __args[1] = JNIType.toJava( value: s != nil ? s! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/MenuItem", classCache: &MenuItem.MenuItemJNIClass, methodSig: "(Ljava/lang/String;Ljava/awt/MenuShortcut;)V", methodCache: &MenuItem.new_MethodID_1, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _label: String?, _ _s: MenuShortcut? ) throws {
        try self.init( label: _label, s: _s )
    }

    /// public java.awt.MenuItem(java.lang.String) throws java.awt.HeadlessException

    private static var new_MethodID_2: jmethodID?

    public convenience init( label: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: label, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/MenuItem", classCache: &MenuItem.MenuItemJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &MenuItem.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _label: String? ) throws {
        try self.init( label: _label )
    }

    /// public java.awt.MenuItem() throws java.awt.HeadlessException

    private static var new_MethodID_3: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/MenuItem", classCache: &MenuItem.MenuItemJNIClass, methodSig: "()V", methodCache: &MenuItem.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static boolean java.awt.MenuItem.access$100(java.awt.MenuItem)

    /// static java.awt.MenuShortcut java.awt.MenuItem.access$000(java.awt.MenuItem)

    /// private void java.awt.MenuItem.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException,java.awt.HeadlessException

    /// private void java.awt.MenuItem.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public java.lang.String java.awt.MenuItem.paramString()

    private static var paramString_MethodID_4: jmethodID?

    override open func paramString() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &MenuItem.paramString_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// private static native void java.awt.MenuItem.initIDs()

    /// public void java.awt.MenuItem.enable(boolean)

    private static var enable_MethodID_5: jmethodID?

    open func enable( b: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "enable", methodSig: "(Z)V", methodCache: &MenuItem.enable_MethodID_5, args: &__args, locals: &__locals )
    }

    open func enable( _ _b: Bool ) {
        enable( b: _b )
    }

    /// public synchronized void java.awt.MenuItem.enable()

    private static var enable_MethodID_6: jmethodID?

    open func enable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "enable", methodSig: "()V", methodCache: &MenuItem.enable_MethodID_6, args: &__args, locals: &__locals )
    }


    /// public synchronized void java.awt.MenuItem.disable()

    private static var disable_MethodID_7: jmethodID?

    open func disable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "disable", methodSig: "()V", methodCache: &MenuItem.disable_MethodID_7, args: &__args, locals: &__locals )
    }


    /// public java.lang.String java.awt.MenuItem.getActionCommand()

    private static var getActionCommand_MethodID_8: jmethodID?

    open func getActionCommand() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActionCommand", methodSig: "()Ljava/lang/String;", methodCache: &MenuItem.getActionCommand_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// public synchronized void java.awt.MenuItem.setLabel(java.lang.String)

    private static var setLabel_MethodID_9: jmethodID?

    open func setLabel( label: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: label, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLabel", methodSig: "(Ljava/lang/String;)V", methodCache: &MenuItem.setLabel_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setLabel( _ _label: String? ) {
        setLabel( label: _label )
    }

    /// public void java.awt.MenuItem.setActionCommand(java.lang.String)

    private static var setActionCommand_MethodID_10: jmethodID?

    open func setActionCommand( command: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: command, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setActionCommand", methodSig: "(Ljava/lang/String;)V", methodCache: &MenuItem.setActionCommand_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setActionCommand( _ _command: String? ) {
        setActionCommand( command: _command )
    }

    /// public synchronized void java.awt.MenuItem.addActionListener(java.awt.event.ActionListener)

    private static var addActionListener_MethodID_11: jmethodID?

    open func addActionListener( l: ActionListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addActionListener", methodSig: "(Ljava/awt/event/ActionListener;)V", methodCache: &MenuItem.addActionListener_MethodID_11, args: &__args, locals: &__locals )
    }

    open func addActionListener( _ _l: ActionListener? ) {
        addActionListener( l: _l )
    }

    /// public synchronized void java.awt.MenuItem.removeActionListener(java.awt.event.ActionListener)

    private static var removeActionListener_MethodID_12: jmethodID?

    open func removeActionListener( l: ActionListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeActionListener", methodSig: "(Ljava/awt/event/ActionListener;)V", methodCache: &MenuItem.removeActionListener_MethodID_12, args: &__args, locals: &__locals )
    }

    open func removeActionListener( _ _l: ActionListener? ) {
        removeActionListener( l: _l )
    }

    /// public synchronized java.awt.event.ActionListener[] java.awt.MenuItem.getActionListeners()

    private static var getActionListeners_MethodID_13: jmethodID?

    open func getActionListeners() -> [ActionListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActionListeners", methodSig: "()[Ljava/awt/event/ActionListener;", methodCache: &MenuItem.getActionListeners_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [ActionListenerForward](), from: __return )
    }


    /// protected void java.awt.MenuItem.processActionEvent(java.awt.event.ActionEvent)

    private static var processActionEvent_MethodID_14: jmethodID?

    open func processActionEvent( e: ActionEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processActionEvent", methodSig: "(Ljava/awt/event/ActionEvent;)V", methodCache: &MenuItem.processActionEvent_MethodID_14, args: &__args, locals: &__locals )
    }

    open func processActionEvent( _ _e: ActionEvent? ) {
        processActionEvent( e: _e )
    }

    /// public boolean java.awt.MenuItem.isEnabled()

    private static var isEnabled_MethodID_15: jmethodID?

    open func isEnabled() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEnabled", methodSig: "()Z", methodCache: &MenuItem.isEnabled_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public javax.accessibility.AccessibleContext java.awt.MenuItem.getAccessibleContext()

    /// boolean java.awt.MenuItem.handleShortcut(java.awt.event.KeyEvent)

    /// java.awt.MenuItem java.awt.MenuItem.getShortcutMenuItem(java.awt.MenuShortcut)

    /// public void java.awt.MenuItem.deleteShortcut()

    private static var deleteShortcut_MethodID_16: jmethodID?

    open func deleteShortcut() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "deleteShortcut", methodSig: "()V", methodCache: &MenuItem.deleteShortcut_MethodID_16, args: &__args, locals: &__locals )
    }


    /// void java.awt.MenuItem.deleteShortcut(java.awt.MenuShortcut)

    /// public java.awt.MenuShortcut java.awt.MenuItem.getShortcut()

    private static var getShortcut_MethodID_17: jmethodID?

    open func getShortcut() -> MenuShortcut! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getShortcut", methodSig: "()Ljava/awt/MenuShortcut;", methodCache: &MenuItem.getShortcut_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MenuShortcut( javaObject: __return ) : nil
    }


    /// public void java.awt.MenuItem.setShortcut(java.awt.MenuShortcut)

    private static var setShortcut_MethodID_18: jmethodID?

    open func setShortcut( s: MenuShortcut? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: s != nil ? s! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setShortcut", methodSig: "(Ljava/awt/MenuShortcut;)V", methodCache: &MenuItem.setShortcut_MethodID_18, args: &__args, locals: &__locals )
    }

    open func setShortcut( _ _s: MenuShortcut? ) {
        setShortcut( s: _s )
    }

    /// void java.awt.MenuItem.doMenuEvent(long,int)

    /// private final boolean java.awt.MenuItem.isItemEnabled()

    /// final java.lang.String java.awt.MenuItem.getActionCommandImpl()

    /// public synchronized void java.awt.MenuItem.setEnabled(boolean)

    private static var setEnabled_MethodID_19: jmethodID?

    open func setEnabled( b: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &MenuItem.setEnabled_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setEnabled( _ _b: Bool ) {
        setEnabled( b: _b )
    }

    /// public java.util.EventListener[] java.awt.MenuItem.getListeners(java.lang.Class)

    private static var getListeners_MethodID_20: jmethodID?

    open func getListeners( listenerType: java_swift.JavaClass? ) -> [EventListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: listenerType != nil ? listenerType! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getListeners", methodSig: "(Ljava/lang/Class;)[Ljava/util/EventListener;", methodCache: &MenuItem.getListeners_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [EventListenerForward](), from: __return )
    }

    open func getListeners( _ _listenerType: java_swift.JavaClass? ) -> [EventListener]! {
        return getListeners( listenerType: _listenerType )
    }

    /// public void java.awt.MenuItem.addNotify()

    private static var addNotify_MethodID_21: jmethodID?

    open func addNotify() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addNotify", methodSig: "()V", methodCache: &MenuItem.addNotify_MethodID_21, args: &__args, locals: &__locals )
    }


    /// protected final void java.awt.MenuItem.enableEvents(long)

    private static var enableEvents_MethodID_22: jmethodID?

    open func enableEvents( eventsToEnable: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: eventsToEnable, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "enableEvents", methodSig: "(J)V", methodCache: &MenuItem.enableEvents_MethodID_22, args: &__args, locals: &__locals )
    }

    open func enableEvents( _ _eventsToEnable: Int64 ) {
        enableEvents( eventsToEnable: _eventsToEnable )
    }

    /// boolean java.awt.MenuItem.eventEnabled(java.awt.AWTEvent)

    /// protected void java.awt.MenuItem.processEvent(java.awt.AWTEvent)

    private static var processEvent_MethodID_23: jmethodID?

    override open func processEvent( e: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &MenuItem.processEvent_MethodID_23, args: &__args, locals: &__locals )
    }

    override open func processEvent( _ _e: AWTEvent? ) {
        processEvent( e: _e )
    }

    /// java.lang.String java.awt.MenuItem.constructComponentName()

    /// protected final void java.awt.MenuItem.disableEvents(long)

    private static var disableEvents_MethodID_24: jmethodID?

    open func disableEvents( eventsToDisable: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: eventsToDisable, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "disableEvents", methodSig: "(J)V", methodCache: &MenuItem.disableEvents_MethodID_24, args: &__args, locals: &__locals )
    }

    open func disableEvents( _ _eventsToDisable: Int64 ) {
        disableEvents( eventsToDisable: _eventsToDisable )
    }

    /// public java.lang.String java.awt.MenuItem.getLabel()

    private static var getLabel_MethodID_25: jmethodID?

    open func getLabel() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLabel", methodSig: "()Ljava/lang/String;", methodCache: &MenuItem.getLabel_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

}

