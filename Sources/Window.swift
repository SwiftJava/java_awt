
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.Window ///

open class Window: Container {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var WindowJNIClass: jclass?

    /// static final int java.awt.Window.OPENED

    // Skipping field: true false false false false false 

    /// private static final sun.awt.util.IdentityArrayList java.awt.Window.allWindows

    /// private static final java.lang.String java.awt.Window.base

    /// private static final java.util.concurrent.atomic.AtomicBoolean java.awt.Window.beforeFirstWindowShown

    /// private static final boolean java.awt.Window.locationByPlatformProp

    /// private static final sun.util.logging.PlatformLogger java.awt.Window.log

    /// private static int java.awt.Window.nameCounter

    /// private static final long java.awt.Window.serialVersionUID

    /// static boolean java.awt.Window.systemSyncLWRequests

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Window.alwaysOnTop

    /// transient java.lang.Object java.awt.Window.anchor

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Window.autoRequestFocus

    /// transient boolean java.awt.Window.beforeFirstShow

    // Skipping field: true false false false false false 

    /// transient java.awt.Window$WindowDisposerRecord java.awt.Window.disposerRecord

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Window.disposing

    /// private java.awt.FocusManager java.awt.Window.focusMgr

    /// private boolean java.awt.Window.focusableWindowState

    /// transient java.util.List java.awt.Window.icons

    // Skipping field: true false false false false false 

    /// transient java.awt.im.InputContext java.awt.Window.inputContext

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Window.inputContextLock

    /// transient boolean java.awt.Window.isInShow

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Window.isTrayIconWindow

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Window.locationByPlatform

    /// transient java.awt.Dialog java.awt.Window.modalBlocker

    // Skipping field: true false false false false false 

    /// java.awt.Dialog$ModalExclusionType java.awt.Window.modalExclusionType

    // Skipping field: true false false false false false 

    /// private volatile float java.awt.Window.opacity

    /// transient java.util.Vector java.awt.Window.ownedWindowList

    // Skipping field: true false false false false false 

    /// private transient float java.awt.Window.securityWarningAlignmentX

    /// private transient float java.awt.Window.securityWarningAlignmentY

    /// private transient volatile int java.awt.Window.securityWarningHeight

    /// private transient double java.awt.Window.securityWarningPointX

    /// private transient double java.awt.Window.securityWarningPointY

    /// private transient volatile int java.awt.Window.securityWarningWidth

    /// private java.awt.Shape java.awt.Window.shape

    /// transient boolean java.awt.Window.showWithParent

    // Skipping field: true false false false false false 

    /// int java.awt.Window.state

    // Skipping field: true false false false false false 

    /// boolean java.awt.Window.syncLWRequests

    // Skipping field: true false false false false false 

    /// private transient java.awt.Component java.awt.Window.temporaryLostComponent

    /// private java.awt.Window$Type java.awt.Window.type

    /// java.lang.String java.awt.Window.warningString

    // Skipping field: true false false false false false 

    /// private transient java.lang.ref.WeakReference java.awt.Window.weakThis

    /// transient java.awt.event.WindowFocusListener java.awt.Window.windowFocusListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.WindowListener java.awt.Window.windowListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Window.windowSerializedDataVersion

    /// transient java.awt.event.WindowStateListener java.awt.Window.windowStateListener

    // Skipping field: true false false false false false 

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &Window.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &Window.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// java.awt.Window() throws java.awt.HeadlessException

    // Skipping init: true false false 

    /// public java.awt.Window(java.awt.Frame)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Frame? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Window", classCache: &Window.WindowJNIClass, methodSig: "(Ljava/awt/Frame;)V", methodCache: &Window.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Frame? ) {
        self.init( arg0: _arg0 )
    }

    /// java.awt.Window(java.awt.GraphicsConfiguration)

    // Skipping init: true false false 

    /// public java.awt.Window(java.awt.Window)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Window? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Window", classCache: &Window.WindowJNIClass, methodSig: "(Ljava/awt/Window;)V", methodCache: &Window.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Window? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.Window(java.awt.Window,java.awt.GraphicsConfiguration)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Window?, arg1: GraphicsConfiguration? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Window", classCache: &Window.WindowJNIClass, methodSig: "(Ljava/awt/Window;Ljava/awt/GraphicsConfiguration;)V", methodCache: &Window.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Window?, _ _arg1: GraphicsConfiguration? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// static java.lang.ref.WeakReference java.awt.Window.access$000(java.awt.Window)

    // Skipping method: true false false false false 

    /// static void java.awt.Window.access$100(sun.awt.AppContext,java.lang.ref.WeakReference)

    // Skipping method: true false false false false 

    /// static float java.awt.Window.access$1002(java.awt.Window,float)

    // Skipping method: true false false false false 

    /// static float java.awt.Window.access$1102(java.awt.Window,float)

    // Skipping method: true false false false false 

    /// static java.awt.geom.Point2D java.awt.Window.access$1200(java.awt.Window,double,double,double,double)

    // Skipping method: true false false false false 

    /// static boolean java.awt.Window.access$1300(java.awt.Window)

    // Skipping method: true false false false false 

    /// static boolean java.awt.Window.access$202(java.awt.Window,boolean)

    // Skipping method: true false false false false 

    /// static java.lang.Object java.awt.Window.access$300(java.awt.Window)

    // Skipping method: true false false false false 

    /// static float java.awt.Window.access$400(java.awt.Window)

    // Skipping method: true false false false false 

    /// static void java.awt.Window.access$500(java.awt.Window)

    // Skipping method: true false false false false 

    /// static int java.awt.Window.access$600(java.awt.Window)

    // Skipping method: true false false false false 

    /// static int java.awt.Window.access$602(java.awt.Window,int)

    // Skipping method: true false false false false 

    /// static int java.awt.Window.access$700(java.awt.Window)

    // Skipping method: true false false false false 

    /// static int java.awt.Window.access$702(java.awt.Window,int)

    // Skipping method: true false false false false 

    /// static double java.awt.Window.access$802(java.awt.Window,double)

    // Skipping method: true false false false false 

    /// static double java.awt.Window.access$902(java.awt.Window,double)

    // Skipping method: true false false false false 

    /// static sun.awt.util.IdentityArrayList java.awt.Window.getAllUnblockedWindows()

    // Skipping method: true false false false false 

    /// static sun.awt.util.IdentityArrayList java.awt.Window.getAllWindows()

    // Skipping method: true false false false false 

    /// public static java.awt.Window[] java.awt.Window.getOwnerlessWindows()

    private static var getOwnerlessWindows_MethodID_4: jmethodID?

    open class func getOwnerlessWindows() -> [Window]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Window", classCache: &WindowJNIClass, methodName: "getOwnerlessWindows", methodSig: "()[Ljava/awt/Window;", methodCache: &getOwnerlessWindows_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Window].self, from: __return )
    }


    /// private static java.awt.Window[] java.awt.Window.getWindows(sun.awt.AppContext)

    /// public static java.awt.Window[] java.awt.Window.getWindows()

    private static var getWindows_MethodID_5: jmethodID?

    open class func getWindows() -> [Window]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Window", classCache: &WindowJNIClass, methodName: "getWindows", methodSig: "()[Ljava/awt/Window;", methodCache: &getWindows_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Window].self, from: __return )
    }


    /// private static native void java.awt.Window.initIDs()

    /// private static double java.awt.Window.limit(double,double,double)

    /// private static void java.awt.Window.removeFromWindowList(sun.awt.AppContext,java.lang.ref.WeakReference)

    /// private static void java.awt.Window.setLayersOpaque(java.awt.Component,boolean)

    /// static void java.awt.Window.updateChildFocusableWindowState(java.awt.Window)

    // Skipping method: true false false false false 

    /// private void java.awt.Window.init(java.awt.GraphicsConfiguration)

    /// public void java.awt.Window.addNotify()

    // Skipping method: false true false false false 

    /// void java.awt.Window.addOwnedWindow(java.lang.ref.WeakReference)

    // Skipping method: true false false false false 

    /// public void java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)

    // Skipping method: false true false false false 

    /// public void java.awt.Window.addPropertyChangeListener(java.beans.PropertyChangeListener)

    // Skipping method: false true false false false 

    /// private void java.awt.Window.addToWindowList()

    /// public synchronized void java.awt.Window.addWindowFocusListener(java.awt.event.WindowFocusListener)

    private static var addWindowFocusListener_MethodID_6: jmethodID?

    open func addWindowFocusListener( arg0: WindowFocusListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addWindowFocusListener", methodSig: "(Ljava/awt/event/WindowFocusListener;)V", methodCache: &Window.addWindowFocusListener_MethodID_6, args: &__args, locals: &__locals )
    }

    open func addWindowFocusListener( _ _arg0: WindowFocusListener? ) {
        addWindowFocusListener( arg0: _arg0 )
    }

    /// public synchronized void java.awt.Window.addWindowListener(java.awt.event.WindowListener)

    private static var addWindowListener_MethodID_7: jmethodID?

    open func addWindowListener( arg0: WindowListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addWindowListener", methodSig: "(Ljava/awt/event/WindowListener;)V", methodCache: &Window.addWindowListener_MethodID_7, args: &__args, locals: &__locals )
    }

    open func addWindowListener( _ _arg0: WindowListener? ) {
        addWindowListener( arg0: _arg0 )
    }

    /// public synchronized void java.awt.Window.addWindowStateListener(java.awt.event.WindowStateListener)

    private static var addWindowStateListener_MethodID_8: jmethodID?

    open func addWindowStateListener( arg0: WindowStateListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addWindowStateListener", methodSig: "(Ljava/awt/event/WindowStateListener;)V", methodCache: &Window.addWindowStateListener_MethodID_8, args: &__args, locals: &__locals )
    }

    open func addWindowStateListener( _ _arg0: WindowStateListener? ) {
        addWindowStateListener( arg0: _arg0 )
    }

    /// void java.awt.Window.adjustDecendantsOnParent(int)

    // Skipping method: true false false false false 

    /// void java.awt.Window.adjustListeningChildrenOnParent(long,int)

    // Skipping method: true false false false false 

    /// final void java.awt.Window.applyCompoundShape(sun.java2d.pipe.Region)

    // Skipping method: true false false false false 

    /// final void java.awt.Window.applyCurrentShape()

    // Skipping method: true false false false false 

    /// public void java.awt.Window.applyResourceBundle(java.lang.String)

    private static var applyResourceBundle_MethodID_9: jmethodID?

    open func applyResourceBundle( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applyResourceBundle", methodSig: "(Ljava/lang/String;)V", methodCache: &Window.applyResourceBundle_MethodID_9, args: &__args, locals: &__locals )
    }

    open func applyResourceBundle( _ _arg0: String? ) {
        applyResourceBundle( arg0: _arg0 )
    }

    /// public void java.awt.Window.applyResourceBundle(java.util.ResourceBundle)

    private static var applyResourceBundle_MethodID_10: jmethodID?

    open func applyResourceBundle( arg0: java_util.ResourceBundle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applyResourceBundle", methodSig: "(Ljava/util/ResourceBundle;)V", methodCache: &Window.applyResourceBundle_MethodID_10, args: &__args, locals: &__locals )
    }

    open func applyResourceBundle( _ _arg0: java_util.ResourceBundle? ) {
        applyResourceBundle( arg0: _arg0 )
    }

    /// private java.awt.geom.Point2D java.awt.Window.calculateSecurityWarningPosition(double,double,double,double)

    /// boolean java.awt.Window.canContainFocusOwner(java.awt.Component)

    // Skipping method: true false false false false 

    /// final void java.awt.Window.clearMostRecentFocusOwnerOnHide()

    // Skipping method: true false false false false 

    /// final void java.awt.Window.closeSplashScreen()

    // Skipping method: true false false false false 

    /// void java.awt.Window.connectOwnedWindow(java.awt.Window)

    // Skipping method: true false false false false 

    /// java.lang.String java.awt.Window.constructComponentName()

    // Skipping method: true false false false false 

    /// public void java.awt.Window.createBufferStrategy(int)

    private static var createBufferStrategy_MethodID_11: jmethodID?

    open func createBufferStrategy( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createBufferStrategy", methodSig: "(I)V", methodCache: &Window.createBufferStrategy_MethodID_11, args: &__args, locals: &__locals )
    }

    open func createBufferStrategy( _ _arg0: Int ) {
        createBufferStrategy( arg0: _arg0 )
    }

    /// public void java.awt.Window.createBufferStrategy(int,java.awt.BufferCapabilities) throws java.awt.AWTException

    private static var createBufferStrategy_MethodID_12: jmethodID?

    open func createBufferStrategy( arg0: Int, arg1: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createBufferStrategy", methodSig: "(ILjava/awt/BufferCapabilities;)V", methodCache: &Window.createBufferStrategy_MethodID_12, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw AWTException( javaObject: throwable )
        }
    }

    open func createBufferStrategy( _ _arg0: Int, _ _arg1: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        try createBufferStrategy( arg0: _arg0, arg1: _arg1 )
    }

    /// void java.awt.Window.deliverMouseWheelToAncestor(java.awt.event.MouseWheelEvent)

    // Skipping method: true false false false false 

    /// private void java.awt.Window.deserializeResources(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException,java.awt.HeadlessException

    /// void java.awt.Window.dispatchEventImpl(java.awt.AWTEvent)

    // Skipping method: true false false false false 

    /// boolean java.awt.Window.dispatchMouseWheelToAncestor(java.awt.event.MouseWheelEvent)

    // Skipping method: true false false false false 

    /// public void java.awt.Window.dispose()

    private static var dispose_MethodID_13: jmethodID?

    open func dispose() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &Window.dispose_MethodID_13, args: &__args, locals: &__locals )
    }


    /// void java.awt.Window.disposeImpl()

    // Skipping method: true false false false false 

    /// void java.awt.Window.doDispose()

    // Skipping method: true false false false false 

    /// boolean java.awt.Window.eventEnabled(java.awt.AWTEvent)

    // Skipping method: true false false false false 

    /// public javax.accessibility.AccessibleContext java.awt.Window.getAccessibleContext()

    // Skipping method: false true false false false 

    /// public java.awt.Color java.awt.Window.getBackground()

    // Skipping method: false true false false false 

    /// public java.awt.image.BufferStrategy java.awt.Window.getBufferStrategy()

    private static var getBufferStrategy_MethodID_14: jmethodID?

    open func getBufferStrategy() -> BufferStrategy! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBufferStrategy", methodSig: "()Ljava/awt/image/BufferStrategy;", methodCache: &Window.getBufferStrategy_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BufferStrategy( javaObject: __return ) : nil
    }


    /// final java.awt.Container java.awt.Window.getContainer()

    // Skipping method: true false false false false 

    /// java.awt.Window java.awt.Window.getDocumentRoot()

    // Skipping method: true false false false false 

    /// public final java.awt.Container java.awt.Window.getFocusCycleRootAncestor()

    // Skipping method: false true false false false 

    /// public java.awt.Component java.awt.Window.getFocusOwner()

    private static var getFocusOwner_MethodID_15: jmethodID?

    open func getFocusOwner() -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFocusOwner", methodSig: "()Ljava/awt/Component;", methodCache: &Window.getFocusOwner_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }


    /// public java.util.Set java.awt.Window.getFocusTraversalKeys(int)

    // Skipping method: false true false false false 

    /// public boolean java.awt.Window.getFocusableWindowState()

    private static var getFocusableWindowState_MethodID_16: jmethodID?

    open func getFocusableWindowState() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getFocusableWindowState", methodSig: "()Z", methodCache: &Window.getFocusableWindowState_MethodID_16, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public java.util.List java.awt.Window.getIconImages()

    private static var getIconImages_MethodID_17: jmethodID?

    open func getIconImages() -> java_util.List! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getIconImages", methodSig: "()Ljava/util/List;", methodCache: &Window.getIconImages_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.ListForward( javaObject: __return ) : nil
    }


    /// public java.awt.im.InputContext java.awt.Window.getInputContext()

    // Skipping method: false true false false false 

    /// public java.util.EventListener[] java.awt.Window.getListeners(java.lang.Class)

    // Skipping method: false true false false false 

    /// public java.util.Locale java.awt.Window.getLocale()

    // Skipping method: false true false false false 

    /// final java.awt.Point java.awt.Window.getLocationOnWindow()

    // Skipping method: true false false false false 

    /// java.awt.Dialog java.awt.Window.getModalBlocker()

    // Skipping method: true false false false false 

    /// public java.awt.Dialog$ModalExclusionType java.awt.Window.getModalExclusionType()

    private static var getModalExclusionType_MethodID_18: jmethodID?

    open func getModalExclusionType() -> Dialog_ModalExclusionType! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getModalExclusionType", methodSig: "()Ljava/awt/Dialog$ModalExclusionType;", methodCache: &Window.getModalExclusionType_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dialog_ModalExclusionType( javaObject: __return ) : nil
    }


    /// public java.awt.Component java.awt.Window.getMostRecentFocusOwner()

    private static var getMostRecentFocusOwner_MethodID_19: jmethodID?

    open func getMostRecentFocusOwner() -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMostRecentFocusOwner", methodSig: "()Ljava/awt/Component;", methodCache: &Window.getMostRecentFocusOwner_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }


    /// public float java.awt.Window.getOpacity()

    private static var getOpacity_MethodID_20: jmethodID?

    open func getOpacity() -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getOpacity", methodSig: "()F", methodCache: &Window.getOpacity_MethodID_20, args: &__args, locals: &__locals )
        return __return
    }


    /// public java.awt.Window[] java.awt.Window.getOwnedWindows()

    private static var getOwnedWindows_MethodID_21: jmethodID?

    open func getOwnedWindows() -> [Window]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOwnedWindows", methodSig: "()[Ljava/awt/Window;", methodCache: &Window.getOwnedWindows_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Window].self, from: __return )
    }


    /// final java.awt.Window[] java.awt.Window.getOwnedWindows_NoClientCode()

    // Skipping method: true false false false false 

    /// public java.awt.Window java.awt.Window.getOwner()

    private static var getOwner_MethodID_22: jmethodID?

    open func getOwner() -> Window! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOwner", methodSig: "()Ljava/awt/Window;", methodCache: &Window.getOwner_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Window( javaObject: __return ) : nil
    }


    /// final java.awt.Window java.awt.Window.getOwner_NoClientCode()

    // Skipping method: true false false false false 

    /// public java.awt.Shape java.awt.Window.getShape()

    private static var getShape_MethodID_23: jmethodID?

    open func getShape() -> Shape! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getShape", methodSig: "()Ljava/awt/Shape;", methodCache: &Window.getShape_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }


    /// java.awt.Component java.awt.Window.getTemporaryLostComponent()

    // Skipping method: true false false false false 

    /// public java.awt.Toolkit java.awt.Window.getToolkit()

    // Skipping method: false true false false false 

    /// public java.awt.Window$Type java.awt.Window.getType()

    private static var getType_MethodID_24: jmethodID?

    open func getType() -> Window_Type! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getType", methodSig: "()Ljava/awt/Window$Type;", methodCache: &Window.getType_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Window_Type( javaObject: __return ) : nil
    }


    /// public final java.lang.String java.awt.Window.getWarningString()

    private static var getWarningString_MethodID_25: jmethodID?

    open func getWarningString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWarningString", methodSig: "()Ljava/lang/String;", methodCache: &Window.getWarningString_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public synchronized java.awt.event.WindowFocusListener[] java.awt.Window.getWindowFocusListeners()

    private static var getWindowFocusListeners_MethodID_26: jmethodID?

    open func getWindowFocusListeners() -> [WindowFocusListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWindowFocusListeners", methodSig: "()[Ljava/awt/event/WindowFocusListener;", methodCache: &Window.getWindowFocusListeners_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [WindowFocusListenerForward].self, from: __return )
    }


    /// public synchronized java.awt.event.WindowListener[] java.awt.Window.getWindowListeners()

    private static var getWindowListeners_MethodID_27: jmethodID?

    open func getWindowListeners() -> [WindowListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWindowListeners", methodSig: "()[Ljava/awt/event/WindowListener;", methodCache: &Window.getWindowListeners_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [WindowListenerForward].self, from: __return )
    }


    /// public synchronized java.awt.event.WindowStateListener[] java.awt.Window.getWindowStateListeners()

    private static var getWindowStateListeners_MethodID_28: jmethodID?

    open func getWindowStateListeners() -> [WindowStateListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWindowStateListeners", methodSig: "()[Ljava/awt/event/WindowStateListener;", methodCache: &Window.getWindowStateListeners_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [WindowStateListenerForward].self, from: __return )
    }


    /// public void java.awt.Window.hide()

    // Skipping method: false true false false false 

    /// private void java.awt.Window.initDeserializedWindow()

    /// private java.awt.GraphicsConfiguration java.awt.Window.initGC(java.awt.GraphicsConfiguration)

    /// public boolean java.awt.Window.isActive()

    private static var isActive_MethodID_29: jmethodID?

    open func isActive() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isActive", methodSig: "()Z", methodCache: &Window.isActive_MethodID_29, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final boolean java.awt.Window.isAlwaysOnTop()

    private static var isAlwaysOnTop_MethodID_30: jmethodID?

    open func isAlwaysOnTop() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAlwaysOnTop", methodSig: "()Z", methodCache: &Window.isAlwaysOnTop_MethodID_30, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean java.awt.Window.isAlwaysOnTopSupported()

    private static var isAlwaysOnTopSupported_MethodID_31: jmethodID?

    open func isAlwaysOnTopSupported() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAlwaysOnTopSupported", methodSig: "()Z", methodCache: &Window.isAlwaysOnTopSupported_MethodID_31, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean java.awt.Window.isAutoRequestFocus()

    private static var isAutoRequestFocus_MethodID_32: jmethodID?

    open func isAutoRequestFocus() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAutoRequestFocus", methodSig: "()Z", methodCache: &Window.isAutoRequestFocus_MethodID_32, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// boolean java.awt.Window.isDisposing()

    // Skipping method: true false false false false 

    /// public final boolean java.awt.Window.isFocusCycleRoot()

    // Skipping method: false true false false false 

    /// public final boolean java.awt.Window.isFocusableWindow()

    private static var isFocusableWindow_MethodID_33: jmethodID?

    open func isFocusableWindow() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusableWindow", methodSig: "()Z", methodCache: &Window.isFocusableWindow_MethodID_33, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean java.awt.Window.isFocused()

    private static var isFocused_MethodID_34: jmethodID?

    open func isFocused() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocused", methodSig: "()Z", methodCache: &Window.isFocused_MethodID_34, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean java.awt.Window.isLocationByPlatform()

    private static var isLocationByPlatform_MethodID_35: jmethodID?

    open func isLocationByPlatform() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isLocationByPlatform", methodSig: "()Z", methodCache: &Window.isLocationByPlatform_MethodID_35, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// boolean java.awt.Window.isModalBlocked()

    // Skipping method: true false false false false 

    /// boolean java.awt.Window.isModalExcluded(java.awt.Dialog$ModalExclusionType)

    // Skipping method: true false false false false 

    /// public boolean java.awt.Window.isOpaque()

    // Skipping method: false true false false false 

    /// boolean java.awt.Window.isRecursivelyVisible()

    // Skipping method: true false false false false 

    /// public boolean java.awt.Window.isShowing()

    // Skipping method: false true false false false 

    /// public boolean java.awt.Window.isValidateRoot()

    // Skipping method: false true false false false 

    /// final void java.awt.Window.mixOnReshaping()

    // Skipping method: true false false false false 

    /// private void java.awt.Window.ownedInit(java.awt.Window)

    /// public void java.awt.Window.pack()

    private static var pack_MethodID_36: jmethodID?

    open func pack() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "pack", methodSig: "()V", methodCache: &Window.pack_MethodID_36, args: &__args, locals: &__locals )
    }


    /// public void java.awt.Window.paint(java.awt.Graphics)

    // Skipping method: false true false false false 

    /// public boolean java.awt.Window.postEvent(java.awt.Event)

    // Skipping method: false true false false false 

    /// void java.awt.Window.postProcessKeyEvent(java.awt.event.KeyEvent)

    // Skipping method: true false false false false 

    /// synchronized void java.awt.Window.postWindowEvent(int)

    // Skipping method: true false false false false 

    /// void java.awt.Window.preProcessKeyEvent(java.awt.event.KeyEvent)

    // Skipping method: true false false false false 

    /// protected void java.awt.Window.processEvent(java.awt.AWTEvent)

    private static var processEvent_MethodID_37: jmethodID?

    override open func processEvent( arg0: AWTEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &Window.processEvent_MethodID_37, args: &__args, locals: &__locals )
    }

    override open func processEvent( _ _arg0: AWTEvent? ) {
        processEvent( arg0: _arg0 )
    }

    /// protected void java.awt.Window.processWindowEvent(java.awt.event.WindowEvent)

    private static var processWindowEvent_MethodID_38: jmethodID?

    open func processWindowEvent( arg0: WindowEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processWindowEvent", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &Window.processWindowEvent_MethodID_38, args: &__args, locals: &__locals )
    }

    open func processWindowEvent( _ _arg0: WindowEvent? ) {
        processWindowEvent( arg0: _arg0 )
    }

    /// protected void java.awt.Window.processWindowFocusEvent(java.awt.event.WindowEvent)

    private static var processWindowFocusEvent_MethodID_39: jmethodID?

    open func processWindowFocusEvent( arg0: WindowEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processWindowFocusEvent", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &Window.processWindowFocusEvent_MethodID_39, args: &__args, locals: &__locals )
    }

    open func processWindowFocusEvent( _ _arg0: WindowEvent? ) {
        processWindowFocusEvent( arg0: _arg0 )
    }

    /// protected void java.awt.Window.processWindowStateEvent(java.awt.event.WindowEvent)

    private static var processWindowStateEvent_MethodID_40: jmethodID?

    open func processWindowStateEvent( arg0: WindowEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processWindowStateEvent", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &Window.processWindowStateEvent_MethodID_40, args: &__args, locals: &__locals )
    }

    open func processWindowStateEvent( _ _arg0: WindowEvent? ) {
        processWindowStateEvent( arg0: _arg0 )
    }

    /// private void java.awt.Window.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException,java.awt.HeadlessException

    /// private void java.awt.Window.removeFromWindowList()

    /// public void java.awt.Window.removeNotify()

    // Skipping method: false true false false false 

    /// void java.awt.Window.removeOwnedWindow(java.lang.ref.WeakReference)

    // Skipping method: true false false false false 

    /// public synchronized void java.awt.Window.removeWindowFocusListener(java.awt.event.WindowFocusListener)

    private static var removeWindowFocusListener_MethodID_41: jmethodID?

    open func removeWindowFocusListener( arg0: WindowFocusListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeWindowFocusListener", methodSig: "(Ljava/awt/event/WindowFocusListener;)V", methodCache: &Window.removeWindowFocusListener_MethodID_41, args: &__args, locals: &__locals )
    }

    open func removeWindowFocusListener( _ _arg0: WindowFocusListener? ) {
        removeWindowFocusListener( arg0: _arg0 )
    }

    /// public synchronized void java.awt.Window.removeWindowListener(java.awt.event.WindowListener)

    private static var removeWindowListener_MethodID_42: jmethodID?

    open func removeWindowListener( arg0: WindowListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeWindowListener", methodSig: "(Ljava/awt/event/WindowListener;)V", methodCache: &Window.removeWindowListener_MethodID_42, args: &__args, locals: &__locals )
    }

    open func removeWindowListener( _ _arg0: WindowListener? ) {
        removeWindowListener( arg0: _arg0 )
    }

    /// public synchronized void java.awt.Window.removeWindowStateListener(java.awt.event.WindowStateListener)

    private static var removeWindowStateListener_MethodID_43: jmethodID?

    open func removeWindowStateListener( arg0: WindowStateListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeWindowStateListener", methodSig: "(Ljava/awt/event/WindowStateListener;)V", methodCache: &Window.removeWindowStateListener_MethodID_43, args: &__args, locals: &__locals )
    }

    open func removeWindowStateListener( _ _arg0: WindowStateListener? ) {
        removeWindowStateListener( arg0: _arg0 )
    }

    /// public void java.awt.Window.reshape(int,int,int,int)

    // Skipping method: false true false false false 

    /// public final void java.awt.Window.setAlwaysOnTop(boolean) throws java.lang.SecurityException

    private static var setAlwaysOnTop_MethodID_44: jmethodID?

    open func setAlwaysOnTop( arg0: Bool ) throws /* java.lang.SecurityException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAlwaysOnTop", methodSig: "(Z)V", methodCache: &Window.setAlwaysOnTop_MethodID_44, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.JavaSecurityException( javaObject: throwable )
        }
    }

    open func setAlwaysOnTop( _ _arg0: Bool ) throws /* java.lang.SecurityException */ {
        try setAlwaysOnTop( arg0: _arg0 )
    }

    /// public void java.awt.Window.setAutoRequestFocus(boolean)

    private static var setAutoRequestFocus_MethodID_45: jmethodID?

    open func setAutoRequestFocus( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAutoRequestFocus", methodSig: "(Z)V", methodCache: &Window.setAutoRequestFocus_MethodID_45, args: &__args, locals: &__locals )
    }

    open func setAutoRequestFocus( _ _arg0: Bool ) {
        setAutoRequestFocus( arg0: _arg0 )
    }

    /// public void java.awt.Window.setBackground(java.awt.Color)

    // Skipping method: false true false false false 

    /// public void java.awt.Window.setBounds(int,int,int,int)

    // Skipping method: false true false false false 

    /// public void java.awt.Window.setBounds(java.awt.Rectangle)

    // Skipping method: false true false false false 

    /// void java.awt.Window.setClientSize(int,int)

    // Skipping method: true false false false false 

    /// public void java.awt.Window.setCursor(java.awt.Cursor)

    // Skipping method: false true false false false 

    /// public final void java.awt.Window.setFocusCycleRoot(boolean)

    // Skipping method: false true false false false 

    /// public void java.awt.Window.setFocusableWindowState(boolean)

    private static var setFocusableWindowState_MethodID_46: jmethodID?

    open func setFocusableWindowState( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFocusableWindowState", methodSig: "(Z)V", methodCache: &Window.setFocusableWindowState_MethodID_46, args: &__args, locals: &__locals )
    }

    open func setFocusableWindowState( _ _arg0: Bool ) {
        setFocusableWindowState( arg0: _arg0 )
    }

    /// void java.awt.Window.setGraphicsConfiguration(java.awt.GraphicsConfiguration)

    // Skipping method: true false false false false 

    /// public void java.awt.Window.setIconImage(java.awt.Image)

    private static var setIconImage_MethodID_47: jmethodID?

    open func setIconImage( arg0: Image? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setIconImage", methodSig: "(Ljava/awt/Image;)V", methodCache: &Window.setIconImage_MethodID_47, args: &__args, locals: &__locals )
    }

    open func setIconImage( _ _arg0: Image? ) {
        setIconImage( arg0: _arg0 )
    }

    /// public synchronized void java.awt.Window.setIconImages(java.util.List)

    private static var setIconImages_MethodID_48: jmethodID?

    open func setIconImages( arg0: java_util.List? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setIconImages", methodSig: "(Ljava/util/List;)V", methodCache: &Window.setIconImages_MethodID_48, args: &__args, locals: &__locals )
    }

    open func setIconImages( _ _arg0: java_util.List? ) {
        setIconImages( arg0: _arg0 )
    }

    /// public void java.awt.Window.setLocation(int,int)

    // Skipping method: false true false false false 

    /// public void java.awt.Window.setLocation(java.awt.Point)

    // Skipping method: false true false false false 

    /// public void java.awt.Window.setLocationByPlatform(boolean)

    private static var setLocationByPlatform_MethodID_49: jmethodID?

    open func setLocationByPlatform( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocationByPlatform", methodSig: "(Z)V", methodCache: &Window.setLocationByPlatform_MethodID_49, args: &__args, locals: &__locals )
    }

    open func setLocationByPlatform( _ _arg0: Bool ) {
        setLocationByPlatform( arg0: _arg0 )
    }

    /// public void java.awt.Window.setLocationRelativeTo(java.awt.Component)

    private static var setLocationRelativeTo_MethodID_50: jmethodID?

    open func setLocationRelativeTo( arg0: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocationRelativeTo", methodSig: "(Ljava/awt/Component;)V", methodCache: &Window.setLocationRelativeTo_MethodID_50, args: &__args, locals: &__locals )
    }

    open func setLocationRelativeTo( _ _arg0: Component? ) {
        setLocationRelativeTo( arg0: _arg0 )
    }

    /// public void java.awt.Window.setMinimumSize(java.awt.Dimension)

    // Skipping method: false true false false false 

    /// void java.awt.Window.setModalBlocked(java.awt.Dialog,boolean,boolean)

    // Skipping method: true false false false false 

    /// public void java.awt.Window.setModalExclusionType(java.awt.Dialog$ModalExclusionType)

    private static var setModalExclusionType_MethodID_51: jmethodID?

    open func setModalExclusionType( arg0: Dialog_ModalExclusionType? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setModalExclusionType", methodSig: "(Ljava/awt/Dialog$ModalExclusionType;)V", methodCache: &Window.setModalExclusionType_MethodID_51, args: &__args, locals: &__locals )
    }

    open func setModalExclusionType( _ _arg0: Dialog_ModalExclusionType? ) {
        setModalExclusionType( arg0: _arg0 )
    }

    /// public void java.awt.Window.setOpacity(float)

    private static var setOpacity_MethodID_52: jmethodID?

    open func setOpacity( arg0: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: arg0 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setOpacity", methodSig: "(F)V", methodCache: &Window.setOpacity_MethodID_52, args: &__args, locals: &__locals )
    }

    open func setOpacity( _ _arg0: Float ) {
        setOpacity( arg0: _arg0 )
    }

    /// private void java.awt.Window.setOwnedWindowsAlwaysOnTop(boolean)

    /// public void java.awt.Window.setShape(java.awt.Shape)

    private static var setShape_MethodID_53: jmethodID?

    open func setShape( arg0: Shape? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setShape", methodSig: "(Ljava/awt/Shape;)V", methodCache: &Window.setShape_MethodID_53, args: &__args, locals: &__locals )
    }

    open func setShape( _ _arg0: Shape? ) {
        setShape( arg0: _arg0 )
    }

    /// public void java.awt.Window.setSize(java.awt.Dimension)

    // Skipping method: false true false false false 

    /// public void java.awt.Window.setSize(int,int)

    // Skipping method: false true false false false 

    /// java.awt.Component java.awt.Window.setTemporaryLostComponent(java.awt.Component)

    // Skipping method: true false false false false 

    /// public void java.awt.Window.setType(java.awt.Window$Type)

    private static var setType_MethodID_54: jmethodID?

    open func setType( arg0: Window_Type? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setType", methodSig: "(Ljava/awt/Window$Type;)V", methodCache: &Window.setType_MethodID_54, args: &__args, locals: &__locals )
    }

    open func setType( _ _arg0: Window_Type? ) {
        setType( arg0: _arg0 )
    }

    /// public void java.awt.Window.setVisible(boolean)

    // Skipping method: false true false false false 

    /// private void java.awt.Window.setWarningString()

    /// public void java.awt.Window.show()

    // Skipping method: false true false false false 

    /// public void java.awt.Window.toBack()

    private static var toBack_MethodID_55: jmethodID?

    open func toBack() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "toBack", methodSig: "()V", methodCache: &Window.toBack_MethodID_55, args: &__args, locals: &__locals )
    }


    /// final void java.awt.Window.toBack_NoClientCode()

    // Skipping method: true false false false false 

    /// public void java.awt.Window.toFront()

    private static var toFront_MethodID_56: jmethodID?

    open func toFront() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "toFront", methodSig: "()V", methodCache: &Window.toFront_MethodID_56, args: &__args, locals: &__locals )
    }


    /// final void java.awt.Window.toFront_NoClientCode()

    // Skipping method: true false false false false 

    /// void java.awt.Window.updateChildrenBlocking()

    // Skipping method: true false false false false 

    /// private void java.awt.Window.updateWindow()

    /// void java.awt.Window.updateZOrder()

    // Skipping method: true false false false false 

    /// private void java.awt.Window.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

    // Skipping method: false true false false false 

}

private typealias Window_paint_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func Window_paint_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> () {
    WindowLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).paint( arg0: arg0 != nil ? Graphics( javaObject: arg0 ) : nil )
}

fileprivate class WindowLocal_: JNIObjectProxy<Window> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let Window_paint_0_thunk: Window_paint_0_type = Window_paint_0
        natives.append( JNINativeMethod( name: strdup("__paint"), signature: strdup("(JLjava/awt/Graphics;)V"), fnPtr: unsafeBitCast( Window_paint_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/WindowProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

open class WindowBase: Window {

    private static var WindowBaseJNIClass: jclass? = WindowLocal_.proxyClass()

    private lazy var __local: WindowLocal_? = WindowLocal_( owned: self, proto: self )

    override open func clearLocal() {
        __local = nil
    }

    open func inherit( _ parent: JNIObjectProtocol ) {
        parent.withJavaObject {
            self.javaObject = $0
            self.__local?.takeOwnership(javaObject: $0)
        }
    }

    /// java.awt.Window() throws java.awt.HeadlessException

    // Skipping init: true false false 

    /// public java.awt.Window(java.awt.Frame)

    private static var new_MethodID_57: jmethodID?

    public convenience init( arg0: Frame? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )

        self.init( javaObject: nil )
        __args[1] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/WindowProxy", classCache: &WindowBase.WindowBaseJNIClass, methodSig: "(Ljava/awt/Frame;J)V", methodCache: &WindowBase.new_MethodID_57, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Frame? ) {
        self.init( arg0: _arg0 )
    }

    /// java.awt.Window(java.awt.GraphicsConfiguration)

    // Skipping init: true false false 

    /// public java.awt.Window(java.awt.Window)

    private static var new_MethodID_58: jmethodID?

    public convenience init( arg0: Window? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )

        self.init( javaObject: nil )
        __args[1] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/WindowProxy", classCache: &WindowBase.WindowBaseJNIClass, methodSig: "(Ljava/awt/Window;J)V", methodCache: &WindowBase.new_MethodID_58, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Window? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.Window(java.awt.Window,java.awt.GraphicsConfiguration)

    private static var new_MethodID_59: jmethodID?

    public convenience init( arg0: Window?, arg1: GraphicsConfiguration? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )

        self.init( javaObject: nil )
        __args[2] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/WindowProxy", classCache: &WindowBase.WindowBaseJNIClass, methodSig: "(Ljava/awt/Window;Ljava/awt/GraphicsConfiguration;J)V", methodCache: &WindowBase.new_MethodID_59, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Window?, _ _arg1: GraphicsConfiguration? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

}
