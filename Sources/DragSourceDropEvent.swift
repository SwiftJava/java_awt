
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.dnd.DragSourceDropEvent ///

open class DragSourceDropEvent: DragSourceEvent {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DragSourceDropEventJNIClass: jclass?

    /// private static final long java.awt.dnd.DragSourceDropEvent.serialVersionUID

    /// private int java.awt.dnd.DragSourceDropEvent.dropAction

    /// private boolean java.awt.dnd.DragSourceDropEvent.dropSuccess

    /// private static final long java.awt.dnd.DragSourceEvent.serialVersionUID

    /// private final boolean java.awt.dnd.DragSourceEvent.locationSpecified

    /// private final int java.awt.dnd.DragSourceEvent.x

    /// private final int java.awt.dnd.DragSourceEvent.y

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_swift.JavaObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &DragSourceDropEvent.source_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &DragSourceDropEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.awt.dnd.DragSourceDropEvent(java.awt.dnd.DragSourceContext)

    private static var new_MethodID_1: jmethodID?

    public convenience init( dsc: DragSourceContext? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: dsc, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSourceDropEvent", classCache: &DragSourceDropEvent.DragSourceDropEventJNIClass, methodSig: "(Ljava/awt/dnd/DragSourceContext;)V", methodCache: &DragSourceDropEvent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _dsc: DragSourceContext? ) {
        self.init( dsc: _dsc )
    }

    /// public java.awt.dnd.DragSourceDropEvent(java.awt.dnd.DragSourceContext,int,boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( dsc: DragSourceContext?, action: Int, success: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: dsc, locals: &__locals )
        __args[1] = jvalue( i: jint(action) )
        __args[2] = jvalue( z: jboolean(success ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSourceDropEvent", classCache: &DragSourceDropEvent.DragSourceDropEventJNIClass, methodSig: "(Ljava/awt/dnd/DragSourceContext;IZ)V", methodCache: &DragSourceDropEvent.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _dsc: DragSourceContext?, _ _action: Int, _ _success: Bool ) {
        self.init( dsc: _dsc, action: _action, success: _success )
    }

    /// public java.awt.dnd.DragSourceDropEvent(java.awt.dnd.DragSourceContext,int,boolean,int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( dsc: DragSourceContext?, action: Int, success: Bool, x: Int, y: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = JNIType.toJava( value: dsc, locals: &__locals )
        __args[1] = jvalue( i: jint(action) )
        __args[2] = jvalue( z: jboolean(success ? JNI_TRUE : JNI_FALSE) )
        __args[3] = jvalue( i: jint(x) )
        __args[4] = jvalue( i: jint(y) )
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSourceDropEvent", classCache: &DragSourceDropEvent.DragSourceDropEventJNIClass, methodSig: "(Ljava/awt/dnd/DragSourceContext;IZII)V", methodCache: &DragSourceDropEvent.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _dsc: DragSourceContext?, _ _action: Int, _ _success: Bool, _ _x: Int, _ _y: Int ) {
        self.init( dsc: _dsc, action: _action, success: _success, x: _x, y: _y )
    }

    /// public int java.awt.dnd.DragSourceDropEvent.getDropAction()

    private static var getDropAction_MethodID_4: jmethodID?

    open func getDropAction() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDropAction", methodSig: "()I", methodCache: &DragSourceDropEvent.getDropAction_MethodID_4, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public boolean java.awt.dnd.DragSourceDropEvent.getDropSuccess()

    private static var getDropSuccess_MethodID_5: jmethodID?

    open func getDropSuccess() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getDropSuccess", methodSig: "()Z", methodCache: &DragSourceDropEvent.getDropSuccess_MethodID_5, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


}

