
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// interface java.awt.event.MouseListener ///

public protocol MouseListener: java_util.EventListener {

    /// public abstract void java.awt.event.MouseListener.mousePressed(java.awt.event.MouseEvent)

    func mousePressed( arg0: MouseEvent? )
    func mousePressed( _ _arg0: MouseEvent? )

    /// public abstract void java.awt.event.MouseListener.mouseReleased(java.awt.event.MouseEvent)

    func mouseReleased( arg0: MouseEvent? )
    func mouseReleased( _ _arg0: MouseEvent? )

    /// public abstract void java.awt.event.MouseListener.mouseClicked(java.awt.event.MouseEvent)

    func mouseClicked( arg0: MouseEvent? )
    func mouseClicked( _ _arg0: MouseEvent? )

    /// public abstract void java.awt.event.MouseListener.mouseExited(java.awt.event.MouseEvent)

    func mouseExited( arg0: MouseEvent? )
    func mouseExited( _ _arg0: MouseEvent? )

    /// public abstract void java.awt.event.MouseListener.mouseEntered(java.awt.event.MouseEvent)

    func mouseEntered( arg0: MouseEvent? )
    func mouseEntered( _ _arg0: MouseEvent? )

}

open class MouseListenerForward: java_util.EventListenerForward, MouseListener {

    private static var MouseListenerJNIClass: jclass?

    /// public abstract void java.awt.event.MouseListener.mousePressed(java.awt.event.MouseEvent)

    private static var mousePressed_MethodID_6: jmethodID?

    open func mousePressed( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mousePressed", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseListenerForward.mousePressed_MethodID_6, args: &__args, locals: &__locals )
    }

    open func mousePressed( _ _arg0: MouseEvent? ) {
        mousePressed( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseReleased(java.awt.event.MouseEvent)

    private static var mouseReleased_MethodID_7: jmethodID?

    open func mouseReleased( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseReleased", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseListenerForward.mouseReleased_MethodID_7, args: &__args, locals: &__locals )
    }

    open func mouseReleased( _ _arg0: MouseEvent? ) {
        mouseReleased( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseClicked(java.awt.event.MouseEvent)

    private static var mouseClicked_MethodID_8: jmethodID?

    open func mouseClicked( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseClicked", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseListenerForward.mouseClicked_MethodID_8, args: &__args, locals: &__locals )
    }

    open func mouseClicked( _ _arg0: MouseEvent? ) {
        mouseClicked( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseExited(java.awt.event.MouseEvent)

    private static var mouseExited_MethodID_9: jmethodID?

    open func mouseExited( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseExited", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseListenerForward.mouseExited_MethodID_9, args: &__args, locals: &__locals )
    }

    open func mouseExited( _ _arg0: MouseEvent? ) {
        mouseExited( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseEntered(java.awt.event.MouseEvent)

    private static var mouseEntered_MethodID_10: jmethodID?

    open func mouseEntered( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseEntered", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseListenerForward.mouseEntered_MethodID_10, args: &__args, locals: &__locals )
    }

    open func mouseEntered( _ _arg0: MouseEvent? ) {
        mouseEntered( arg0: _arg0 )
    }

}


private typealias MouseListener_mousePressed_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseListener_mousePressed_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mousePressed( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

private typealias MouseListener_mouseReleased_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseListener_mouseReleased_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseReleased( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

private typealias MouseListener_mouseClicked_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseListener_mouseClicked_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseClicked( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

private typealias MouseListener_mouseExited_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseListener_mouseExited_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseExited( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

private typealias MouseListener_mouseEntered_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseListener_mouseEntered_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseEntered( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

open class MouseListenerBase: JNIObjectProxy, MouseListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let MouseListener_mousePressed_0_thunk: MouseListener_mousePressed_0_type = MouseListener_mousePressed_0
            natives.append( JNINativeMethod( name: strdup("__mousePressed"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseListener_mousePressed_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseListener_mouseReleased_1_thunk: MouseListener_mouseReleased_1_type = MouseListener_mouseReleased_1
            natives.append( JNINativeMethod( name: strdup("__mouseReleased"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseListener_mouseReleased_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseListener_mouseClicked_2_thunk: MouseListener_mouseClicked_2_type = MouseListener_mouseClicked_2
            natives.append( JNINativeMethod( name: strdup("__mouseClicked"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseListener_mouseClicked_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseListener_mouseExited_3_thunk: MouseListener_mouseExited_3_type = MouseListener_mouseExited_3
            natives.append( JNINativeMethod( name: strdup("__mouseExited"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseListener_mouseExited_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseListener_mouseEntered_4_thunk: MouseListener_mouseEntered_4_type = MouseListener_mouseEntered_4
            natives.append( JNINativeMethod( name: strdup("__mouseEntered"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseListener_mouseEntered_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/MouseListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        MouseListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/MouseListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> MouseListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: MouseListenerBase.self )
    }

    /// public abstract void java.awt.event.MouseListener.mousePressed(java.awt.event.MouseEvent)

    open func mousePressed( arg0: MouseEvent? ) /**/ {
    }

    open func mousePressed( _ _arg0: MouseEvent? ) /**/ {
        mousePressed( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseReleased(java.awt.event.MouseEvent)

    open func mouseReleased( arg0: MouseEvent? ) /**/ {
    }

    open func mouseReleased( _ _arg0: MouseEvent? ) /**/ {
        mouseReleased( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseClicked(java.awt.event.MouseEvent)

    open func mouseClicked( arg0: MouseEvent? ) /**/ {
    }

    open func mouseClicked( _ _arg0: MouseEvent? ) /**/ {
        mouseClicked( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseExited(java.awt.event.MouseEvent)

    open func mouseExited( arg0: MouseEvent? ) /**/ {
    }

    open func mouseExited( _ _arg0: MouseEvent? ) /**/ {
        mouseExited( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseListener.mouseEntered(java.awt.event.MouseEvent)

    open func mouseEntered( arg0: MouseEvent? ) /**/ {
    }

    open func mouseEntered( _ _arg0: MouseEvent? ) /**/ {
        mouseEntered( arg0: _arg0 )
    }

}
