
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.geom.CubicCurve2D$Float ///

open class CubicCurve2D_Float: CubicCurve2D, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.CubicCurve2D$Float", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CubicCurve2D_FloatJNIClass: jclass?

    /// private static final long java.awt.geom.CubicCurve2D$Float.serialVersionUID

    /// public float java.awt.geom.CubicCurve2D$Float.ctrlx1

    private static var ctrlx1_FieldID: jfieldID?

    open var ctrlx1: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "ctrlx1", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrlx1_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "ctrlx1", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrlx1_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.CubicCurve2D$Float.ctrlx2

    private static var ctrlx2_FieldID: jfieldID?

    open var ctrlx2: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "ctrlx2", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrlx2_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "ctrlx2", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrlx2_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.CubicCurve2D$Float.ctrly1

    private static var ctrly1_FieldID: jfieldID?

    open var ctrly1: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "ctrly1", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrly1_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "ctrly1", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrly1_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.CubicCurve2D$Float.ctrly2

    private static var ctrly2_FieldID: jfieldID?

    open var ctrly2: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "ctrly2", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrly2_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "ctrly2", fieldType: "F", fieldCache: &CubicCurve2D_Float.ctrly2_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.CubicCurve2D$Float.x1

    private static var x1_FieldID: jfieldID?

    open var x1: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "x1", fieldType: "F", fieldCache: &CubicCurve2D_Float.x1_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "x1", fieldType: "F", fieldCache: &CubicCurve2D_Float.x1_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.CubicCurve2D$Float.x2

    private static var x2_FieldID: jfieldID?

    open var x2: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "x2", fieldType: "F", fieldCache: &CubicCurve2D_Float.x2_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "x2", fieldType: "F", fieldCache: &CubicCurve2D_Float.x2_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.CubicCurve2D$Float.y1

    private static var y1_FieldID: jfieldID?

    open var y1: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "y1", fieldType: "F", fieldCache: &CubicCurve2D_Float.y1_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "y1", fieldType: "F", fieldCache: &CubicCurve2D_Float.y1_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.CubicCurve2D$Float.y2

    private static var y2_FieldID: jfieldID?

    open var y2: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "y2", fieldType: "F", fieldCache: &CubicCurve2D_Float.y2_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "y2", fieldType: "F", fieldCache: &CubicCurve2D_Float.y2_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public java.awt.geom.CubicCurve2D$Float()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/CubicCurve2D$Float", classCache: &CubicCurve2D_Float.CubicCurve2D_FloatJNIClass, methodSig: "()V", methodCache: &CubicCurve2D_Float.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.geom.CubicCurve2D$Float(float,float,float,float,float,float,float,float)

    private static var new_MethodID_2: jmethodID?

    public convenience init( x1: Float, y1: Float, ctrlx1: Float, ctrly1: Float, ctrlx2: Float, ctrly2: Float, x2: Float, y2: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        __args[0] = jvalue( f: x1 )
        __args[1] = jvalue( f: y1 )
        __args[2] = jvalue( f: ctrlx1 )
        __args[3] = jvalue( f: ctrly1 )
        __args[4] = jvalue( f: ctrlx2 )
        __args[5] = jvalue( f: ctrly2 )
        __args[6] = jvalue( f: x2 )
        __args[7] = jvalue( f: y2 )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/CubicCurve2D$Float", classCache: &CubicCurve2D_Float.CubicCurve2D_FloatJNIClass, methodSig: "(FFFFFFFF)V", methodCache: &CubicCurve2D_Float.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _x1: Float, _ _y1: Float, _ _ctrlx1: Float, _ _ctrly1: Float, _ _ctrlx2: Float, _ _ctrly2: Float, _ _x2: Float, _ _y2: Float ) {
        self.init( x1: _x1, y1: _y1, ctrlx1: _ctrlx1, ctrly1: _ctrly1, ctrlx2: _ctrlx2, ctrly2: _ctrly2, x2: _x2, y2: _y2 )
    }

    /// public java.awt.geom.Rectangle2D java.awt.geom.CubicCurve2D$Float.getBounds2D()

    // Skipping method: false true false false false 

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Float.getCtrlP1()

    // Skipping method: false true false false false 

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Float.getCtrlP2()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getCtrlX1()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getCtrlX2()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getCtrlY1()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getCtrlY2()

    // Skipping method: false true false false false 

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Float.getP1()

    // Skipping method: false true false false false 

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Float.getP2()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getX1()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getX2()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getY1()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.CubicCurve2D$Float.getY2()

    // Skipping method: false true false false false 

    /// public void java.awt.geom.CubicCurve2D$Float.setCurve(double,double,double,double,double,double,double,double)

    // Skipping method: false true false false false 

    /// public void java.awt.geom.CubicCurve2D$Float.setCurve(float,float,float,float,float,float,float,float)

    private static var setCurve_MethodID_3: jmethodID?

    open func setCurve( x1: Float, y1: Float, ctrlx1: Float, ctrly1: Float, ctrlx2: Float, ctrly2: Float, x2: Float, y2: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        __args[0] = jvalue( f: x1 )
        __args[1] = jvalue( f: y1 )
        __args[2] = jvalue( f: ctrlx1 )
        __args[3] = jvalue( f: ctrly1 )
        __args[4] = jvalue( f: ctrlx2 )
        __args[5] = jvalue( f: ctrly2 )
        __args[6] = jvalue( f: x2 )
        __args[7] = jvalue( f: y2 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "(FFFFFFFF)V", methodCache: &CubicCurve2D_Float.setCurve_MethodID_3, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _x1: Float, _ _y1: Float, _ _ctrlx1: Float, _ _ctrly1: Float, _ _ctrlx2: Float, _ _ctrly2: Float, _ _x2: Float, _ _y2: Float ) {
        setCurve( x1: _x1, y1: _y1, ctrlx1: _ctrlx1, ctrly1: _ctrly1, ctrlx2: _ctrlx2, ctrly2: _ctrly2, x2: _x2, y2: _y2 )
    }

}

