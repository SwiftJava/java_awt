
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:39 GMT 2016 ///

/// class java.awt.image.PackedColorModel ///

open class PackedColorModel: ColorModel {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.PackedColorModel", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var PackedColorModelJNIClass: jclass?

    /// int[] java.awt.image.PackedColorModel.maskArray

    /// int[] java.awt.image.PackedColorModel.maskOffsets

    /// float[] java.awt.image.PackedColorModel.scaleFactors

    /// private long java.awt.image.ColorModel.pData

    /// protected int java.awt.image.ColorModel.pixel_bits

    private static var pixel_bits_FieldID: jfieldID?

    override open var pixel_bits: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "pixel_bits", fieldType: "I", fieldCache: &PackedColorModel.pixel_bits_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "pixel_bits", fieldType: "I", fieldCache: &PackedColorModel.pixel_bits_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// int[] java.awt.image.ColorModel.nBits

    /// int java.awt.image.ColorModel.transparency

    /// boolean java.awt.image.ColorModel.supportsAlpha

    /// boolean java.awt.image.ColorModel.isAlphaPremultiplied

    /// int java.awt.image.ColorModel.numComponents

    /// int java.awt.image.ColorModel.numColorComponents

    /// java.awt.color.ColorSpace java.awt.image.ColorModel.colorSpace

    /// int java.awt.image.ColorModel.colorSpaceType

    /// int java.awt.image.ColorModel.maxBits

    /// boolean java.awt.image.ColorModel.is_sRGB

    /// protected int java.awt.image.ColorModel.transferType

    private static var transferType_FieldID: jfieldID?

    override open var transferType: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "transferType", fieldType: "I", fieldCache: &PackedColorModel.transferType_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "transferType", fieldType: "I", fieldCache: &PackedColorModel.transferType_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private static boolean java.awt.image.ColorModel.loaded

    /// private static java.awt.image.ColorModel java.awt.image.ColorModel.RGBdefault

    /// static byte[] java.awt.image.ColorModel.l8Tos8

    /// static byte[] java.awt.image.ColorModel.s8Tol8

    /// static byte[] java.awt.image.ColorModel.l16Tos8

    /// static short[] java.awt.image.ColorModel.s8Tol16

    /// static java.util.Map java.awt.image.ColorModel.g8Tos8Map

    /// static java.util.Map java.awt.image.ColorModel.lg16Toog8Map

    /// static java.util.Map java.awt.image.ColorModel.g16Tos8Map

    /// static java.util.Map java.awt.image.ColorModel.lg16Toog16Map

    /// public static final int java.awt.Transparency.OPAQUE

    /// public static final int java.awt.Transparency.BITMASK

    /// public static final int java.awt.Transparency.TRANSLUCENT

    /// public java.awt.image.PackedColorModel(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: ColorSpace?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Bool, arg7: Int, arg8: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/PackedColorModel", classCache: &PackedColorModel.PackedColorModelJNIClass, methodSig: "(Ljava/awt/color/ColorSpace;IIIIIZII)V", methodCache: &PackedColorModel.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: ColorSpace?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Bool, _ _arg7: Int, _ _arg8: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8 )
    }

    /// public java.awt.image.PackedColorModel(java.awt.color.ColorSpace,int,int[],int,boolean,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: ColorSpace?, arg1: Int, arg2: [Int32]?, arg3: Int, arg4: Bool, arg5: Int, arg6: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/PackedColorModel", classCache: &PackedColorModel.PackedColorModelJNIClass, methodSig: "(Ljava/awt/color/ColorSpace;I[IIZII)V", methodCache: &PackedColorModel.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: ColorSpace?, _ _arg1: Int, _ _arg2: [Int32]?, _ _arg3: Int, _ _arg4: Bool, _ _arg5: Int, _ _arg6: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public boolean java.awt.image.PackedColorModel.equals(java.lang.Object)

    /// private static final int java.awt.image.PackedColorModel.countBits(int)

    /// public final int java.awt.image.PackedColorModel.getMask(int)

    private static var getMask_MethodID_3: jmethodID?

    open func getMask( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMask", methodSig: "(I)I", methodCache: &PackedColorModel.getMask_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getMask( _ _arg0: Int ) -> Int {
        return getMask( arg0: _arg0 )
    }

    /// public java.awt.image.SampleModel java.awt.image.PackedColorModel.createCompatibleSampleModel(int,int)

    /// public boolean java.awt.image.PackedColorModel.isCompatibleSampleModel(java.awt.image.SampleModel)

    /// public java.awt.image.WritableRaster java.awt.image.PackedColorModel.getAlphaRaster(java.awt.image.WritableRaster)

    /// public final int[] java.awt.image.PackedColorModel.getMasks()

    private static var getMasks_MethodID_4: jmethodID?

    open func getMasks() -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMasks", methodSig: "()[I", methodCache: &PackedColorModel.getMasks_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }


    /// private void java.awt.image.PackedColorModel.DecomposeMask(int,int,java.lang.String)

    /// private static final int[] java.awt.image.PackedColorModel.createBitsArray(int[],int)

    /// private static final int[] java.awt.image.PackedColorModel.createBitsArray(int,int,int,int)

}
