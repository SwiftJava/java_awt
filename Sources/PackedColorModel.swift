
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.image.PackedColorModel ///

open class PackedColorModel: ColorModel {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var PackedColorModelJNIClass: jclass?

    /// int[] java.awt.image.PackedColorModel.maskArray

    /// int[] java.awt.image.PackedColorModel.maskOffsets

    /// float[] java.awt.image.PackedColorModel.scaleFactors

    /// private long java.awt.image.ColorModel.pData

    /// protected int java.awt.image.ColorModel.pixel_bits

    private static var pixel_bits_FieldID: jfieldID?

    override open var pixel_bits: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "pixel_bits", fieldType: "I", fieldCache: &PackedColorModel.pixel_bits_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "pixel_bits", fieldType: "I", fieldCache: &PackedColorModel.pixel_bits_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// int[] java.awt.image.ColorModel.nBits

    /// int java.awt.image.ColorModel.transparency

    /// boolean java.awt.image.ColorModel.supportsAlpha

    /// boolean java.awt.image.ColorModel.isAlphaPremultiplied

    /// int java.awt.image.ColorModel.numComponents

    /// int java.awt.image.ColorModel.numColorComponents

    /// java.awt.color.ColorSpace java.awt.image.ColorModel.colorSpace

    /// int java.awt.image.ColorModel.colorSpaceType

    /// int java.awt.image.ColorModel.maxBits

    /// boolean java.awt.image.ColorModel.is_sRGB

    /// protected int java.awt.image.ColorModel.transferType

    private static var transferType_FieldID: jfieldID?

    override open var transferType: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "transferType", fieldType: "I", fieldCache: &PackedColorModel.transferType_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "transferType", fieldType: "I", fieldCache: &PackedColorModel.transferType_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private static boolean java.awt.image.ColorModel.loaded

    /// private static java.awt.image.ColorModel java.awt.image.ColorModel.RGBdefault

    /// static byte[] java.awt.image.ColorModel.l8Tos8

    /// static byte[] java.awt.image.ColorModel.s8Tol8

    /// static byte[] java.awt.image.ColorModel.l16Tos8

    /// static short[] java.awt.image.ColorModel.s8Tol16

    /// static java.util.Map java.awt.image.ColorModel.g8Tos8Map

    /// static java.util.Map java.awt.image.ColorModel.lg16Toog8Map

    /// static java.util.Map java.awt.image.ColorModel.g16Tos8Map

    /// static java.util.Map java.awt.image.ColorModel.lg16Toog16Map

    /// public static final int java.awt.Transparency.OPAQUE

    /// public static final int java.awt.Transparency.BITMASK

    /// public static final int java.awt.Transparency.TRANSLUCENT

    /// public java.awt.image.PackedColorModel(java.awt.color.ColorSpace,int,int[],int,boolean,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( space: ColorSpace?, bits: Int, colorMaskArray: [Int32]?, alphaMask: Int, isAlphaPremultiplied: Bool, trans: Int, transferType: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: space, locals: &__locals )
        __args[1] = JNIType.toJava( value: bits, locals: &__locals )
        __args[2] = JNIType.toJava( value: colorMaskArray, locals: &__locals )
        __args[3] = JNIType.toJava( value: alphaMask, locals: &__locals )
        __args[4] = JNIType.toJava( value: isAlphaPremultiplied, locals: &__locals )
        __args[5] = JNIType.toJava( value: trans, locals: &__locals )
        __args[6] = JNIType.toJava( value: transferType, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/PackedColorModel", classCache: &PackedColorModel.PackedColorModelJNIClass, methodSig: "(Ljava/awt/color/ColorSpace;I[IIZII)V", methodCache: &PackedColorModel.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _space: ColorSpace?, _ _bits: Int, _ _colorMaskArray: [Int32]?, _ _alphaMask: Int, _ _isAlphaPremultiplied: Bool, _ _trans: Int, _ _transferType: Int ) {
        self.init( space: _space, bits: _bits, colorMaskArray: _colorMaskArray, alphaMask: _alphaMask, isAlphaPremultiplied: _isAlphaPremultiplied, trans: _trans, transferType: _transferType )
    }

    /// public java.awt.image.PackedColorModel(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( space: ColorSpace?, bits: Int, rmask: Int, gmask: Int, bmask: Int, amask: Int, isAlphaPremultiplied: Bool, trans: Int, transferType: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: space, locals: &__locals )
        __args[1] = JNIType.toJava( value: bits, locals: &__locals )
        __args[2] = JNIType.toJava( value: rmask, locals: &__locals )
        __args[3] = JNIType.toJava( value: gmask, locals: &__locals )
        __args[4] = JNIType.toJava( value: bmask, locals: &__locals )
        __args[5] = JNIType.toJava( value: amask, locals: &__locals )
        __args[6] = JNIType.toJava( value: isAlphaPremultiplied, locals: &__locals )
        __args[7] = JNIType.toJava( value: trans, locals: &__locals )
        __args[8] = JNIType.toJava( value: transferType, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/PackedColorModel", classCache: &PackedColorModel.PackedColorModelJNIClass, methodSig: "(Ljava/awt/color/ColorSpace;IIIIIZII)V", methodCache: &PackedColorModel.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _space: ColorSpace?, _ _bits: Int, _ _rmask: Int, _ _gmask: Int, _ _bmask: Int, _ _amask: Int, _ _isAlphaPremultiplied: Bool, _ _trans: Int, _ _transferType: Int ) {
        self.init( space: _space, bits: _bits, rmask: _rmask, gmask: _gmask, bmask: _bmask, amask: _amask, isAlphaPremultiplied: _isAlphaPremultiplied, trans: _trans, transferType: _transferType )
    }

    /// public boolean java.awt.image.PackedColorModel.equals(java.lang.Object)

    private static var equals_MethodID_3: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &PackedColorModel.equals_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public java.awt.image.SampleModel java.awt.image.PackedColorModel.createCompatibleSampleModel(int,int)

    private static var createCompatibleSampleModel_MethodID_4: jmethodID?

    open func createCompatibleSampleModel( w: Int, h: Int ) -> SampleModel! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: w, locals: &__locals )
        __args[1] = JNIType.toJava( value: h, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleSampleModel", methodSig: "(II)Ljava/awt/image/SampleModel;", methodCache: &PackedColorModel.createCompatibleSampleModel_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SampleModel( javaObject: __return ) : nil
    }

    override open func createCompatibleSampleModel( _ _w: Int, _ _h: Int ) -> SampleModel! {
        return createCompatibleSampleModel( w: _w, h: _h )
    }

    /// public boolean java.awt.image.PackedColorModel.isCompatibleSampleModel(java.awt.image.SampleModel)

    private static var isCompatibleSampleModel_MethodID_5: jmethodID?

    open func isCompatibleSampleModel( sm: SampleModel? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: sm, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isCompatibleSampleModel", methodSig: "(Ljava/awt/image/SampleModel;)Z", methodCache: &PackedColorModel.isCompatibleSampleModel_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func isCompatibleSampleModel( _ _sm: SampleModel? ) -> Bool {
        return isCompatibleSampleModel( sm: _sm )
    }

    /// public java.awt.image.WritableRaster java.awt.image.PackedColorModel.getAlphaRaster(java.awt.image.WritableRaster)

    private static var getAlphaRaster_MethodID_6: jmethodID?

    open func getAlphaRaster( raster: WritableRaster? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: raster, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAlphaRaster", methodSig: "(Ljava/awt/image/WritableRaster;)Ljava/awt/image/WritableRaster;", methodCache: &PackedColorModel.getAlphaRaster_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    override open func getAlphaRaster( _ _raster: WritableRaster? ) -> WritableRaster! {
        return getAlphaRaster( raster: _raster )
    }

    /// public final int[] java.awt.image.PackedColorModel.getMasks()

    private static var getMasks_MethodID_7: jmethodID?

    open func getMasks() -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMasks", methodSig: "()[I", methodCache: &PackedColorModel.getMasks_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Int32](), from: __return )
    }


    /// private void java.awt.image.PackedColorModel.DecomposeMask(int,int,java.lang.String)

    /// private static final int[] java.awt.image.PackedColorModel.createBitsArray(int,int,int,int)

    /// private static final int[] java.awt.image.PackedColorModel.createBitsArray(int[],int)

    /// private static final int java.awt.image.PackedColorModel.countBits(int)

    /// public final int java.awt.image.PackedColorModel.getMask(int)

    private static var getMask_MethodID_8: jmethodID?

    open func getMask( index: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: index, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMask", methodSig: "(I)I", methodCache: &PackedColorModel.getMask_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open func getMask( _ _index: Int ) -> Int {
        return getMask( index: _index )
    }

}

