
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:09 GMT 2016 ///

/// class java.awt.image.BufferedImageFilter ///

open class BufferedImageFilter: ImageFilter {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.BufferedImageFilter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BufferedImageFilterJNIClass: jclass?

    /// java.awt.image.BufferedImageOp java.awt.image.BufferedImageFilter.bufferedImageOp

    /// java.awt.image.ColorModel java.awt.image.BufferedImageFilter.model

    /// int java.awt.image.BufferedImageFilter.width

    /// int java.awt.image.BufferedImageFilter.height

    /// byte[] java.awt.image.BufferedImageFilter.bytePixels

    /// int[] java.awt.image.BufferedImageFilter.intPixels

    /// protected java.awt.image.ImageConsumer java.awt.image.ImageFilter.consumer

    private static var consumer_FieldID: jfieldID?

    override open var consumer: ImageConsumer! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "consumer", fieldType: "Ljava/awt/image/ImageConsumer;", fieldCache: &BufferedImageFilter.consumer_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? ImageConsumerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( l: newValue?.localJavaObject( &__locals ) )
            JNIField.SetObjectField( fieldName: "consumer", fieldType: "Ljava/awt/image/ImageConsumer;", fieldCache: &BufferedImageFilter.consumer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public static final int java.awt.image.ImageConsumer.RANDOMPIXELORDER

    /// public static final int java.awt.image.ImageConsumer.TOPDOWNLEFTRIGHT

    /// public static final int java.awt.image.ImageConsumer.COMPLETESCANLINES

    /// public static final int java.awt.image.ImageConsumer.SINGLEPASS

    /// public static final int java.awt.image.ImageConsumer.SINGLEFRAME

    /// public static final int java.awt.image.ImageConsumer.IMAGEERROR

    /// public static final int java.awt.image.ImageConsumer.SINGLEFRAMEDONE

    /// public static final int java.awt.image.ImageConsumer.STATICIMAGEDONE

    /// public static final int java.awt.image.ImageConsumer.IMAGEABORTED

    /// public java.awt.image.BufferedImageFilter(java.awt.image.BufferedImageOp)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: BufferedImageOp? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/awt/image/BufferedImageFilter", classCache: &BufferedImageFilter.BufferedImageFilterJNIClass, methodSig: "(Ljava/awt/image/BufferedImageOp;)V", methodCache: &BufferedImageFilter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: BufferedImageOp? ) {
        self.init( arg0: _arg0 )
    }

    /// public void java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)

    /// public void java.awt.image.BufferedImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)

    /// public java.awt.image.BufferedImageOp java.awt.image.BufferedImageFilter.getBufferedImageOp()

    private static var getBufferedImageOp_MethodID_2: jmethodID?

    open func getBufferedImageOp() -> BufferedImageOp! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBufferedImageOp", methodSig: "()Ljava/awt/image/BufferedImageOp;", methodCache: &BufferedImageFilter.getBufferedImageOp_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BufferedImageOpForward( javaObject: __return ) : nil
    }


    /// public void java.awt.image.BufferedImageFilter.setDimensions(int,int)

    /// public void java.awt.image.BufferedImageFilter.setColorModel(java.awt.image.ColorModel)

    /// private void java.awt.image.BufferedImageFilter.convertToRGB()

    /// public void java.awt.image.BufferedImageFilter.imageComplete(int)

    /// private final java.awt.image.WritableRaster java.awt.image.BufferedImageFilter.createDCMraster()

}
