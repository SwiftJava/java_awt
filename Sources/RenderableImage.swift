
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:12 GMT 2016 ///

/// interface java.awt.image.renderable.RenderableImage ///

public protocol RenderableImage: JavaProtocol {

    /// public static final java.lang.String java.awt.image.renderable.RenderableImage.HINTS_OBSERVED

    static var HINTS_OBSERVED: String! { get }

    /// public abstract java.lang.Object java.awt.image.renderable.RenderableImage.getProperty(java.lang.String)

    func getProperty( arg0: String? ) -> java_lang.JavaObject!
    func getProperty( _ _arg0: String? ) -> java_lang.JavaObject!

    /// public abstract float java.awt.image.renderable.RenderableImage.getWidth()

    func getWidth() -> Float

    /// public abstract float java.awt.image.renderable.RenderableImage.getHeight()

    func getHeight() -> Float

    /// public abstract float java.awt.image.renderable.RenderableImage.getMinX()

    func getMinX() -> Float

    /// public abstract float java.awt.image.renderable.RenderableImage.getMinY()

    func getMinY() -> Float

    /// public abstract java.util.Vector java.awt.image.renderable.RenderableImage.getSources()

    func getSources() -> java_util.Vector!

    /// public abstract java.lang.String[] java.awt.image.renderable.RenderableImage.getPropertyNames()

    func getPropertyNames() -> [String]!

    /// public abstract boolean java.awt.image.renderable.RenderableImage.isDynamic()

    func isDynamic() -> Bool

    /// public abstract java.awt.image.RenderedImage java.awt.image.renderable.RenderableImage.createScaledRendering(int,int,java.awt.RenderingHints)

    func createScaledRendering( arg0: Int, arg1: Int, arg2: RenderingHints? ) -> RenderedImage!
    func createScaledRendering( _ _arg0: Int, _ _arg1: Int, _ _arg2: RenderingHints? ) -> RenderedImage!

    /// public abstract java.awt.image.RenderedImage java.awt.image.renderable.RenderableImage.createDefaultRendering()

    func createDefaultRendering() -> RenderedImage!

    /// public abstract java.awt.image.RenderedImage java.awt.image.renderable.RenderableImage.createRendering(java.awt.image.renderable.RenderContext)

    func createRendering( arg0: RenderContext? ) -> RenderedImage!
    func createRendering( _ _arg0: RenderContext? ) -> RenderedImage!

}

open class RenderableImageForward: JNIObjectForward, RenderableImage {

    private static var RenderableImageJNIClass: jclass?

    /// public static final java.lang.String java.awt.image.renderable.RenderableImage.HINTS_OBSERVED

    private static var HINTS_OBSERVED_FieldID: jfieldID?

    open static var HINTS_OBSERVED: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "HINTS_OBSERVED", fieldType: "Ljava/lang/String;", fieldCache: &HINTS_OBSERVED_FieldID, className: "java/awt/image/renderable/RenderableImage", classCache: &RenderableImageJNIClass )
            return JNIType.decode( type: String(), from: __value )
        }
    }

    /// public abstract java.lang.Object java.awt.image.renderable.RenderableImage.getProperty(java.lang.String)

    private static var getProperty_MethodID_12: jmethodID?

    open func getProperty( arg0: String? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getProperty", methodSig: "(Ljava/lang/String;)Ljava/lang/Object;", methodCache: &RenderableImageForward.getProperty_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getProperty( _ _arg0: String? ) -> java_lang.JavaObject! {
        return getProperty( arg0: _arg0 )
    }

    /// public abstract float java.awt.image.renderable.RenderableImage.getWidth()

    private static var getWidth_MethodID_13: jmethodID?

    open func getWidth() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getWidth", methodSig: "()F", methodCache: &RenderableImageForward.getWidth_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public abstract float java.awt.image.renderable.RenderableImage.getHeight()

    private static var getHeight_MethodID_14: jmethodID?

    open func getHeight() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getHeight", methodSig: "()F", methodCache: &RenderableImageForward.getHeight_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public abstract float java.awt.image.renderable.RenderableImage.getMinX()

    private static var getMinX_MethodID_15: jmethodID?

    open func getMinX() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getMinX", methodSig: "()F", methodCache: &RenderableImageForward.getMinX_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public abstract float java.awt.image.renderable.RenderableImage.getMinY()

    private static var getMinY_MethodID_16: jmethodID?

    open func getMinY() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getMinY", methodSig: "()F", methodCache: &RenderableImageForward.getMinY_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public abstract java.util.Vector java.awt.image.renderable.RenderableImage.getSources()

    private static var getSources_MethodID_17: jmethodID?

    open func getSources() -> java_util.Vector! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSources", methodSig: "()Ljava/util/Vector;", methodCache: &RenderableImageForward.getSources_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.Vector( javaObject: __return ) : nil
    }


    /// public abstract java.lang.String[] java.awt.image.renderable.RenderableImage.getPropertyNames()

    private static var getPropertyNames_MethodID_18: jmethodID?

    open func getPropertyNames() -> [String]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPropertyNames", methodSig: "()[Ljava/lang/String;", methodCache: &RenderableImageForward.getPropertyNames_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: [String](), from: __return )
    }


    /// public abstract boolean java.awt.image.renderable.RenderableImage.isDynamic()

    private static var isDynamic_MethodID_19: jmethodID?

    open func isDynamic() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDynamic", methodSig: "()Z", methodCache: &RenderableImageForward.isDynamic_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract java.awt.image.RenderedImage java.awt.image.renderable.RenderableImage.createScaledRendering(int,int,java.awt.RenderingHints)

    private static var createScaledRendering_MethodID_20: jmethodID?

    open func createScaledRendering( arg0: Int, arg1: Int, arg2: RenderingHints? ) -> RenderedImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createScaledRendering", methodSig: "(IILjava/awt/RenderingHints;)Ljava/awt/image/RenderedImage;", methodCache: &RenderableImageForward.createScaledRendering_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? RenderedImageForward( javaObject: __return ) : nil
    }

    open func createScaledRendering( _ _arg0: Int, _ _arg1: Int, _ _arg2: RenderingHints? ) -> RenderedImage! {
        return createScaledRendering( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.awt.image.RenderedImage java.awt.image.renderable.RenderableImage.createDefaultRendering()

    private static var createDefaultRendering_MethodID_21: jmethodID?

    open func createDefaultRendering() -> RenderedImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDefaultRendering", methodSig: "()Ljava/awt/image/RenderedImage;", methodCache: &RenderableImageForward.createDefaultRendering_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? RenderedImageForward( javaObject: __return ) : nil
    }


    /// public abstract java.awt.image.RenderedImage java.awt.image.renderable.RenderableImage.createRendering(java.awt.image.renderable.RenderContext)

    private static var createRendering_MethodID_22: jmethodID?

    open func createRendering( arg0: RenderContext? ) -> RenderedImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createRendering", methodSig: "(Ljava/awt/image/renderable/RenderContext;)Ljava/awt/image/RenderedImage;", methodCache: &RenderableImageForward.createRendering_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? RenderedImageForward( javaObject: __return ) : nil
    }

    open func createRendering( _ _arg0: RenderContext? ) -> RenderedImage! {
        return createRendering( arg0: _arg0 )
    }

}


