
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:32 GMT 2016 ///

/// class java.awt.image.Raster ///

open class Raster: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.Raster", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RasterJNIClass: jclass?

    /// protected java.awt.image.SampleModel java.awt.image.Raster.sampleModel

    private static var sampleModel_FieldID: jfieldID?

    open var sampleModel: SampleModel! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "sampleModel", fieldType: "Ljava/awt/image/SampleModel;", fieldCache: &Raster.sampleModel_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? SampleModel( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "sampleModel", fieldType: "Ljava/awt/image/SampleModel;", fieldCache: &Raster.sampleModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.image.DataBuffer java.awt.image.Raster.dataBuffer

    private static var dataBuffer_FieldID: jfieldID?

    open var dataBuffer: DataBuffer! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "dataBuffer", fieldType: "Ljava/awt/image/DataBuffer;", fieldCache: &Raster.dataBuffer_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? DataBuffer( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "dataBuffer", fieldType: "Ljava/awt/image/DataBuffer;", fieldCache: &Raster.dataBuffer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.minX

    private static var minX_FieldID: jfieldID?

    open var minX: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "minX", fieldType: "I", fieldCache: &Raster.minX_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "minX", fieldType: "I", fieldCache: &Raster.minX_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.minY

    private static var minY_FieldID: jfieldID?

    open var minY: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "minY", fieldType: "I", fieldCache: &Raster.minY_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "minY", fieldType: "I", fieldCache: &Raster.minY_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.width

    private static var width_FieldID: jfieldID?

    open var width: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "width", fieldType: "I", fieldCache: &Raster.width_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "width", fieldType: "I", fieldCache: &Raster.width_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.height

    private static var height_FieldID: jfieldID?

    open var height: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "height", fieldType: "I", fieldCache: &Raster.height_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "height", fieldType: "I", fieldCache: &Raster.height_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.sampleModelTranslateX

    private static var sampleModelTranslateX_FieldID: jfieldID?

    open var sampleModelTranslateX: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "sampleModelTranslateX", fieldType: "I", fieldCache: &Raster.sampleModelTranslateX_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "sampleModelTranslateX", fieldType: "I", fieldCache: &Raster.sampleModelTranslateX_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.sampleModelTranslateY

    private static var sampleModelTranslateY_FieldID: jfieldID?

    open var sampleModelTranslateY: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "sampleModelTranslateY", fieldType: "I", fieldCache: &Raster.sampleModelTranslateY_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "sampleModelTranslateY", fieldType: "I", fieldCache: &Raster.sampleModelTranslateY_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.numBands

    private static var numBands_FieldID: jfieldID?

    open var numBands: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &Raster.numBands_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &Raster.numBands_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.numDataElements

    private static var numDataElements_FieldID: jfieldID?

    open var numDataElements: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numDataElements", fieldType: "I", fieldCache: &Raster.numDataElements_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numDataElements", fieldType: "I", fieldCache: &Raster.numDataElements_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.awt.image.Raster java.awt.image.Raster.parent

    private static var parent_FieldID: jfieldID?

    open var parent: Raster! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "parent", fieldType: "Ljava/awt/image/Raster;", fieldCache: &Raster.parent_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? Raster( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "parent", fieldType: "Ljava/awt/image/Raster;", fieldCache: &Raster.parent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.image.Raster(java.awt.image.SampleModel,java.awt.Point)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: SampleModel?, arg1: Point? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/Raster", classCache: &Raster.RasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/Point;)V", methodCache: &Raster.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SampleModel?, _ _arg1: Point? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// protected java.awt.image.Raster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Rectangle,java.awt.Point,java.awt.image.Raster)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: SampleModel?, arg1: DataBuffer?, arg2: Rectangle?, arg3: Point?, arg4: Raster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/Raster", classCache: &Raster.RasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Rectangle;Ljava/awt/Point;Ljava/awt/image/Raster;)V", methodCache: &Raster.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SampleModel?, _ _arg1: DataBuffer?, _ _arg2: Rectangle?, _ _arg3: Point?, _ _arg4: Raster? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// protected java.awt.image.Raster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: SampleModel?, arg1: DataBuffer?, arg2: Point? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/Raster", classCache: &Raster.RasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Point;)V", methodCache: &Raster.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SampleModel?, _ _arg1: DataBuffer?, _ _arg2: Point? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.image.Raster java.awt.image.Raster.getParent()

    private static var getParent_MethodID_4: jmethodID?

    open func getParent() -> Raster! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParent", methodSig: "()Ljava/awt/image/Raster;", methodCache: &Raster.getParent_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Raster( javaObject: __return ) : nil
    }


    /// private static native void java.awt.image.Raster.initIDs()

    /// public java.awt.Rectangle java.awt.image.Raster.getBounds()

    private static var getBounds_MethodID_5: jmethodID?

    open func getBounds() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &Raster.getBounds_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


    /// public final int java.awt.image.Raster.getWidth()

    private static var getWidth_MethodID_6: jmethodID?

    open func getWidth() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getWidth", methodSig: "()I", methodCache: &Raster.getWidth_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final int java.awt.image.Raster.getHeight()

    private static var getHeight_MethodID_7: jmethodID?

    open func getHeight() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getHeight", methodSig: "()I", methodCache: &Raster.getHeight_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.awt.image.DataBuffer java.awt.image.Raster.getDataBuffer()

    private static var getDataBuffer_MethodID_8: jmethodID?

    open func getDataBuffer() -> DataBuffer! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDataBuffer", methodSig: "()Ljava/awt/image/DataBuffer;", methodCache: &Raster.getDataBuffer_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DataBuffer( javaObject: __return ) : nil
    }


    /// public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster()

    private static var createCompatibleWritableRaster_MethodID_9: jmethodID?

    open func createCompatibleWritableRaster() -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleWritableRaster", methodSig: "()Ljava/awt/image/WritableRaster;", methodCache: &Raster.createCompatibleWritableRaster_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }


    /// public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster(int,int,int,int)

    private static var createCompatibleWritableRaster_MethodID_10: jmethodID?

    open func createCompatibleWritableRaster( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleWritableRaster", methodSig: "(IIII)Ljava/awt/image/WritableRaster;", methodCache: &Raster.createCompatibleWritableRaster_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createCompatibleWritableRaster( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) -> WritableRaster! {
        return createCompatibleWritableRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster(java.awt.Rectangle)

    private static var createCompatibleWritableRaster_MethodID_11: jmethodID?

    open func createCompatibleWritableRaster( arg0: Rectangle? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleWritableRaster", methodSig: "(Ljava/awt/Rectangle;)Ljava/awt/image/WritableRaster;", methodCache: &Raster.createCompatibleWritableRaster_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createCompatibleWritableRaster( _ _arg0: Rectangle? ) -> WritableRaster! {
        return createCompatibleWritableRaster( arg0: _arg0 )
    }

    /// public java.awt.image.WritableRaster java.awt.image.Raster.createCompatibleWritableRaster(int,int)

    private static var createCompatibleWritableRaster_MethodID_12: jmethodID?

    open func createCompatibleWritableRaster( arg0: Int, arg1: Int ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleWritableRaster", methodSig: "(II)Ljava/awt/image/WritableRaster;", methodCache: &Raster.createCompatibleWritableRaster_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createCompatibleWritableRaster( _ _arg0: Int, _ _arg1: Int ) -> WritableRaster! {
        return createCompatibleWritableRaster( arg0: _arg0, arg1: _arg1 )
    }

    /// public final int java.awt.image.Raster.getTransferType()

    private static var getTransferType_MethodID_13: jmethodID?

    open func getTransferType() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTransferType", methodSig: "()I", methodCache: &Raster.getTransferType_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.lang.Object java.awt.image.Raster.getDataElements(int,int,java.lang.Object)

    private static var getDataElements_MethodID_14: jmethodID?

    open func getDataElements( arg0: Int, arg1: Int, arg2: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDataElements", methodSig: "(IILjava/lang/Object;)Ljava/lang/Object;", methodCache: &Raster.getDataElements_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return getDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.lang.Object java.awt.image.Raster.getDataElements(int,int,int,int,java.lang.Object)

    private static var getDataElements_MethodID_15: jmethodID?

    open func getDataElements( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDataElements", methodSig: "(IIIILjava/lang/Object;)Ljava/lang/Object;", methodCache: &Raster.getDataElements_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: java_lang.JavaObject? ) -> java_lang.JavaObject! {
        return getDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public final int java.awt.image.Raster.getMinX()

    private static var getMinX_MethodID_16: jmethodID?

    open func getMinX() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMinX", methodSig: "()I", methodCache: &Raster.getMinX_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final int java.awt.image.Raster.getMinY()

    private static var getMinY_MethodID_17: jmethodID?

    open func getMinY() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMinY", methodSig: "()I", methodCache: &Raster.getMinY_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createInterleavedRaster(int,int,int,int,java.awt.Point)

    private static var createInterleavedRaster_MethodID_18: jmethodID?

    open class func createInterleavedRaster( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createInterleavedRaster", methodSig: "(IIIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createInterleavedRaster_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createInterleavedRaster( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Point? ) -> WritableRaster! {
        return createInterleavedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createInterleavedRaster(java.awt.image.DataBuffer,int,int,int,int,int[],java.awt.Point)

    private static var createInterleavedRaster_MethodID_19: jmethodID?

    open class func createInterleavedRaster( arg0: DataBuffer?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]?, arg6: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createInterleavedRaster", methodSig: "(Ljava/awt/image/DataBuffer;IIII[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createInterleavedRaster_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createInterleavedRaster( _ _arg0: DataBuffer?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]?, _ _arg6: Point? ) -> WritableRaster! {
        return createInterleavedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createInterleavedRaster(int,int,int,int,int,int[],java.awt.Point)

    private static var createInterleavedRaster_MethodID_20: jmethodID?

    open class func createInterleavedRaster( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]?, arg6: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createInterleavedRaster", methodSig: "(IIIII[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createInterleavedRaster_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createInterleavedRaster( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]?, _ _arg6: Point? ) -> WritableRaster! {
        return createInterleavedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createBandedRaster(int,int,int,int,int[],int[],java.awt.Point)

    private static var createBandedRaster_MethodID_21: jmethodID?

    open class func createBandedRaster( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Int32]?, arg5: [Int32]?, arg6: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createBandedRaster", methodSig: "(IIII[I[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createBandedRaster_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createBandedRaster( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Int32]?, _ _arg5: [Int32]?, _ _arg6: Point? ) -> WritableRaster! {
        return createBandedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createBandedRaster(java.awt.image.DataBuffer,int,int,int,int[],int[],java.awt.Point)

    private static var createBandedRaster_MethodID_22: jmethodID?

    open class func createBandedRaster( arg0: DataBuffer?, arg1: Int, arg2: Int, arg3: Int, arg4: [Int32]?, arg5: [Int32]?, arg6: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createBandedRaster", methodSig: "(Ljava/awt/image/DataBuffer;III[I[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createBandedRaster_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createBandedRaster( _ _arg0: DataBuffer?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Int32]?, _ _arg5: [Int32]?, _ _arg6: Point? ) -> WritableRaster! {
        return createBandedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createBandedRaster(int,int,int,int,java.awt.Point)

    private static var createBandedRaster_MethodID_23: jmethodID?

    open class func createBandedRaster( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createBandedRaster", methodSig: "(IIIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createBandedRaster_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createBandedRaster( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Point? ) -> WritableRaster! {
        return createBandedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(int,int,int,int[],java.awt.Point)

    private static var createPackedRaster_MethodID_24: jmethodID?

    open class func createPackedRaster( arg0: Int, arg1: Int, arg2: Int, arg3: [Int32]?, arg4: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createPackedRaster", methodSig: "(III[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createPackedRaster_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createPackedRaster( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: [Int32]?, _ _arg4: Point? ) -> WritableRaster! {
        return createPackedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(int,int,int,int,int,java.awt.Point)

    private static var createPackedRaster_MethodID_25: jmethodID?

    open class func createPackedRaster( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createPackedRaster", methodSig: "(IIIIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createPackedRaster_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createPackedRaster( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Point? ) -> WritableRaster! {
        return createPackedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,int,int,int,int[],java.awt.Point)

    private static var createPackedRaster_MethodID_26: jmethodID?

    open class func createPackedRaster( arg0: DataBuffer?, arg1: Int, arg2: Int, arg3: Int, arg4: [Int32]?, arg5: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createPackedRaster", methodSig: "(Ljava/awt/image/DataBuffer;III[ILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createPackedRaster_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createPackedRaster( _ _arg0: DataBuffer?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Int32]?, _ _arg5: Point? ) -> WritableRaster! {
        return createPackedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createPackedRaster(java.awt.image.DataBuffer,int,int,int,java.awt.Point)

    private static var createPackedRaster_MethodID_27: jmethodID?

    open class func createPackedRaster( arg0: DataBuffer?, arg1: Int, arg2: Int, arg3: Int, arg4: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createPackedRaster", methodSig: "(Ljava/awt/image/DataBuffer;IIILjava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createPackedRaster_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createPackedRaster( _ _arg0: DataBuffer?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Point? ) -> WritableRaster! {
        return createPackedRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public static java.awt.image.Raster java.awt.image.Raster.createRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)

    private static var createRaster_MethodID_28: jmethodID?

    open class func createRaster( arg0: SampleModel?, arg1: DataBuffer?, arg2: Point? ) -> Raster! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createRaster", methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Point;)Ljava/awt/image/Raster;", methodCache: &createRaster_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Raster( javaObject: __return ) : nil
    }

    open class func createRaster( _ _arg0: SampleModel?, _ _arg1: DataBuffer?, _ _arg2: Point? ) -> Raster! {
        return createRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.Point)

    private static var createWritableRaster_MethodID_29: jmethodID?

    open class func createWritableRaster( arg0: SampleModel?, arg1: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createWritableRaster", methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createWritableRaster_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createWritableRaster( _ _arg0: SampleModel?, _ _arg1: Point? ) -> WritableRaster! {
        return createWritableRaster( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.image.WritableRaster java.awt.image.Raster.createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)

    private static var createWritableRaster_MethodID_30: jmethodID?

    open class func createWritableRaster( arg0: SampleModel?, arg1: DataBuffer?, arg2: Point? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/image/Raster", classCache: &RasterJNIClass, methodName: "createWritableRaster", methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Point;)Ljava/awt/image/WritableRaster;", methodCache: &createWritableRaster_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open class func createWritableRaster( _ _arg0: SampleModel?, _ _arg1: DataBuffer?, _ _arg2: Point? ) -> WritableRaster! {
        return createWritableRaster( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public final int java.awt.image.Raster.getSampleModelTranslateX()

    private static var getSampleModelTranslateX_MethodID_31: jmethodID?

    open func getSampleModelTranslateX() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSampleModelTranslateX", methodSig: "()I", methodCache: &Raster.getSampleModelTranslateX_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final int java.awt.image.Raster.getSampleModelTranslateY()

    private static var getSampleModelTranslateY_MethodID_32: jmethodID?

    open func getSampleModelTranslateY() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSampleModelTranslateY", methodSig: "()I", methodCache: &Raster.getSampleModelTranslateY_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.awt.image.Raster java.awt.image.Raster.createTranslatedChild(int,int)

    private static var createTranslatedChild_MethodID_33: jmethodID?

    open func createTranslatedChild( arg0: Int, arg1: Int ) -> Raster! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createTranslatedChild", methodSig: "(II)Ljava/awt/image/Raster;", methodCache: &Raster.createTranslatedChild_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Raster( javaObject: __return ) : nil
    }

    open func createTranslatedChild( _ _arg0: Int, _ _arg1: Int ) -> Raster! {
        return createTranslatedChild( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.image.Raster java.awt.image.Raster.createChild(int,int,int,int,int,int,int[])

    private static var createChild_MethodID_34: jmethodID?

    open func createChild( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: [Int32]? ) -> Raster! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createChild", methodSig: "(IIIIII[I)Ljava/awt/image/Raster;", methodCache: &Raster.createChild_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Raster( javaObject: __return ) : nil
    }

    open func createChild( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: [Int32]? ) -> Raster! {
        return createChild( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public final int java.awt.image.Raster.getNumBands()

    private static var getNumBands_MethodID_35: jmethodID?

    open func getNumBands() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumBands", methodSig: "()I", methodCache: &Raster.getNumBands_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final int java.awt.image.Raster.getNumDataElements()

    private static var getNumDataElements_MethodID_36: jmethodID?

    open func getNumDataElements() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumDataElements", methodSig: "()I", methodCache: &Raster.getNumDataElements_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.awt.image.SampleModel java.awt.image.Raster.getSampleModel()

    private static var getSampleModel_MethodID_37: jmethodID?

    open func getSampleModel() -> SampleModel! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSampleModel", methodSig: "()Ljava/awt/image/SampleModel;", methodCache: &Raster.getSampleModel_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SampleModel( javaObject: __return ) : nil
    }


    /// public float[] java.awt.image.Raster.getPixel(int,int,float[])

    private static var getPixel_MethodID_38: jmethodID?

    open func getPixel( arg0: Int, arg1: Int, arg2: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixel", methodSig: "(II[F)[F", methodCache: &Raster.getPixel_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Float]? ) -> [Float]! {
        return getPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public double[] java.awt.image.Raster.getPixel(int,int,double[])

    private static var getPixel_MethodID_39: jmethodID?

    open func getPixel( arg0: Int, arg1: Int, arg2: [Double]? ) -> [Double]! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixel", methodSig: "(II[D)[D", methodCache: &Raster.getPixel_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Double](), from: __return )
    }

    open func getPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Double]? ) -> [Double]! {
        return getPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public int[] java.awt.image.Raster.getPixel(int,int,int[])

    private static var getPixel_MethodID_40: jmethodID?

    open func getPixel( arg0: Int, arg1: Int, arg2: [Int32]? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixel", methodSig: "(II[I)[I", methodCache: &Raster.getPixel_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Int32]? ) -> [Int32]! {
        return getPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public float[] java.awt.image.Raster.getPixels(int,int,int,int,float[])

    private static var getPixels_MethodID_41: jmethodID?

    open func getPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixels", methodSig: "(IIII[F)[F", methodCache: &Raster.getPixels_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Float]? ) -> [Float]! {
        return getPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public double[] java.awt.image.Raster.getPixels(int,int,int,int,double[])

    private static var getPixels_MethodID_42: jmethodID?

    open func getPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Double]? ) -> [Double]! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixels", methodSig: "(IIII[D)[D", methodCache: &Raster.getPixels_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Double](), from: __return )
    }

    open func getPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Double]? ) -> [Double]! {
        return getPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public int[] java.awt.image.Raster.getPixels(int,int,int,int,int[])

    private static var getPixels_MethodID_43: jmethodID?

    open func getPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Int32]? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixels", methodSig: "(IIII[I)[I", methodCache: &Raster.getPixels_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Int32]? ) -> [Int32]! {
        return getPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public int java.awt.image.Raster.getSample(int,int,int)

    private static var getSample_MethodID_44: jmethodID?

    open func getSample( arg0: Int, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSample", methodSig: "(III)I", methodCache: &Raster.getSample_MethodID_44, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return getSample( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public float java.awt.image.Raster.getSampleFloat(int,int,int)

    private static var getSampleFloat_MethodID_45: jmethodID?

    open func getSampleFloat( arg0: Int, arg1: Int, arg2: Int ) -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getSampleFloat", methodSig: "(III)F", methodCache: &Raster.getSampleFloat_MethodID_45, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }

    open func getSampleFloat( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) -> Float {
        return getSampleFloat( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public double java.awt.image.Raster.getSampleDouble(int,int,int)

    private static var getSampleDouble_MethodID_46: jmethodID?

    open func getSampleDouble( arg0: Int, arg1: Int, arg2: Int ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getSampleDouble", methodSig: "(III)D", methodCache: &Raster.getSampleDouble_MethodID_46, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open func getSampleDouble( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) -> Double {
        return getSampleDouble( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public int[] java.awt.image.Raster.getSamples(int,int,int,int,int,int[])

    private static var getSamples_MethodID_47: jmethodID?

    open func getSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSamples", methodSig: "(IIIII[I)[I", methodCache: &Raster.getSamples_MethodID_47, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]? ) -> [Int32]! {
        return getSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public float[] java.awt.image.Raster.getSamples(int,int,int,int,int,float[])

    private static var getSamples_MethodID_48: jmethodID?

    open func getSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSamples", methodSig: "(IIIII[F)[F", methodCache: &Raster.getSamples_MethodID_48, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Float]? ) -> [Float]! {
        return getSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public double[] java.awt.image.Raster.getSamples(int,int,int,int,int,double[])

    private static var getSamples_MethodID_49: jmethodID?

    open func getSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Double]? ) -> [Double]! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSamples", methodSig: "(IIIII[D)[D", methodCache: &Raster.getSamples_MethodID_49, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Double](), from: __return )
    }

    open func getSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Double]? ) -> [Double]! {
        return getSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

}
