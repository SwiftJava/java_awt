
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:28 GMT 2016 ///

/// class java.awt.font.GlyphVector ///

open class GlyphVector: java_lang.JavaObject, java_lang.Cloneable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.font.GlyphVector", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var GlyphVectorJNIClass: jclass?

    /// public static final int java.awt.font.GlyphVector.FLAG_HAS_TRANSFORMS

    private static var FLAG_HAS_TRANSFORMS_FieldID: jfieldID?

    open static var FLAG_HAS_TRANSFORMS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FLAG_HAS_TRANSFORMS", fieldType: "I", fieldCache: &FLAG_HAS_TRANSFORMS_FieldID, className: "java/awt/font/GlyphVector", classCache: &GlyphVectorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.GlyphVector.FLAG_HAS_POSITION_ADJUSTMENTS

    private static var FLAG_HAS_POSITION_ADJUSTMENTS_FieldID: jfieldID?

    open static var FLAG_HAS_POSITION_ADJUSTMENTS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FLAG_HAS_POSITION_ADJUSTMENTS", fieldType: "I", fieldCache: &FLAG_HAS_POSITION_ADJUSTMENTS_FieldID, className: "java/awt/font/GlyphVector", classCache: &GlyphVectorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.GlyphVector.FLAG_RUN_RTL

    private static var FLAG_RUN_RTL_FieldID: jfieldID?

    open static var FLAG_RUN_RTL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FLAG_RUN_RTL", fieldType: "I", fieldCache: &FLAG_RUN_RTL_FieldID, className: "java/awt/font/GlyphVector", classCache: &GlyphVectorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.GlyphVector.FLAG_COMPLEX_GLYPHS

    private static var FLAG_COMPLEX_GLYPHS_FieldID: jfieldID?

    open static var FLAG_COMPLEX_GLYPHS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FLAG_COMPLEX_GLYPHS", fieldType: "I", fieldCache: &FLAG_COMPLEX_GLYPHS_FieldID, className: "java/awt/font/GlyphVector", classCache: &GlyphVectorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.GlyphVector.FLAG_MASK

    private static var FLAG_MASK_FieldID: jfieldID?

    open static var FLAG_MASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FLAG_MASK", fieldType: "I", fieldCache: &FLAG_MASK_FieldID, className: "java/awt/font/GlyphVector", classCache: &GlyphVectorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public java.awt.font.GlyphVector()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/font/GlyphVector", classCache: &GlyphVector.GlyphVectorJNIClass, methodSig: "()V", methodCache: &GlyphVector.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public abstract boolean java.awt.font.GlyphVector.equals(java.awt.font.GlyphVector)

    private static var equals_MethodID_2: jmethodID?

    open func equals( arg0: GlyphVector? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/awt/font/GlyphVector;)Z", methodCache: &GlyphVector.equals_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func equals( _ _arg0: GlyphVector? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public abstract java.awt.Font java.awt.font.GlyphVector.getFont()

    private static var getFont_MethodID_3: jmethodID?

    open func getFont() -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFont", methodSig: "()Ljava/awt/Font;", methodCache: &GlyphVector.getFont_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }


    /// public abstract java.awt.font.FontRenderContext java.awt.font.GlyphVector.getFontRenderContext()

    private static var getFontRenderContext_MethodID_4: jmethodID?

    open func getFontRenderContext() -> FontRenderContext! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontRenderContext", methodSig: "()Ljava/awt/font/FontRenderContext;", methodCache: &GlyphVector.getFontRenderContext_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FontRenderContext( javaObject: __return ) : nil
    }


    /// public abstract int java.awt.font.GlyphVector.getNumGlyphs()

    private static var getNumGlyphs_MethodID_5: jmethodID?

    open func getNumGlyphs() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumGlyphs", methodSig: "()I", methodCache: &GlyphVector.getNumGlyphs_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.awt.geom.Rectangle2D java.awt.font.GlyphVector.getLogicalBounds()

    private static var getLogicalBounds_MethodID_6: jmethodID?

    open func getLogicalBounds() -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLogicalBounds", methodSig: "()Ljava/awt/geom/Rectangle2D;", methodCache: &GlyphVector.getLogicalBounds_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }


    /// public java.awt.Rectangle java.awt.font.GlyphVector.getPixelBounds(java.awt.font.FontRenderContext,float,float)

    private static var getPixelBounds_MethodID_7: jmethodID?

    open func getPixelBounds( arg0: FontRenderContext?, arg1: Float, arg2: Float ) -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixelBounds", methodSig: "(Ljava/awt/font/FontRenderContext;FF)Ljava/awt/Rectangle;", methodCache: &GlyphVector.getPixelBounds_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }

    open func getPixelBounds( _ _arg0: FontRenderContext?, _ _arg1: Float, _ _arg2: Float ) -> Rectangle! {
        return getPixelBounds( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.awt.Shape java.awt.font.GlyphVector.getOutline(float,float)

    private static var getOutline_MethodID_8: jmethodID?

    open func getOutline( arg0: Float, arg1: Float ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOutline", methodSig: "(FF)Ljava/awt/Shape;", methodCache: &GlyphVector.getOutline_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getOutline( _ _arg0: Float, _ _arg1: Float ) -> Shape! {
        return getOutline( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.awt.Shape java.awt.font.GlyphVector.getOutline()

    private static var getOutline_MethodID_9: jmethodID?

    open func getOutline() -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOutline", methodSig: "()Ljava/awt/Shape;", methodCache: &GlyphVector.getOutline_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }


    /// public abstract java.awt.geom.Rectangle2D java.awt.font.GlyphVector.getVisualBounds()

    private static var getVisualBounds_MethodID_10: jmethodID?

    open func getVisualBounds() -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVisualBounds", methodSig: "()Ljava/awt/geom/Rectangle2D;", methodCache: &GlyphVector.getVisualBounds_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.font.GlyphVector.performDefaultLayout()

    private static var performDefaultLayout_MethodID_11: jmethodID?

    open func performDefaultLayout() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "performDefaultLayout", methodSig: "()V", methodCache: &GlyphVector.performDefaultLayout_MethodID_11, args: &__args, locals: &__locals )
    }


    /// public abstract int java.awt.font.GlyphVector.getGlyphCode(int)

    private static var getGlyphCode_MethodID_12: jmethodID?

    open func getGlyphCode( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getGlyphCode", methodSig: "(I)I", methodCache: &GlyphVector.getGlyphCode_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getGlyphCode( _ _arg0: Int ) -> Int {
        return getGlyphCode( arg0: _arg0 )
    }

    /// public abstract int[] java.awt.font.GlyphVector.getGlyphCodes(int,int,int[])

    private static var getGlyphCodes_MethodID_13: jmethodID?

    open func getGlyphCodes( arg0: Int, arg1: Int, arg2: [Int32]? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphCodes", methodSig: "(II[I)[I", methodCache: &GlyphVector.getGlyphCodes_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getGlyphCodes( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Int32]? ) -> [Int32]! {
        return getGlyphCodes( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public int java.awt.font.GlyphVector.getGlyphCharIndex(int)

    private static var getGlyphCharIndex_MethodID_14: jmethodID?

    open func getGlyphCharIndex( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getGlyphCharIndex", methodSig: "(I)I", methodCache: &GlyphVector.getGlyphCharIndex_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getGlyphCharIndex( _ _arg0: Int ) -> Int {
        return getGlyphCharIndex( arg0: _arg0 )
    }

    /// public int[] java.awt.font.GlyphVector.getGlyphCharIndices(int,int,int[])

    private static var getGlyphCharIndices_MethodID_15: jmethodID?

    open func getGlyphCharIndices( arg0: Int, arg1: Int, arg2: [Int32]? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphCharIndices", methodSig: "(II[I)[I", methodCache: &GlyphVector.getGlyphCharIndices_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getGlyphCharIndices( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Int32]? ) -> [Int32]! {
        return getGlyphCharIndices( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Shape java.awt.font.GlyphVector.getGlyphOutline(int,float,float)

    private static var getGlyphOutline_MethodID_16: jmethodID?

    open func getGlyphOutline( arg0: Int, arg1: Float, arg2: Float ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphOutline", methodSig: "(IFF)Ljava/awt/Shape;", methodCache: &GlyphVector.getGlyphOutline_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getGlyphOutline( _ _arg0: Int, _ _arg1: Float, _ _arg2: Float ) -> Shape! {
        return getGlyphOutline( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.awt.Shape java.awt.font.GlyphVector.getGlyphOutline(int)

    private static var getGlyphOutline_MethodID_17: jmethodID?

    open func getGlyphOutline( arg0: Int ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphOutline", methodSig: "(I)Ljava/awt/Shape;", methodCache: &GlyphVector.getGlyphOutline_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getGlyphOutline( _ _arg0: Int ) -> Shape! {
        return getGlyphOutline( arg0: _arg0 )
    }

    /// public abstract java.awt.geom.Point2D java.awt.font.GlyphVector.getGlyphPosition(int)

    private static var getGlyphPosition_MethodID_18: jmethodID?

    open func getGlyphPosition( arg0: Int ) -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphPosition", methodSig: "(I)Ljava/awt/geom/Point2D;", methodCache: &GlyphVector.getGlyphPosition_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }

    open func getGlyphPosition( _ _arg0: Int ) -> Point2D! {
        return getGlyphPosition( arg0: _arg0 )
    }

    /// public abstract void java.awt.font.GlyphVector.setGlyphPosition(int,java.awt.geom.Point2D)

    private static var setGlyphPosition_MethodID_19: jmethodID?

    open func setGlyphPosition( arg0: Int, arg1: Point2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setGlyphPosition", methodSig: "(ILjava/awt/geom/Point2D;)V", methodCache: &GlyphVector.setGlyphPosition_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setGlyphPosition( _ _arg0: Int, _ _arg1: Point2D? ) {
        setGlyphPosition( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.awt.geom.AffineTransform java.awt.font.GlyphVector.getGlyphTransform(int)

    private static var getGlyphTransform_MethodID_20: jmethodID?

    open func getGlyphTransform( arg0: Int ) -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphTransform", methodSig: "(I)Ljava/awt/geom/AffineTransform;", methodCache: &GlyphVector.getGlyphTransform_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }

    open func getGlyphTransform( _ _arg0: Int ) -> AffineTransform! {
        return getGlyphTransform( arg0: _arg0 )
    }

    /// public abstract void java.awt.font.GlyphVector.setGlyphTransform(int,java.awt.geom.AffineTransform)

    private static var setGlyphTransform_MethodID_21: jmethodID?

    open func setGlyphTransform( arg0: Int, arg1: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setGlyphTransform", methodSig: "(ILjava/awt/geom/AffineTransform;)V", methodCache: &GlyphVector.setGlyphTransform_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setGlyphTransform( _ _arg0: Int, _ _arg1: AffineTransform? ) {
        setGlyphTransform( arg0: _arg0, arg1: _arg1 )
    }

    /// public int java.awt.font.GlyphVector.getLayoutFlags()

    private static var getLayoutFlags_MethodID_22: jmethodID?

    open func getLayoutFlags() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getLayoutFlags", methodSig: "()I", methodCache: &GlyphVector.getLayoutFlags_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract float[] java.awt.font.GlyphVector.getGlyphPositions(int,int,float[])

    private static var getGlyphPositions_MethodID_23: jmethodID?

    open func getGlyphPositions( arg0: Int, arg1: Int, arg2: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphPositions", methodSig: "(II[F)[F", methodCache: &GlyphVector.getGlyphPositions_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getGlyphPositions( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Float]? ) -> [Float]! {
        return getGlyphPositions( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.awt.Shape java.awt.font.GlyphVector.getGlyphLogicalBounds(int)

    private static var getGlyphLogicalBounds_MethodID_24: jmethodID?

    open func getGlyphLogicalBounds( arg0: Int ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphLogicalBounds", methodSig: "(I)Ljava/awt/Shape;", methodCache: &GlyphVector.getGlyphLogicalBounds_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getGlyphLogicalBounds( _ _arg0: Int ) -> Shape! {
        return getGlyphLogicalBounds( arg0: _arg0 )
    }

    /// public abstract java.awt.Shape java.awt.font.GlyphVector.getGlyphVisualBounds(int)

    private static var getGlyphVisualBounds_MethodID_25: jmethodID?

    open func getGlyphVisualBounds( arg0: Int ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphVisualBounds", methodSig: "(I)Ljava/awt/Shape;", methodCache: &GlyphVector.getGlyphVisualBounds_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getGlyphVisualBounds( _ _arg0: Int ) -> Shape! {
        return getGlyphVisualBounds( arg0: _arg0 )
    }

    /// public java.awt.Rectangle java.awt.font.GlyphVector.getGlyphPixelBounds(int,java.awt.font.FontRenderContext,float,float)

    private static var getGlyphPixelBounds_MethodID_26: jmethodID?

    open func getGlyphPixelBounds( arg0: Int, arg1: FontRenderContext?, arg2: Float, arg3: Float ) -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphPixelBounds", methodSig: "(ILjava/awt/font/FontRenderContext;FF)Ljava/awt/Rectangle;", methodCache: &GlyphVector.getGlyphPixelBounds_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }

    open func getGlyphPixelBounds( _ _arg0: Int, _ _arg1: FontRenderContext?, _ _arg2: Float, _ _arg3: Float ) -> Rectangle! {
        return getGlyphPixelBounds( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract java.awt.font.GlyphMetrics java.awt.font.GlyphVector.getGlyphMetrics(int)

    private static var getGlyphMetrics_MethodID_27: jmethodID?

    open func getGlyphMetrics( arg0: Int ) -> GlyphMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphMetrics", methodSig: "(I)Ljava/awt/font/GlyphMetrics;", methodCache: &GlyphVector.getGlyphMetrics_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GlyphMetrics( javaObject: __return ) : nil
    }

    open func getGlyphMetrics( _ _arg0: Int ) -> GlyphMetrics! {
        return getGlyphMetrics( arg0: _arg0 )
    }

    /// public abstract java.awt.font.GlyphJustificationInfo java.awt.font.GlyphVector.getGlyphJustificationInfo(int)

    private static var getGlyphJustificationInfo_MethodID_28: jmethodID?

    open func getGlyphJustificationInfo( arg0: Int ) -> GlyphJustificationInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGlyphJustificationInfo", methodSig: "(I)Ljava/awt/font/GlyphJustificationInfo;", methodCache: &GlyphVector.getGlyphJustificationInfo_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GlyphJustificationInfo( javaObject: __return ) : nil
    }

    open func getGlyphJustificationInfo( _ _arg0: Int ) -> GlyphJustificationInfo! {
        return getGlyphJustificationInfo( arg0: _arg0 )
    }

}
