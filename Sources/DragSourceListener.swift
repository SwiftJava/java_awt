
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:04 GMT 2016 ///

/// interface java.awt.dnd.DragSourceListener ///

public protocol DragSourceListener: java_util.EventListener {

    /// public abstract void java.awt.dnd.DragSourceListener.dragEnter(java.awt.dnd.DragSourceDragEvent)

    func dragEnter( arg0: DragSourceDragEvent? )
    func dragEnter( _ _arg0: DragSourceDragEvent? )

    /// public abstract void java.awt.dnd.DragSourceListener.dragOver(java.awt.dnd.DragSourceDragEvent)

    func dragOver( arg0: DragSourceDragEvent? )
    func dragOver( _ _arg0: DragSourceDragEvent? )

    /// public abstract void java.awt.dnd.DragSourceListener.dropActionChanged(java.awt.dnd.DragSourceDragEvent)

    func dropActionChanged( arg0: DragSourceDragEvent? )
    func dropActionChanged( _ _arg0: DragSourceDragEvent? )

    /// public abstract void java.awt.dnd.DragSourceListener.dragExit(java.awt.dnd.DragSourceEvent)

    func dragExit( arg0: DragSourceEvent? )
    func dragExit( _ _arg0: DragSourceEvent? )

    /// public abstract void java.awt.dnd.DragSourceListener.dragDropEnd(java.awt.dnd.DragSourceDropEvent)

    func dragDropEnd( arg0: DragSourceDropEvent? )
    func dragDropEnd( _ _arg0: DragSourceDropEvent? )

}

open class DragSourceListenerForward: java_util.EventListenerForward, DragSourceListener {

    private static var DragSourceListenerJNIClass: jclass?

    /// public abstract void java.awt.dnd.DragSourceListener.dragEnter(java.awt.dnd.DragSourceDragEvent)

    private static var dragEnter_MethodID_6: jmethodID?

    open func dragEnter( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragEnter", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceListenerForward.dragEnter_MethodID_6, args: &__args, locals: &__locals )
    }

    open func dragEnter( _ _arg0: DragSourceDragEvent? ) {
        dragEnter( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dragOver(java.awt.dnd.DragSourceDragEvent)

    private static var dragOver_MethodID_7: jmethodID?

    open func dragOver( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragOver", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceListenerForward.dragOver_MethodID_7, args: &__args, locals: &__locals )
    }

    open func dragOver( _ _arg0: DragSourceDragEvent? ) {
        dragOver( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dropActionChanged(java.awt.dnd.DragSourceDragEvent)

    private static var dropActionChanged_MethodID_8: jmethodID?

    open func dropActionChanged( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dropActionChanged", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceListenerForward.dropActionChanged_MethodID_8, args: &__args, locals: &__locals )
    }

    open func dropActionChanged( _ _arg0: DragSourceDragEvent? ) {
        dropActionChanged( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dragExit(java.awt.dnd.DragSourceEvent)

    private static var dragExit_MethodID_9: jmethodID?

    open func dragExit( arg0: DragSourceEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragExit", methodSig: "(Ljava/awt/dnd/DragSourceEvent;)V", methodCache: &DragSourceListenerForward.dragExit_MethodID_9, args: &__args, locals: &__locals )
    }

    open func dragExit( _ _arg0: DragSourceEvent? ) {
        dragExit( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dragDropEnd(java.awt.dnd.DragSourceDropEvent)

    private static var dragDropEnd_MethodID_10: jmethodID?

    open func dragDropEnd( arg0: DragSourceDropEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragDropEnd", methodSig: "(Ljava/awt/dnd/DragSourceDropEvent;)V", methodCache: &DragSourceListenerForward.dragDropEnd_MethodID_10, args: &__args, locals: &__locals )
    }

    open func dragDropEnd( _ _arg0: DragSourceDropEvent? ) {
        dragDropEnd( arg0: _arg0 )
    }

}


private typealias DragSourceListener_dragEnter_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceListener_dragEnter_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dragEnter( arg0 != nil ? DragSourceDragEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceListener_dragOver_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceListener_dragOver_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dragOver( arg0 != nil ? DragSourceDragEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceListener_dropActionChanged_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceListener_dropActionChanged_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dropActionChanged( arg0 != nil ? DragSourceDragEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceListener_dragExit_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceListener_dragExit_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dragExit( arg0 != nil ? DragSourceEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceListener_dragDropEnd_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceListener_dragDropEnd_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).dragDropEnd( arg0 != nil ? DragSourceDropEvent( javaObject: arg0 ) : nil )
}

open class DragSourceListenerBase: JNIObjectProxy, DragSourceListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let DragSourceListener_dragEnter_0_thunk: DragSourceListener_dragEnter_0_type = DragSourceListener_dragEnter_0
            natives.append( JNINativeMethod( name: strdup("__dragEnter"), signature: strdup("(Ljava/awt/dnd/DragSourceDragEvent;)V"), fnPtr: unsafeBitCast( DragSourceListener_dragEnter_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceListener_dragOver_1_thunk: DragSourceListener_dragOver_1_type = DragSourceListener_dragOver_1
            natives.append( JNINativeMethod( name: strdup("__dragOver"), signature: strdup("(Ljava/awt/dnd/DragSourceDragEvent;)V"), fnPtr: unsafeBitCast( DragSourceListener_dragOver_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceListener_dropActionChanged_2_thunk: DragSourceListener_dropActionChanged_2_type = DragSourceListener_dropActionChanged_2
            natives.append( JNINativeMethod( name: strdup("__dropActionChanged"), signature: strdup("(Ljava/awt/dnd/DragSourceDragEvent;)V"), fnPtr: unsafeBitCast( DragSourceListener_dropActionChanged_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceListener_dragExit_3_thunk: DragSourceListener_dragExit_3_type = DragSourceListener_dragExit_3
            natives.append( JNINativeMethod( name: strdup("__dragExit"), signature: strdup("(Ljava/awt/dnd/DragSourceEvent;)V"), fnPtr: unsafeBitCast( DragSourceListener_dragExit_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceListener_dragDropEnd_4_thunk: DragSourceListener_dragDropEnd_4_type = DragSourceListener_dragDropEnd_4
            natives.append( JNINativeMethod( name: strdup("__dragDropEnd"), signature: strdup("(Ljava/awt/dnd/DragSourceDropEvent;)V"), fnPtr: unsafeBitCast( DragSourceListener_dragDropEnd_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/DragSourceListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        DragSourceListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/DragSourceListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> DragSourceListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: DragSourceListenerBase.self )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dragEnter(java.awt.dnd.DragSourceDragEvent)

    open func dragEnter( arg0: DragSourceDragEvent? ) /**/ {
    }

    open func dragEnter( _ _arg0: DragSourceDragEvent? ) /**/ {
        dragEnter( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dragOver(java.awt.dnd.DragSourceDragEvent)

    open func dragOver( arg0: DragSourceDragEvent? ) /**/ {
    }

    open func dragOver( _ _arg0: DragSourceDragEvent? ) /**/ {
        dragOver( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dropActionChanged(java.awt.dnd.DragSourceDragEvent)

    open func dropActionChanged( arg0: DragSourceDragEvent? ) /**/ {
    }

    open func dropActionChanged( _ _arg0: DragSourceDragEvent? ) /**/ {
        dropActionChanged( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dragExit(java.awt.dnd.DragSourceEvent)

    open func dragExit( arg0: DragSourceEvent? ) /**/ {
    }

    open func dragExit( _ _arg0: DragSourceEvent? ) /**/ {
        dragExit( arg0: _arg0 )
    }

    /// public abstract void java.awt.dnd.DragSourceListener.dragDropEnd(java.awt.dnd.DragSourceDropEvent)

    open func dragDropEnd( arg0: DragSourceDropEvent? ) /**/ {
    }

    open func dragDropEnd( _ _arg0: DragSourceDropEvent? ) /**/ {
        dragDropEnd( arg0: _arg0 )
    }

}
