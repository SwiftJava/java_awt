
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.event.HierarchyBoundsListener ///

public protocol HierarchyBoundsListener: java_util.EventListener {

    /// public abstract void java.awt.event.HierarchyBoundsListener.ancestorMoved(java.awt.event.HierarchyEvent)

    func ancestorMoved( e: HierarchyEvent? )

    /// public abstract void java.awt.event.HierarchyBoundsListener.ancestorResized(java.awt.event.HierarchyEvent)

    func ancestorResized( e: HierarchyEvent? )

}


open class HierarchyBoundsListenerForward: java_util.EventListenerForward, HierarchyBoundsListener {

    private static var HierarchyBoundsListenerJNIClass: jclass?

    /// public abstract void java.awt.event.HierarchyBoundsListener.ancestorMoved(java.awt.event.HierarchyEvent)

    private static var ancestorMoved_MethodID_3: jmethodID?

    open func ancestorMoved( e: HierarchyEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ancestorMoved", methodSig: "(Ljava/awt/event/HierarchyEvent;)V", methodCache: &HierarchyBoundsListenerForward.ancestorMoved_MethodID_3, args: &__args, locals: &__locals )
    }

    open func ancestorMoved( _ _e: HierarchyEvent? ) {
        ancestorMoved( e: _e )
    }

    /// public abstract void java.awt.event.HierarchyBoundsListener.ancestorResized(java.awt.event.HierarchyEvent)

    private static var ancestorResized_MethodID_4: jmethodID?

    open func ancestorResized( e: HierarchyEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ancestorResized", methodSig: "(Ljava/awt/event/HierarchyEvent;)V", methodCache: &HierarchyBoundsListenerForward.ancestorResized_MethodID_4, args: &__args, locals: &__locals )
    }

    open func ancestorResized( _ _e: HierarchyEvent? ) {
        ancestorResized( e: _e )
    }

}


private typealias HierarchyBoundsListener_ancestorMoved_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func HierarchyBoundsListener_ancestorMoved_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    HierarchyBoundsListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).ancestorMoved( e: e != nil ? HierarchyEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias HierarchyBoundsListener_ancestorResized_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func HierarchyBoundsListener_ancestorResized_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    HierarchyBoundsListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).ancestorResized( e: e != nil ? HierarchyEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

fileprivate class HierarchyBoundsListenerLocal_: JNILocalProxy<HierarchyBoundsListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let HierarchyBoundsListener_ancestorMoved_0_thunk: HierarchyBoundsListener_ancestorMoved_0_type = HierarchyBoundsListener_ancestorMoved_0
        natives.append( JNINativeMethod( name: strdup("__ancestorMoved"), signature: strdup("(JLjava/awt/event/HierarchyEvent;)V"), fnPtr: unsafeBitCast( HierarchyBoundsListener_ancestorMoved_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let HierarchyBoundsListener_ancestorResized_1_thunk: HierarchyBoundsListener_ancestorResized_1_type = HierarchyBoundsListener_ancestorResized_1
        natives.append( JNINativeMethod( name: strdup("__ancestorResized"), signature: strdup("(JLjava/awt/event/HierarchyEvent;)V"), fnPtr: unsafeBitCast( HierarchyBoundsListener_ancestorResized_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/HierarchyBoundsListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension HierarchyBoundsListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return HierarchyBoundsListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class HierarchyBoundsListenerBase: HierarchyBoundsListener {

    public init() {}

    /// public abstract void java.awt.event.HierarchyBoundsListener.ancestorMoved(java.awt.event.HierarchyEvent)

    open func ancestorMoved( e: HierarchyEvent? ) /**/ {
    }

    open func ancestorMoved( _ _e: HierarchyEvent? ) /**/ {
        ancestorMoved( e: _e )
    }

    /// public abstract void java.awt.event.HierarchyBoundsListener.ancestorResized(java.awt.event.HierarchyEvent)

    open func ancestorResized( e: HierarchyEvent? ) /**/ {
    }

    open func ancestorResized( _ _e: HierarchyEvent? ) /**/ {
        ancestorResized( e: _e )
    }

}
