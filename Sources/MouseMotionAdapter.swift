
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.event.MouseMotionAdapter ///

open class MouseMotionAdapter: java_swift.JavaObject, MouseMotionListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MouseMotionAdapterJNIClass: jclass?

    /// public java.awt.event.MouseMotionAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/event/MouseMotionAdapter", classCache: &MouseMotionAdapter.MouseMotionAdapterJNIClass, methodSig: "()V", methodCache: &MouseMotionAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.event.MouseMotionAdapter.mouseMoved(java.awt.event.MouseEvent)

    private static var mouseMoved_MethodID_2: jmethodID?

    open func mouseMoved( e: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseMoved", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseMotionAdapter.mouseMoved_MethodID_2, args: &__args, locals: &__locals )
    }

    open func mouseMoved( _ _e: MouseEvent? ) {
        mouseMoved( e: _e )
    }

    /// public void java.awt.event.MouseMotionAdapter.mouseDragged(java.awt.event.MouseEvent)

    private static var mouseDragged_MethodID_3: jmethodID?

    open func mouseDragged( e: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseDragged", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseMotionAdapter.mouseDragged_MethodID_3, args: &__args, locals: &__locals )
    }

    open func mouseDragged( _ _e: MouseEvent? ) {
        mouseDragged( e: _e )
    }

}

private typealias MouseMotionAdapter_mouseMoved_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func MouseMotionAdapter_mouseMoved_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    MouseMotionAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).mouseMoved( e: e != nil ? MouseEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias MouseMotionAdapter_mouseDragged_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func MouseMotionAdapter_mouseDragged_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    MouseMotionAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).mouseDragged( e: e != nil ? MouseEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias MouseMotionAdapter_equals_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> jboolean

private func MouseMotionAdapter_equals_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> jboolean {
    JNI.inNative = true;
    let __return = MouseMotionAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).equals( arg0: arg0 != nil ? java_swift.JavaObject( javaObject: arg0 ) : nil )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).z, &locals, removeLast: true )
}

private typealias MouseMotionAdapter_toString_6_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jobject?

private func MouseMotionAdapter_toString_6( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jobject? {
    JNI.inNative = true;
    let __return = MouseMotionAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).toString( )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).l, &locals, removeLast: true )
}

private typealias MouseMotionAdapter_hashCode_7_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jint

private func MouseMotionAdapter_hashCode_7( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jint {
    JNI.inNative = true;
    let __return = MouseMotionAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).hashCode( )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).i, &locals, removeLast: true )
}

fileprivate class MouseMotionAdapterLocal_: JNIObjectProxy<MouseMotionAdapter> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let MouseMotionAdapter_mouseMoved_0_thunk: MouseMotionAdapter_mouseMoved_0_type = MouseMotionAdapter_mouseMoved_0
        natives.append( JNINativeMethod( name: strdup("__mouseMoved"), signature: strdup("(JLjava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseMotionAdapter_mouseMoved_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let MouseMotionAdapter_mouseDragged_1_thunk: MouseMotionAdapter_mouseDragged_1_type = MouseMotionAdapter_mouseDragged_1
        natives.append( JNINativeMethod( name: strdup("__mouseDragged"), signature: strdup("(JLjava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseMotionAdapter_mouseDragged_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let MouseMotionAdapter_equals_5_thunk: MouseMotionAdapter_equals_5_type = MouseMotionAdapter_equals_5
        natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(JLjava/lang/Object;)Z"), fnPtr: unsafeBitCast( MouseMotionAdapter_equals_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let MouseMotionAdapter_toString_6_thunk: MouseMotionAdapter_toString_6_type = MouseMotionAdapter_toString_6
        natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("(J)Ljava/lang/String;"), fnPtr: unsafeBitCast( MouseMotionAdapter_toString_6_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let MouseMotionAdapter_hashCode_7_thunk: MouseMotionAdapter_hashCode_7_type = MouseMotionAdapter_hashCode_7
        natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("(J)I"), fnPtr: unsafeBitCast( MouseMotionAdapter_hashCode_7_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/MouseMotionAdapterProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

open class MouseMotionAdapterBase: MouseMotionAdapter {

    private static var MouseMotionAdapterBaseJNIClass: jclass? = MouseMotionAdapterLocal_.proxyClass()

    private lazy var __local: MouseMotionAdapterLocal_? = MouseMotionAdapterLocal_( owned: self, proto: self )

    override open func clearLocal() {
        __local = nil
    }

    open func inherit( _ parent: JNIObjectProtocol ) {
        parent.withJavaObject {
            self.javaObject = $0
            self.__local?.takeOwnership(javaObject: $0)
        }
    }

    /// public java.awt.event.MouseMotionAdapter()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/MouseMotionAdapterProxy", classCache: &MouseMotionAdapterBase.MouseMotionAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &MouseMotionAdapterBase.new_MethodID_4, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
