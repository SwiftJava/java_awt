
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:30 GMT 2016 ///

/// class java.awt.event.MouseMotionAdapter ///

open class MouseMotionAdapter: java_lang.JavaObject, MouseMotionListener {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.event.MouseMotionAdapter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MouseMotionAdapterJNIClass: jclass?

    /// public java.awt.event.MouseMotionAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/event/MouseMotionAdapter", classCache: &MouseMotionAdapter.MouseMotionAdapterJNIClass, methodSig: "()V", methodCache: &MouseMotionAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.event.MouseMotionAdapter.mouseMoved(java.awt.event.MouseEvent)

    private static var mouseMoved_MethodID_2: jmethodID?

    open func mouseMoved( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseMoved", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseMotionAdapter.mouseMoved_MethodID_2, args: &__args, locals: &__locals )
    }

    open func mouseMoved( _ _arg0: MouseEvent? ) {
        mouseMoved( arg0: _arg0 )
    }

    /// public void java.awt.event.MouseMotionAdapter.mouseDragged(java.awt.event.MouseEvent)

    private static var mouseDragged_MethodID_3: jmethodID?

    open func mouseDragged( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseDragged", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseMotionAdapter.mouseDragged_MethodID_3, args: &__args, locals: &__locals )
    }

    open func mouseDragged( _ _arg0: MouseEvent? ) {
        mouseDragged( arg0: _arg0 )
    }

}
private typealias MouseMotionAdapter_mouseMoved_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseMotionAdapter_mouseMoved_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseMotionAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseMoved( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

private typealias MouseMotionAdapter_mouseDragged_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseMotionAdapter_mouseDragged_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseMotionAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseDragged( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

private typealias MouseMotionAdapter_equals_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> jboolean

private func MouseMotionAdapter_equals_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> jboolean {
    let __return = MouseMotionAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).equals( arg0 != nil ? java_lang.JavaObject( javaObject: arg0 ) : nil )
    return JNIType.encode( value: __return, locals: nil ).z
}

private typealias MouseMotionAdapter_toString_6_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jobject?

private func MouseMotionAdapter_toString_6( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jobject? {
    let __return = MouseMotionAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).toString( )
    return JNIType.encode( value: __return, locals: nil ).l
}

private typealias MouseMotionAdapter_hashCode_7_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jint

private func MouseMotionAdapter_hashCode_7( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jint {
    let __return = MouseMotionAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).hashCode( )
    return JNIType.encode( value: __return, locals: nil ).i
}

open class MouseMotionAdapterBase: MouseMotionAdapter {

    private static var MouseMotionAdapterBaseJNIClass: jclass?
    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let MouseMotionAdapter_mouseMoved_0_thunk: MouseMotionAdapter_mouseMoved_0_type = MouseMotionAdapter_mouseMoved_0
            natives.append( JNINativeMethod( name: strdup("__mouseMoved"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseMotionAdapter_mouseMoved_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseMotionAdapter_mouseDragged_1_thunk: MouseMotionAdapter_mouseDragged_1_type = MouseMotionAdapter_mouseDragged_1
            natives.append( JNINativeMethod( name: strdup("__mouseDragged"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseMotionAdapter_mouseDragged_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseMotionAdapter_equals_5_thunk: MouseMotionAdapter_equals_5_type = MouseMotionAdapter_equals_5
            natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(Ljava/lang/Object;)Z"), fnPtr: unsafeBitCast( MouseMotionAdapter_equals_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseMotionAdapter_toString_6_thunk: MouseMotionAdapter_toString_6_type = MouseMotionAdapter_toString_6
            natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("()Ljava/lang/String;"), fnPtr: unsafeBitCast( MouseMotionAdapter_toString_6_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseMotionAdapter_hashCode_7_thunk: MouseMotionAdapter_hashCode_7_type = MouseMotionAdapter_hashCode_7
            natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("()I"), fnPtr: unsafeBitCast( MouseMotionAdapter_hashCode_7_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/MouseMotionAdapterProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    override open var javaObject: jobject? {
        get {
            return super.javaObject
        }
        set(newValue) {
            super.javaObject = newValue
            MouseMotionAdapterBase.registerNatives()
            updateSwiftObject()
        }
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> MouseMotionAdapterBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: MouseMotionAdapterBase.self )
    }

    /// public java.awt.event.MouseMotionAdapter()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = swiftValue()

        let __object = JNIMethod.NewObject( className: "org/genie/java_awt/MouseMotionAdapterProxy", classCache: &MouseMotionAdapterBase.MouseMotionAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &MouseMotionAdapterBase.new_MethodID_4, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
