
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:36:02 GMT 2016 ///

/// interface java.awt.LayoutManager ///

public protocol LayoutManager: JavaProtocol {

    /// public abstract void java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)

    func removeLayoutComponent( arg0: Component? )
    func removeLayoutComponent( _ _arg0: Component? )

    /// public abstract void java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)

    func addLayoutComponent( arg0: String?, arg1: Component? )
    func addLayoutComponent( _ _arg0: String?, _ _arg1: Component? )

    /// public abstract void java.awt.LayoutManager.layoutContainer(java.awt.Container)

    func layoutContainer( arg0: Container? )
    func layoutContainer( _ _arg0: Container? )

    /// public abstract java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)

    func preferredLayoutSize( arg0: Container? ) -> Dimension!
    func preferredLayoutSize( _ _arg0: Container? ) -> Dimension!

    /// public abstract java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)

    func minimumLayoutSize( arg0: Container? ) -> Dimension!
    func minimumLayoutSize( _ _arg0: Container? ) -> Dimension!

}

open class LayoutManagerForward: JNIObjectForward, LayoutManager {

    private static var LayoutManagerJNIClass: jclass?

    /// public abstract void java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)

    private static var removeLayoutComponent_MethodID_6: jmethodID?

    open func removeLayoutComponent( arg0: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeLayoutComponent", methodSig: "(Ljava/awt/Component;)V", methodCache: &LayoutManagerForward.removeLayoutComponent_MethodID_6, args: &__args, locals: &__locals )
    }

    open func removeLayoutComponent( _ _arg0: Component? ) {
        removeLayoutComponent( arg0: _arg0 )
    }

    /// public abstract void java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)

    private static var addLayoutComponent_MethodID_7: jmethodID?

    open func addLayoutComponent( arg0: String?, arg1: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLayoutComponent", methodSig: "(Ljava/lang/String;Ljava/awt/Component;)V", methodCache: &LayoutManagerForward.addLayoutComponent_MethodID_7, args: &__args, locals: &__locals )
    }

    open func addLayoutComponent( _ _arg0: String?, _ _arg1: Component? ) {
        addLayoutComponent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.LayoutManager.layoutContainer(java.awt.Container)

    private static var layoutContainer_MethodID_8: jmethodID?

    open func layoutContainer( arg0: Container? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layoutContainer", methodSig: "(Ljava/awt/Container;)V", methodCache: &LayoutManagerForward.layoutContainer_MethodID_8, args: &__args, locals: &__locals )
    }

    open func layoutContainer( _ _arg0: Container? ) {
        layoutContainer( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)

    private static var preferredLayoutSize_MethodID_9: jmethodID?

    open func preferredLayoutSize( arg0: Container? ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "preferredLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &LayoutManagerForward.preferredLayoutSize_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func preferredLayoutSize( _ _arg0: Container? ) -> Dimension! {
        return preferredLayoutSize( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)

    private static var minimumLayoutSize_MethodID_10: jmethodID?

    open func minimumLayoutSize( arg0: Container? ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "minimumLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &LayoutManagerForward.minimumLayoutSize_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func minimumLayoutSize( _ _arg0: Container? ) -> Dimension! {
        return minimumLayoutSize( arg0: _arg0 )
    }

}


private typealias LayoutManager_removeLayoutComponent_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func LayoutManager_removeLayoutComponent_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    LayoutManagerBase.swiftObject( jniEnv: __env, javaObject: __this ).removeLayoutComponent( arg0 != nil ? Component( javaObject: arg0 ) : nil )
}

private typealias LayoutManager_addLayoutComponent_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject?, _: jobject? ) -> ()

private func LayoutManager_addLayoutComponent_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject?, _ arg1: jobject? ) -> () {
    LayoutManagerBase.swiftObject( jniEnv: __env, javaObject: __this ).addLayoutComponent( JNIType.decode( type: String(), from: arg0 ), arg1 != nil ? Component( javaObject: arg1 ) : nil )
}

private typealias LayoutManager_layoutContainer_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func LayoutManager_layoutContainer_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    LayoutManagerBase.swiftObject( jniEnv: __env, javaObject: __this ).layoutContainer( arg0 != nil ? Container( javaObject: arg0 ) : nil )
}

private typealias LayoutManager_preferredLayoutSize_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> jobject?

private func LayoutManager_preferredLayoutSize_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> jobject? {
    let __return = LayoutManagerBase.swiftObject( jniEnv: __env, javaObject: __this ).preferredLayoutSize( arg0 != nil ? Container( javaObject: arg0 ) : nil )
    return JNIType.encode( value: __return, locals: nil ).l
}

private typealias LayoutManager_minimumLayoutSize_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> jobject?

private func LayoutManager_minimumLayoutSize_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> jobject? {
    let __return = LayoutManagerBase.swiftObject( jniEnv: __env, javaObject: __this ).minimumLayoutSize( arg0 != nil ? Container( javaObject: arg0 ) : nil )
    return JNIType.encode( value: __return, locals: nil ).l
}

open class LayoutManagerBase: JNIObjectProxy, LayoutManager {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let LayoutManager_removeLayoutComponent_0_thunk: LayoutManager_removeLayoutComponent_0_type = LayoutManager_removeLayoutComponent_0
            natives.append( JNINativeMethod( name: strdup("__removeLayoutComponent"), signature: strdup("(Ljava/awt/Component;)V"), fnPtr: unsafeBitCast( LayoutManager_removeLayoutComponent_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let LayoutManager_addLayoutComponent_1_thunk: LayoutManager_addLayoutComponent_1_type = LayoutManager_addLayoutComponent_1
            natives.append( JNINativeMethod( name: strdup("__addLayoutComponent"), signature: strdup("(Ljava/lang/String;Ljava/awt/Component;)V"), fnPtr: unsafeBitCast( LayoutManager_addLayoutComponent_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let LayoutManager_layoutContainer_2_thunk: LayoutManager_layoutContainer_2_type = LayoutManager_layoutContainer_2
            natives.append( JNINativeMethod( name: strdup("__layoutContainer"), signature: strdup("(Ljava/awt/Container;)V"), fnPtr: unsafeBitCast( LayoutManager_layoutContainer_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let LayoutManager_preferredLayoutSize_3_thunk: LayoutManager_preferredLayoutSize_3_type = LayoutManager_preferredLayoutSize_3
            natives.append( JNINativeMethod( name: strdup("__preferredLayoutSize"), signature: strdup("(Ljava/awt/Container;)Ljava/awt/Dimension;"), fnPtr: unsafeBitCast( LayoutManager_preferredLayoutSize_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let LayoutManager_minimumLayoutSize_4_thunk: LayoutManager_minimumLayoutSize_4_type = LayoutManager_minimumLayoutSize_4
            natives.append( JNINativeMethod( name: strdup("__minimumLayoutSize"), signature: strdup("(Ljava/awt/Container;)Ljava/awt/Dimension;"), fnPtr: unsafeBitCast( LayoutManager_minimumLayoutSize_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/LayoutManagerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        LayoutManagerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/LayoutManagerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> LayoutManagerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: LayoutManagerBase.self )
    }

    /// public abstract void java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)

    open func removeLayoutComponent( arg0: Component? ) /**/ {
    }

    open func removeLayoutComponent( _ _arg0: Component? ) /**/ {
        removeLayoutComponent( arg0: _arg0 )
    }

    /// public abstract void java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)

    open func addLayoutComponent( arg0: String?, arg1: Component? ) /**/ {
    }

    open func addLayoutComponent( _ _arg0: String?, _ _arg1: Component? ) /**/ {
        addLayoutComponent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.LayoutManager.layoutContainer(java.awt.Container)

    open func layoutContainer( arg0: Container? ) /**/ {
    }

    open func layoutContainer( _ _arg0: Container? ) /**/ {
        layoutContainer( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)

    open func preferredLayoutSize( arg0: Container? ) -> Dimension! /**/ {
        return nil
    }

    open func preferredLayoutSize( _ _arg0: Container? ) -> Dimension! /**/ {
        return preferredLayoutSize( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)

    open func minimumLayoutSize( arg0: Container? ) -> Dimension! /**/ {
        return nil
    }

    open func minimumLayoutSize( _ _arg0: Container? ) -> Dimension! /**/ {
        return minimumLayoutSize( arg0: _arg0 )
    }

}
