
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.LayoutManager ///

public protocol LayoutManager: JavaProtocol {

    /// public abstract void java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)

    func removeLayoutComponent( comp: Component? )

    /// public abstract void java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)

    func addLayoutComponent( name: String?, comp: Component? )

    /// public abstract void java.awt.LayoutManager.layoutContainer(java.awt.Container)

    func layoutContainer( parent: Container? )

    /// public abstract java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)

    func preferredLayoutSize( parent: Container? ) -> Dimension!

    /// public abstract java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)

    func minimumLayoutSize( parent: Container? ) -> Dimension!

}


open class LayoutManagerForward: JNIObjectForward, LayoutManager {

    private static var LayoutManagerJNIClass: jclass?

    /// public abstract void java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)

    private static var removeLayoutComponent_MethodID_6: jmethodID?

    open func removeLayoutComponent( comp: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: comp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeLayoutComponent", methodSig: "(Ljava/awt/Component;)V", methodCache: &LayoutManagerForward.removeLayoutComponent_MethodID_6, args: &__args, locals: &__locals )
    }

    open func removeLayoutComponent( _ _comp: Component? ) {
        removeLayoutComponent( comp: _comp )
    }

    /// public abstract void java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)

    private static var addLayoutComponent_MethodID_7: jmethodID?

    open func addLayoutComponent( name: String?, comp: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = JNIType.toJava( value: comp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLayoutComponent", methodSig: "(Ljava/lang/String;Ljava/awt/Component;)V", methodCache: &LayoutManagerForward.addLayoutComponent_MethodID_7, args: &__args, locals: &__locals )
    }

    open func addLayoutComponent( _ _name: String?, _ _comp: Component? ) {
        addLayoutComponent( name: _name, comp: _comp )
    }

    /// public abstract void java.awt.LayoutManager.layoutContainer(java.awt.Container)

    private static var layoutContainer_MethodID_8: jmethodID?

    open func layoutContainer( parent: Container? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layoutContainer", methodSig: "(Ljava/awt/Container;)V", methodCache: &LayoutManagerForward.layoutContainer_MethodID_8, args: &__args, locals: &__locals )
    }

    open func layoutContainer( _ _parent: Container? ) {
        layoutContainer( parent: _parent )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)

    private static var preferredLayoutSize_MethodID_9: jmethodID?

    open func preferredLayoutSize( parent: Container? ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "preferredLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &LayoutManagerForward.preferredLayoutSize_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func preferredLayoutSize( _ _parent: Container? ) -> Dimension! {
        return preferredLayoutSize( parent: _parent )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)

    private static var minimumLayoutSize_MethodID_10: jmethodID?

    open func minimumLayoutSize( parent: Container? ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "minimumLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &LayoutManagerForward.minimumLayoutSize_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func minimumLayoutSize( _ _parent: Container? ) -> Dimension! {
        return minimumLayoutSize( parent: _parent )
    }

}


private typealias LayoutManager_removeLayoutComponent_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func LayoutManager_removeLayoutComponent_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ comp: jobject? ) -> () {
    JNI.inNative = true;
    LayoutManagerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).removeLayoutComponent( comp: comp != nil ? Component( javaObject: comp ) : nil )
    JNI.inNative = false;
}

private typealias LayoutManager_addLayoutComponent_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject?, _: jobject? ) -> ()

private func LayoutManager_addLayoutComponent_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ name: jobject?, _ comp: jobject? ) -> () {
    JNI.inNative = true;
    LayoutManagerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).addLayoutComponent( name: JNIType.toSwift( type: String(), from: name ), comp: comp != nil ? Component( javaObject: comp ) : nil )
    JNI.inNative = false;
}

private typealias LayoutManager_layoutContainer_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func LayoutManager_layoutContainer_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ parent: jobject? ) -> () {
    JNI.inNative = true;
    LayoutManagerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).layoutContainer( parent: parent != nil ? Container( javaObject: parent ) : nil )
    JNI.inNative = false;
}

private typealias LayoutManager_preferredLayoutSize_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> jobject?

private func LayoutManager_preferredLayoutSize_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ parent: jobject? ) -> jobject? {
    JNI.inNative = true;
    let __return = LayoutManagerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).preferredLayoutSize( parent: parent != nil ? Container( javaObject: parent ) : nil )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).l, &locals, removeLast: true )
}

private typealias LayoutManager_minimumLayoutSize_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> jobject?

private func LayoutManager_minimumLayoutSize_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ parent: jobject? ) -> jobject? {
    JNI.inNative = true;
    let __return = LayoutManagerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).minimumLayoutSize( parent: parent != nil ? Container( javaObject: parent ) : nil )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).l, &locals, removeLast: true )
}

fileprivate class LayoutManagerLocal_: JNILocalProxy<LayoutManager, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let LayoutManager_removeLayoutComponent_0_thunk: LayoutManager_removeLayoutComponent_0_type = LayoutManager_removeLayoutComponent_0
        natives.append( JNINativeMethod( name: strdup("__removeLayoutComponent"), signature: strdup("(JLjava/awt/Component;)V"), fnPtr: unsafeBitCast( LayoutManager_removeLayoutComponent_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let LayoutManager_addLayoutComponent_1_thunk: LayoutManager_addLayoutComponent_1_type = LayoutManager_addLayoutComponent_1
        natives.append( JNINativeMethod( name: strdup("__addLayoutComponent"), signature: strdup("(JLjava/lang/String;Ljava/awt/Component;)V"), fnPtr: unsafeBitCast( LayoutManager_addLayoutComponent_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let LayoutManager_layoutContainer_2_thunk: LayoutManager_layoutContainer_2_type = LayoutManager_layoutContainer_2
        natives.append( JNINativeMethod( name: strdup("__layoutContainer"), signature: strdup("(JLjava/awt/Container;)V"), fnPtr: unsafeBitCast( LayoutManager_layoutContainer_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let LayoutManager_preferredLayoutSize_3_thunk: LayoutManager_preferredLayoutSize_3_type = LayoutManager_preferredLayoutSize_3
        natives.append( JNINativeMethod( name: strdup("__preferredLayoutSize"), signature: strdup("(JLjava/awt/Container;)Ljava/awt/Dimension;"), fnPtr: unsafeBitCast( LayoutManager_preferredLayoutSize_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let LayoutManager_minimumLayoutSize_4_thunk: LayoutManager_minimumLayoutSize_4_type = LayoutManager_minimumLayoutSize_4
        natives.append( JNINativeMethod( name: strdup("__minimumLayoutSize"), signature: strdup("(JLjava/awt/Container;)Ljava/awt/Dimension;"), fnPtr: unsafeBitCast( LayoutManager_minimumLayoutSize_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/LayoutManagerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension LayoutManager {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return LayoutManagerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class LayoutManagerBase: LayoutManager {

    public init() {}

    /// public abstract void java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)

    open func removeLayoutComponent( comp: Component? ) /**/ {
    }

    open func removeLayoutComponent( _ _comp: Component? ) /**/ {
        removeLayoutComponent( comp: _comp )
    }

    /// public abstract void java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)

    open func addLayoutComponent( name: String?, comp: Component? ) /**/ {
    }

    open func addLayoutComponent( _ _name: String?, _ _comp: Component? ) /**/ {
        addLayoutComponent( name: _name, comp: _comp )
    }

    /// public abstract void java.awt.LayoutManager.layoutContainer(java.awt.Container)

    open func layoutContainer( parent: Container? ) /**/ {
    }

    open func layoutContainer( _ _parent: Container? ) /**/ {
        layoutContainer( parent: _parent )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)

    open func preferredLayoutSize( parent: Container? ) -> Dimension! /**/ {
        return nil
    }

    open func preferredLayoutSize( _ _parent: Container? ) -> Dimension! /**/ {
        return preferredLayoutSize( parent: _parent )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)

    open func minimumLayoutSize( parent: Container? ) -> Dimension! /**/ {
        return nil
    }

    open func minimumLayoutSize( _ _parent: Container? ) -> Dimension! /**/ {
        return minimumLayoutSize( parent: _parent )
    }

}
