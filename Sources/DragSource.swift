
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:04 GMT 2016 ///

/// class java.awt.dnd.DragSource ///

open class DragSource: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.dnd.DragSource", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DragSourceJNIClass: jclass?

    /// private static final long java.awt.dnd.DragSource.serialVersionUID

    /// public static final java.awt.Cursor java.awt.dnd.DragSource.DefaultCopyDrop

    private static var DefaultCopyDrop_FieldID: jfieldID?

    open static var DefaultCopyDrop: Cursor! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DefaultCopyDrop", fieldType: "Ljava/awt/Cursor;", fieldCache: &DefaultCopyDrop_FieldID, className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass )
            return __value != nil ? Cursor( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Cursor java.awt.dnd.DragSource.DefaultMoveDrop

    private static var DefaultMoveDrop_FieldID: jfieldID?

    open static var DefaultMoveDrop: Cursor! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DefaultMoveDrop", fieldType: "Ljava/awt/Cursor;", fieldCache: &DefaultMoveDrop_FieldID, className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass )
            return __value != nil ? Cursor( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Cursor java.awt.dnd.DragSource.DefaultLinkDrop

    private static var DefaultLinkDrop_FieldID: jfieldID?

    open static var DefaultLinkDrop: Cursor! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DefaultLinkDrop", fieldType: "Ljava/awt/Cursor;", fieldCache: &DefaultLinkDrop_FieldID, className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass )
            return __value != nil ? Cursor( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Cursor java.awt.dnd.DragSource.DefaultCopyNoDrop

    private static var DefaultCopyNoDrop_FieldID: jfieldID?

    open static var DefaultCopyNoDrop: Cursor! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DefaultCopyNoDrop", fieldType: "Ljava/awt/Cursor;", fieldCache: &DefaultCopyNoDrop_FieldID, className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass )
            return __value != nil ? Cursor( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Cursor java.awt.dnd.DragSource.DefaultMoveNoDrop

    private static var DefaultMoveNoDrop_FieldID: jfieldID?

    open static var DefaultMoveNoDrop: Cursor! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DefaultMoveNoDrop", fieldType: "Ljava/awt/Cursor;", fieldCache: &DefaultMoveNoDrop_FieldID, className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass )
            return __value != nil ? Cursor( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Cursor java.awt.dnd.DragSource.DefaultLinkNoDrop

    private static var DefaultLinkNoDrop_FieldID: jfieldID?

    open static var DefaultLinkNoDrop: Cursor! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DefaultLinkNoDrop", fieldType: "Ljava/awt/Cursor;", fieldCache: &DefaultLinkNoDrop_FieldID, className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass )
            return __value != nil ? Cursor( javaObject: __value ) : nil
        }
    }

    /// private static final java.awt.dnd.DragSource java.awt.dnd.DragSource.dflt

    /// static final java.lang.String java.awt.dnd.DragSource.dragSourceListenerK

    /// static final java.lang.String java.awt.dnd.DragSource.dragSourceMotionListenerK

    /// private transient java.awt.datatransfer.FlavorMap java.awt.dnd.DragSource.flavorMap

    /// private transient java.awt.dnd.DragSourceListener java.awt.dnd.DragSource.listener

    /// private transient java.awt.dnd.DragSourceMotionListener java.awt.dnd.DragSource.motionListener

    /// public java.awt.dnd.DragSource() throws java.awt.HeadlessException

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSource", classCache: &DragSource.DragSourceJNIClass, methodSig: "()V", methodCache: &DragSource.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// private static java.awt.Cursor java.awt.dnd.DragSource.load(java.lang.String)

    /// private void java.awt.dnd.DragSource.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.awt.dnd.DragSource.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// public java.awt.dnd.DragGestureRecognizer java.awt.dnd.DragSource.createDragGestureRecognizer(java.lang.Class,java.awt.Component,int,java.awt.dnd.DragGestureListener)

    private static var createDragGestureRecognizer_MethodID_2: jmethodID?

    open func createDragGestureRecognizer( arg0: java_lang.Class?, arg1: Component?, arg2: Int, arg3: DragGestureListener? ) -> DragGestureRecognizer! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDragGestureRecognizer", methodSig: "(Ljava/lang/Class;Ljava/awt/Component;ILjava/awt/dnd/DragGestureListener;)Ljava/awt/dnd/DragGestureRecognizer;", methodCache: &DragSource.createDragGestureRecognizer_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DragGestureRecognizer( javaObject: __return ) : nil
    }

    open func createDragGestureRecognizer( _ _arg0: java_lang.Class?, _ _arg1: Component?, _ _arg2: Int, _ _arg3: DragGestureListener? ) -> DragGestureRecognizer! {
        return createDragGestureRecognizer( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.util.EventListener[] java.awt.dnd.DragSource.getListeners(java.lang.Class)

    private static var getListeners_MethodID_3: jmethodID?

    open func getListeners( arg0: java_lang.Class? ) -> [EventListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getListeners", methodSig: "(Ljava/lang/Class;)[Ljava/util/EventListener;", methodCache: &DragSource.getListeners_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: [EventListenerForward](), from: __return )
    }

    open func getListeners( _ _arg0: java_lang.Class? ) -> [EventListener]! {
        return getListeners( arg0: _arg0 )
    }

    /// public java.awt.datatransfer.FlavorMap java.awt.dnd.DragSource.getFlavorMap()

    private static var getFlavorMap_MethodID_4: jmethodID?

    open func getFlavorMap() -> FlavorMap! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFlavorMap", methodSig: "()Ljava/awt/datatransfer/FlavorMap;", methodCache: &DragSource.getFlavorMap_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FlavorMapForward( javaObject: __return ) : nil
    }


    /// public void java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener) throws java.awt.dnd.InvalidDnDOperationException

    private static var startDrag_MethodID_5: jmethodID?

    open func startDrag( arg0: DragGestureEvent?, arg1: Cursor?, arg2: Transferable?, arg3: DragSourceListener? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startDrag", methodSig: "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V", methodCache: &DragSource.startDrag_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw InvalidDnDOperationException( javaObject: throwable )
        }
    }

    open func startDrag( _ _arg0: DragGestureEvent?, _ _arg1: Cursor?, _ _arg2: Transferable?, _ _arg3: DragSourceListener? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        try startDrag( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener) throws java.awt.dnd.InvalidDnDOperationException

    private static var startDrag_MethodID_6: jmethodID?

    open func startDrag( arg0: DragGestureEvent?, arg1: Cursor?, arg2: Image?, arg3: Point?, arg4: Transferable?, arg5: DragSourceListener? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = jvalue( l: arg4?.localJavaObject( &__locals ) )
        __args[5] = jvalue( l: arg5?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startDrag", methodSig: "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V", methodCache: &DragSource.startDrag_MethodID_6, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw InvalidDnDOperationException( javaObject: throwable )
        }
    }

    open func startDrag( _ _arg0: DragGestureEvent?, _ _arg1: Cursor?, _ _arg2: Image?, _ _arg3: Point?, _ _arg4: Transferable?, _ _arg5: DragSourceListener? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        try startDrag( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener,java.awt.datatransfer.FlavorMap) throws java.awt.dnd.InvalidDnDOperationException

    private static var startDrag_MethodID_7: jmethodID?

    open func startDrag( arg0: DragGestureEvent?, arg1: Cursor?, arg2: Transferable?, arg3: DragSourceListener?, arg4: FlavorMap? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        __args[4] = jvalue( l: arg4?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startDrag", methodSig: "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;Ljava/awt/datatransfer/FlavorMap;)V", methodCache: &DragSource.startDrag_MethodID_7, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw InvalidDnDOperationException( javaObject: throwable )
        }
    }

    open func startDrag( _ _arg0: DragGestureEvent?, _ _arg1: Cursor?, _ _arg2: Transferable?, _ _arg3: DragSourceListener?, _ _arg4: FlavorMap? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        try startDrag( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.dnd.DragSource.startDrag(java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener,java.awt.datatransfer.FlavorMap) throws java.awt.dnd.InvalidDnDOperationException

    private static var startDrag_MethodID_8: jmethodID?

    open func startDrag( arg0: DragGestureEvent?, arg1: Cursor?, arg2: Image?, arg3: Point?, arg4: Transferable?, arg5: DragSourceListener?, arg6: FlavorMap? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = jvalue( l: arg4?.localJavaObject( &__locals ) )
        __args[5] = jvalue( l: arg5?.localJavaObject( &__locals ) )
        __args[6] = jvalue( l: arg6?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startDrag", methodSig: "(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;Ljava/awt/datatransfer/FlavorMap;)V", methodCache: &DragSource.startDrag_MethodID_8, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw InvalidDnDOperationException( javaObject: throwable )
        }
    }

    open func startDrag( _ _arg0: DragGestureEvent?, _ _arg1: Cursor?, _ _arg2: Image?, _ _arg3: Point?, _ _arg4: Transferable?, _ _arg5: DragSourceListener?, _ _arg6: FlavorMap? ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        try startDrag( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public static java.awt.dnd.DragSource java.awt.dnd.DragSource.getDefaultDragSource()

    private static var getDefaultDragSource_MethodID_9: jmethodID?

    open class func getDefaultDragSource() -> DragSource! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass, methodName: "getDefaultDragSource", methodSig: "()Ljava/awt/dnd/DragSource;", methodCache: &getDefaultDragSource_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DragSource( javaObject: __return ) : nil
    }


    /// public static boolean java.awt.dnd.DragSource.isDragImageSupported()

    private static var isDragImageSupported_MethodID_10: jmethodID?

    open class func isDragImageSupported() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass, methodName: "isDragImageSupported", methodSig: "()Z", methodCache: &isDragImageSupported_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// protected java.awt.dnd.DragSourceContext java.awt.dnd.DragSource.createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer,java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)

    private static var createDragSourceContext_MethodID_11: jmethodID?

    open func createDragSourceContext( arg0: DragSourceContextPeer?, arg1: DragGestureEvent?, arg2: Cursor?, arg3: Image?, arg4: Point?, arg5: Transferable?, arg6: DragSourceListener? ) -> DragSourceContext! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = jvalue( l: arg5?.localJavaObject( &__locals ) )
        __args[6] = jvalue( l: arg6?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDragSourceContext", methodSig: "(Ljava/awt/dnd/peer/DragSourceContextPeer;Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)Ljava/awt/dnd/DragSourceContext;", methodCache: &DragSource.createDragSourceContext_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DragSourceContext( javaObject: __return ) : nil
    }

    open func createDragSourceContext( _ _arg0: DragSourceContextPeer?, _ _arg1: DragGestureEvent?, _ _arg2: Cursor?, _ _arg3: Image?, _ _arg4: Point?, _ _arg5: Transferable?, _ _arg6: DragSourceListener? ) -> DragSourceContext! {
        return createDragSourceContext( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public java.awt.dnd.DragGestureRecognizer java.awt.dnd.DragSource.createDefaultDragGestureRecognizer(java.awt.Component,int,java.awt.dnd.DragGestureListener)

    private static var createDefaultDragGestureRecognizer_MethodID_12: jmethodID?

    open func createDefaultDragGestureRecognizer( arg0: Component?, arg1: Int, arg2: DragGestureListener? ) -> DragGestureRecognizer! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDefaultDragGestureRecognizer", methodSig: "(Ljava/awt/Component;ILjava/awt/dnd/DragGestureListener;)Ljava/awt/dnd/DragGestureRecognizer;", methodCache: &DragSource.createDefaultDragGestureRecognizer_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DragGestureRecognizer( javaObject: __return ) : nil
    }

    open func createDefaultDragGestureRecognizer( _ _arg0: Component?, _ _arg1: Int, _ _arg2: DragGestureListener? ) -> DragGestureRecognizer! {
        return createDefaultDragGestureRecognizer( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.dnd.DragSource.addDragSourceListener(java.awt.dnd.DragSourceListener)

    private static var addDragSourceListener_MethodID_13: jmethodID?

    open func addDragSourceListener( arg0: DragSourceListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addDragSourceListener", methodSig: "(Ljava/awt/dnd/DragSourceListener;)V", methodCache: &DragSource.addDragSourceListener_MethodID_13, args: &__args, locals: &__locals )
    }

    open func addDragSourceListener( _ _arg0: DragSourceListener? ) {
        addDragSourceListener( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSource.removeDragSourceListener(java.awt.dnd.DragSourceListener)

    private static var removeDragSourceListener_MethodID_14: jmethodID?

    open func removeDragSourceListener( arg0: DragSourceListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeDragSourceListener", methodSig: "(Ljava/awt/dnd/DragSourceListener;)V", methodCache: &DragSource.removeDragSourceListener_MethodID_14, args: &__args, locals: &__locals )
    }

    open func removeDragSourceListener( _ _arg0: DragSourceListener? ) {
        removeDragSourceListener( arg0: _arg0 )
    }

    /// public java.awt.dnd.DragSourceListener[] java.awt.dnd.DragSource.getDragSourceListeners()

    private static var getDragSourceListeners_MethodID_15: jmethodID?

    open func getDragSourceListeners() -> [DragSourceListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDragSourceListeners", methodSig: "()[Ljava/awt/dnd/DragSourceListener;", methodCache: &DragSource.getDragSourceListeners_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: [DragSourceListenerForward](), from: __return )
    }


    /// public void java.awt.dnd.DragSource.addDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener)

    private static var addDragSourceMotionListener_MethodID_16: jmethodID?

    open func addDragSourceMotionListener( arg0: DragSourceMotionListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addDragSourceMotionListener", methodSig: "(Ljava/awt/dnd/DragSourceMotionListener;)V", methodCache: &DragSource.addDragSourceMotionListener_MethodID_16, args: &__args, locals: &__locals )
    }

    open func addDragSourceMotionListener( _ _arg0: DragSourceMotionListener? ) {
        addDragSourceMotionListener( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSource.removeDragSourceMotionListener(java.awt.dnd.DragSourceMotionListener)

    private static var removeDragSourceMotionListener_MethodID_17: jmethodID?

    open func removeDragSourceMotionListener( arg0: DragSourceMotionListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeDragSourceMotionListener", methodSig: "(Ljava/awt/dnd/DragSourceMotionListener;)V", methodCache: &DragSource.removeDragSourceMotionListener_MethodID_17, args: &__args, locals: &__locals )
    }

    open func removeDragSourceMotionListener( _ _arg0: DragSourceMotionListener? ) {
        removeDragSourceMotionListener( arg0: _arg0 )
    }

    /// public java.awt.dnd.DragSourceMotionListener[] java.awt.dnd.DragSource.getDragSourceMotionListeners()

    private static var getDragSourceMotionListeners_MethodID_18: jmethodID?

    open func getDragSourceMotionListeners() -> [DragSourceMotionListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDragSourceMotionListeners", methodSig: "()[Ljava/awt/dnd/DragSourceMotionListener;", methodCache: &DragSource.getDragSourceMotionListeners_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: [DragSourceMotionListenerForward](), from: __return )
    }


    /// void java.awt.dnd.DragSource.processDragEnter(java.awt.dnd.DragSourceDragEvent)

    /// void java.awt.dnd.DragSource.processDragOver(java.awt.dnd.DragSourceDragEvent)

    /// void java.awt.dnd.DragSource.processDropActionChanged(java.awt.dnd.DragSourceDragEvent)

    /// void java.awt.dnd.DragSource.processDragExit(java.awt.dnd.DragSourceEvent)

    /// void java.awt.dnd.DragSource.processDragDropEnd(java.awt.dnd.DragSourceDropEvent)

    /// void java.awt.dnd.DragSource.processDragMouseMoved(java.awt.dnd.DragSourceDragEvent)

    /// public static int java.awt.dnd.DragSource.getDragThreshold()

    private static var getDragThreshold_MethodID_19: jmethodID?

    open class func getDragThreshold() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticIntMethod( className: "java/awt/dnd/DragSource", classCache: &DragSourceJNIClass, methodName: "getDragThreshold", methodSig: "()I", methodCache: &getDragThreshold_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
