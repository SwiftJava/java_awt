
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.Image ///

open class Image: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ImageJNIClass: jclass?

    /// public static final int java.awt.Image.SCALE_AREA_AVERAGING

    private static var SCALE_AREA_AVERAGING_FieldID: jfieldID?

    public static var SCALE_AREA_AVERAGING: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_AREA_AVERAGING", fieldType: "I", fieldCache: &SCALE_AREA_AVERAGING_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.Image.SCALE_DEFAULT

    private static var SCALE_DEFAULT_FieldID: jfieldID?

    public static var SCALE_DEFAULT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_DEFAULT", fieldType: "I", fieldCache: &SCALE_DEFAULT_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.Image.SCALE_FAST

    private static var SCALE_FAST_FieldID: jfieldID?

    public static var SCALE_FAST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_FAST", fieldType: "I", fieldCache: &SCALE_FAST_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.Image.SCALE_REPLICATE

    private static var SCALE_REPLICATE_FieldID: jfieldID?

    public static var SCALE_REPLICATE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_REPLICATE", fieldType: "I", fieldCache: &SCALE_REPLICATE_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.Image.SCALE_SMOOTH

    private static var SCALE_SMOOTH_FieldID: jfieldID?

    public static var SCALE_SMOOTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_SMOOTH", fieldType: "I", fieldCache: &SCALE_SMOOTH_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return Int(__value)
        }
    }

    /// public static final java.lang.Object java.awt.Image.UndefinedProperty

    private static var UndefinedProperty_FieldID: jfieldID?

    public static var UndefinedProperty: java_swift.JavaObject! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UndefinedProperty", fieldType: "Ljava/lang/Object;", fieldCache: &UndefinedProperty_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
    }

    /// private static java.awt.ImageCapabilities java.awt.Image.defaultImageCaps

    /// protected float java.awt.Image.accelerationPriority

    private static var accelerationPriority_FieldID: jfieldID?

    open var accelerationPriority: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "accelerationPriority", fieldType: "F", fieldCache: &Image.accelerationPriority_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "accelerationPriority", fieldType: "F", fieldCache: &Image.accelerationPriority_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// sun.awt.image.SurfaceManager java.awt.Image.surfaceManager

    // Skipping field: true false false false false false 

    /// public java.awt.Image()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/Image", classCache: &Image.ImageJNIClass, methodSig: "()V", methodCache: &Image.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.Image.flush()

    private static var flush_MethodID_2: jmethodID?

    open func flush() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flush", methodSig: "()V", methodCache: &Image.flush_MethodID_2, args: &__args, locals: &__locals )
    }


    /// public float java.awt.Image.getAccelerationPriority()

    private static var getAccelerationPriority_MethodID_3: jmethodID?

    open func getAccelerationPriority() -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getAccelerationPriority", methodSig: "()F", methodCache: &Image.getAccelerationPriority_MethodID_3, args: &__args, locals: &__locals )
        return __return
    }


    /// public java.awt.ImageCapabilities java.awt.Image.getCapabilities(java.awt.GraphicsConfiguration)

    private static var getCapabilities_MethodID_4: jmethodID?

    open func getCapabilities( gc: GraphicsConfiguration? ) -> ImageCapabilities! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: gc, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCapabilities", methodSig: "(Ljava/awt/GraphicsConfiguration;)Ljava/awt/ImageCapabilities;", methodCache: &Image.getCapabilities_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ImageCapabilities( javaObject: __return ) : nil
    }

    open func getCapabilities( _ _gc: GraphicsConfiguration? ) -> ImageCapabilities! {
        return getCapabilities( gc: _gc )
    }

    /// public abstract java.awt.Graphics java.awt.Image.getGraphics()

    private static var getGraphics_MethodID_5: jmethodID?

    open func getGraphics() -> Graphics! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphics", methodSig: "()Ljava/awt/Graphics;", methodCache: &Image.getGraphics_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Graphics( javaObject: __return ) : nil
    }


    /// public abstract int java.awt.Image.getHeight(java.awt.image.ImageObserver)

    private static var getHeight_MethodID_6: jmethodID?

    open func getHeight( observer: ImageObserver? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: observer, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getHeight", methodSig: "(Ljava/awt/image/ImageObserver;)I", methodCache: &Image.getHeight_MethodID_6, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getHeight( _ _observer: ImageObserver? ) -> Int {
        return getHeight( observer: _observer )
    }

    /// public abstract java.lang.Object java.awt.Image.getProperty(java.lang.String,java.awt.image.ImageObserver)

    private static var getProperty_MethodID_7: jmethodID?

    open func getProperty( name: String?, observer: ImageObserver? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = JNIType.toJava( value: observer, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getProperty", methodSig: "(Ljava/lang/String;Ljava/awt/image/ImageObserver;)Ljava/lang/Object;", methodCache: &Image.getProperty_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func getProperty( _ _name: String?, _ _observer: ImageObserver? ) -> java_swift.JavaObject! {
        return getProperty( name: _name, observer: _observer )
    }

    /// public java.awt.Image java.awt.Image.getScaledInstance(int,int,int)

    private static var getScaledInstance_MethodID_8: jmethodID?

    open func getScaledInstance( width: Int, height: Int, hints: Int ) -> Image! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(width) )
        __args[1] = jvalue( i: jint(height) )
        __args[2] = jvalue( i: jint(hints) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getScaledInstance", methodSig: "(III)Ljava/awt/Image;", methodCache: &Image.getScaledInstance_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    open func getScaledInstance( _ _width: Int, _ _height: Int, _ _hints: Int ) -> Image! {
        return getScaledInstance( width: _width, height: _height, hints: _hints )
    }

    /// public abstract java.awt.image.ImageProducer java.awt.Image.getSource()

    private static var getSource_MethodID_9: jmethodID?

    open func getSource() -> ImageProducer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSource", methodSig: "()Ljava/awt/image/ImageProducer;", methodCache: &Image.getSource_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ImageProducerForward( javaObject: __return ) : nil
    }


    /// public abstract int java.awt.Image.getWidth(java.awt.image.ImageObserver)

    private static var getWidth_MethodID_10: jmethodID?

    open func getWidth( observer: ImageObserver? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: observer, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getWidth", methodSig: "(Ljava/awt/image/ImageObserver;)I", methodCache: &Image.getWidth_MethodID_10, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getWidth( _ _observer: ImageObserver? ) -> Int {
        return getWidth( observer: _observer )
    }

    /// public void java.awt.Image.setAccelerationPriority(float)

    private static var setAccelerationPriority_MethodID_11: jmethodID?

    open func setAccelerationPriority( priority: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: priority )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccelerationPriority", methodSig: "(F)V", methodCache: &Image.setAccelerationPriority_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setAccelerationPriority( _ _priority: Float ) {
        setAccelerationPriority( priority: _priority )
    }

}

