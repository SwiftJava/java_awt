
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:49 GMT 2016 ///

/// class java.awt.Image ///

open class Image: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.Image", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ImageJNIClass: jclass?

    /// private static java.awt.ImageCapabilities java.awt.Image.defaultImageCaps

    /// protected float java.awt.Image.accelerationPriority

    private static var accelerationPriority_FieldID: jfieldID?

    open var accelerationPriority: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "accelerationPriority", fieldType: "F", fieldCache: &Image.accelerationPriority_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "accelerationPriority", fieldType: "F", fieldCache: &Image.accelerationPriority_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public static final java.lang.Object java.awt.Image.UndefinedProperty

    private static var UndefinedProperty_FieldID: jfieldID?

    open static var UndefinedProperty: java_lang.JavaObject! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UndefinedProperty", fieldType: "Ljava/lang/Object;", fieldCache: &UndefinedProperty_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return __value != nil ? java_lang.JavaObject( javaObject: __value ) : nil
        }
    }

    /// public static final int java.awt.Image.SCALE_DEFAULT

    private static var SCALE_DEFAULT_FieldID: jfieldID?

    open static var SCALE_DEFAULT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_DEFAULT", fieldType: "I", fieldCache: &SCALE_DEFAULT_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Image.SCALE_FAST

    private static var SCALE_FAST_FieldID: jfieldID?

    open static var SCALE_FAST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_FAST", fieldType: "I", fieldCache: &SCALE_FAST_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Image.SCALE_SMOOTH

    private static var SCALE_SMOOTH_FieldID: jfieldID?

    open static var SCALE_SMOOTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_SMOOTH", fieldType: "I", fieldCache: &SCALE_SMOOTH_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Image.SCALE_REPLICATE

    private static var SCALE_REPLICATE_FieldID: jfieldID?

    open static var SCALE_REPLICATE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_REPLICATE", fieldType: "I", fieldCache: &SCALE_REPLICATE_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Image.SCALE_AREA_AVERAGING

    private static var SCALE_AREA_AVERAGING_FieldID: jfieldID?

    open static var SCALE_AREA_AVERAGING: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SCALE_AREA_AVERAGING", fieldType: "I", fieldCache: &SCALE_AREA_AVERAGING_FieldID, className: "java/awt/Image", classCache: &ImageJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// sun.awt.image.SurfaceManager java.awt.Image.surfaceManager

    /// public java.awt.Image()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/Image", classCache: &Image.ImageJNIClass, methodSig: "()V", methodCache: &Image.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public abstract java.lang.Object java.awt.Image.getProperty(java.lang.String,java.awt.image.ImageObserver)

    private static var getProperty_MethodID_2: jmethodID?

    open func getProperty( arg0: String?, arg1: ImageObserver? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getProperty", methodSig: "(Ljava/lang/String;Ljava/awt/image/ImageObserver;)Ljava/lang/Object;", methodCache: &Image.getProperty_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getProperty( _ _arg0: String?, _ _arg1: ImageObserver? ) -> java_lang.JavaObject! {
        return getProperty( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.Image.flush()

    private static var flush_MethodID_3: jmethodID?

    open func flush() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flush", methodSig: "()V", methodCache: &Image.flush_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public abstract java.awt.image.ImageProducer java.awt.Image.getSource()

    private static var getSource_MethodID_4: jmethodID?

    open func getSource() -> ImageProducer! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSource", methodSig: "()Ljava/awt/image/ImageProducer;", methodCache: &Image.getSource_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ImageProducerForward( javaObject: __return ) : nil
    }


    /// public abstract int java.awt.Image.getWidth(java.awt.image.ImageObserver)

    private static var getWidth_MethodID_5: jmethodID?

    open func getWidth( arg0: ImageObserver? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getWidth", methodSig: "(Ljava/awt/image/ImageObserver;)I", methodCache: &Image.getWidth_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getWidth( _ _arg0: ImageObserver? ) -> Int {
        return getWidth( arg0: _arg0 )
    }

    /// public abstract int java.awt.Image.getHeight(java.awt.image.ImageObserver)

    private static var getHeight_MethodID_6: jmethodID?

    open func getHeight( arg0: ImageObserver? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getHeight", methodSig: "(Ljava/awt/image/ImageObserver;)I", methodCache: &Image.getHeight_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getHeight( _ _arg0: ImageObserver? ) -> Int {
        return getHeight( arg0: _arg0 )
    }

    /// public abstract java.awt.Graphics java.awt.Image.getGraphics()

    private static var getGraphics_MethodID_7: jmethodID?

    open func getGraphics() -> Graphics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphics", methodSig: "()Ljava/awt/Graphics;", methodCache: &Image.getGraphics_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Graphics( javaObject: __return ) : nil
    }


    /// public java.awt.ImageCapabilities java.awt.Image.getCapabilities(java.awt.GraphicsConfiguration)

    private static var getCapabilities_MethodID_8: jmethodID?

    open func getCapabilities( arg0: GraphicsConfiguration? ) -> ImageCapabilities! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCapabilities", methodSig: "(Ljava/awt/GraphicsConfiguration;)Ljava/awt/ImageCapabilities;", methodCache: &Image.getCapabilities_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ImageCapabilities( javaObject: __return ) : nil
    }

    open func getCapabilities( _ _arg0: GraphicsConfiguration? ) -> ImageCapabilities! {
        return getCapabilities( arg0: _arg0 )
    }

    /// public java.awt.Image java.awt.Image.getScaledInstance(int,int,int)

    private static var getScaledInstance_MethodID_9: jmethodID?

    open func getScaledInstance( arg0: Int, arg1: Int, arg2: Int ) -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getScaledInstance", methodSig: "(III)Ljava/awt/Image;", methodCache: &Image.getScaledInstance_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    open func getScaledInstance( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) -> Image! {
        return getScaledInstance( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.Image.setAccelerationPriority(float)

    private static var setAccelerationPriority_MethodID_10: jmethodID?

    open func setAccelerationPriority( arg0: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccelerationPriority", methodSig: "(F)V", methodCache: &Image.setAccelerationPriority_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setAccelerationPriority( _ _arg0: Float ) {
        setAccelerationPriority( arg0: _arg0 )
    }

    /// public float java.awt.Image.getAccelerationPriority()

    private static var getAccelerationPriority_MethodID_11: jmethodID?

    open func getAccelerationPriority() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getAccelerationPriority", methodSig: "()F", methodCache: &Image.getAccelerationPriority_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


}
