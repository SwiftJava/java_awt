
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:47 GMT 2016 ///

/// class java.awt.Graphics ///

open class Graphics: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.Graphics", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var GraphicsJNIClass: jclass?

    /// protected java.awt.Graphics()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/Graphics", classCache: &Graphics.GraphicsJNIClass, methodSig: "()V", methodCache: &Graphics.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.Graphics.finalize()

    private static var finalize_MethodID_2: jmethodID?

    override open func finalize() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finalize", methodSig: "()V", methodCache: &Graphics.finalize_MethodID_2, args: &__args, locals: &__locals )
    }


    /// public java.lang.String java.awt.Graphics.toString()

    /// public abstract java.awt.Graphics java.awt.Graphics.create()

    private static var create_MethodID_3: jmethodID?

    open func create() -> Graphics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "create", methodSig: "()Ljava/awt/Graphics;", methodCache: &Graphics.create_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Graphics( javaObject: __return ) : nil
    }


    /// public java.awt.Graphics java.awt.Graphics.create(int,int,int,int)

    private static var create_MethodID_4: jmethodID?

    open func create( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) -> Graphics! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "create", methodSig: "(IIII)Ljava/awt/Graphics;", methodCache: &Graphics.create_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Graphics( javaObject: __return ) : nil
    }

    open func create( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) -> Graphics! {
        return create( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.setColor(java.awt.Color)

    private static var setColor_MethodID_5: jmethodID?

    open func setColor( arg0: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &Graphics.setColor_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setColor( _ _arg0: Color? ) {
        setColor( arg0: _arg0 )
    }

    /// public abstract java.awt.FontMetrics java.awt.Graphics.getFontMetrics(java.awt.Font)

    private static var getFontMetrics_MethodID_6: jmethodID?

    open func getFontMetrics( arg0: Font? ) -> FontMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", methodCache: &Graphics.getFontMetrics_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FontMetrics( javaObject: __return ) : nil
    }

    open func getFontMetrics( _ _arg0: Font? ) -> FontMetrics! {
        return getFontMetrics( arg0: _arg0 )
    }

    /// public java.awt.FontMetrics java.awt.Graphics.getFontMetrics()

    private static var getFontMetrics_MethodID_7: jmethodID?

    open func getFontMetrics() -> FontMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "()Ljava/awt/FontMetrics;", methodCache: &Graphics.getFontMetrics_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FontMetrics( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Font java.awt.Graphics.getFont()

    private static var getFont_MethodID_8: jmethodID?

    open func getFont() -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFont", methodSig: "()Ljava/awt/Font;", methodCache: &Graphics.getFont_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }


    /// public abstract boolean java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)

    private static var drawImage_MethodID_9: jmethodID?

    open func drawImage( arg0: Image?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = jvalue( l: arg5?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "drawImage", methodSig: "(Ljava/awt/Image;IIIILjava/awt/image/ImageObserver;)Z", methodCache: &Graphics.drawImage_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func drawImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: ImageObserver? ) -> Bool {
        return drawImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract boolean java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)

    private static var drawImage_MethodID_10: jmethodID?

    open func drawImage( arg0: Image?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Int, arg7: Int, arg8: Int, arg9: Color?, arg10: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 11 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = JNIType.encode( value: arg9, locals: &__locals )
        __args[10] = jvalue( l: arg10?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "drawImage", methodSig: "(Ljava/awt/Image;IIIIIIIILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z", methodCache: &Graphics.drawImage_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func drawImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int, _ _arg7: Int, _ _arg8: Int, _ _arg9: Color?, _ _arg10: ImageObserver? ) -> Bool {
        return drawImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9, arg10: _arg10 )
    }

    /// public abstract boolean java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)

    private static var drawImage_MethodID_11: jmethodID?

    open func drawImage( arg0: Image?, arg1: Int, arg2: Int, arg3: Color?, arg4: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = jvalue( l: arg4?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "drawImage", methodSig: "(Ljava/awt/Image;IILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z", methodCache: &Graphics.drawImage_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func drawImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Color?, _ _arg4: ImageObserver? ) -> Bool {
        return drawImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public abstract boolean java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    private static var drawImage_MethodID_12: jmethodID?

    open func drawImage( arg0: Image?, arg1: Int, arg2: Int, arg3: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "drawImage", methodSig: "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z", methodCache: &Graphics.drawImage_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func drawImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: ImageObserver? ) -> Bool {
        return drawImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract boolean java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)

    private static var drawImage_MethodID_13: jmethodID?

    open func drawImage( arg0: Image?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Int, arg7: Int, arg8: Int, arg9: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 10 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = jvalue( l: arg9?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "drawImage", methodSig: "(Ljava/awt/Image;IIIIIIIILjava/awt/image/ImageObserver;)Z", methodCache: &Graphics.drawImage_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func drawImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int, _ _arg7: Int, _ _arg8: Int, _ _arg9: ImageObserver? ) -> Bool {
        return drawImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9 )
    }

    /// public abstract boolean java.awt.Graphics.drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)

    private static var drawImage_MethodID_14: jmethodID?

    open func drawImage( arg0: Image?, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Color?, arg6: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = jvalue( l: arg6?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "drawImage", methodSig: "(Ljava/awt/Image;IIIILjava/awt/Color;Ljava/awt/image/ImageObserver;)Z", methodCache: &Graphics.drawImage_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func drawImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Color?, _ _arg6: ImageObserver? ) -> Bool {
        return drawImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public abstract void java.awt.Graphics.dispose()

    private static var dispose_MethodID_15: jmethodID?

    open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &Graphics.dispose_MethodID_15, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.Graphics.setFont(java.awt.Font)

    private static var setFont_MethodID_16: jmethodID?

    open func setFont( arg0: Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &Graphics.setFont_MethodID_16, args: &__args, locals: &__locals )
    }

    open func setFont( _ _arg0: Font? ) {
        setFont( arg0: _arg0 )
    }

    /// public abstract java.awt.Rectangle java.awt.Graphics.getClipBounds()

    private static var getClipBounds_MethodID_17: jmethodID?

    open func getClipBounds() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClipBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &Graphics.getClipBounds_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


    /// public java.awt.Rectangle java.awt.Graphics.getClipBounds(java.awt.Rectangle)

    private static var getClipBounds_MethodID_18: jmethodID?

    open func getClipBounds( arg0: Rectangle? ) -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClipBounds", methodSig: "(Ljava/awt/Rectangle;)Ljava/awt/Rectangle;", methodCache: &Graphics.getClipBounds_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }

    open func getClipBounds( _ _arg0: Rectangle? ) -> Rectangle! {
        return getClipBounds( arg0: _arg0 )
    }

    /// public boolean java.awt.Graphics.hitClip(int,int,int,int)

    private static var hitClip_MethodID_19: jmethodID?

    open func hitClip( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hitClip", methodSig: "(IIII)Z", methodCache: &Graphics.hitClip_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func hitClip( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) -> Bool {
        return hitClip( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.setClip(java.awt.Shape)

    private static var setClip_MethodID_20: jmethodID?

    open func setClip( arg0: Shape? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClip", methodSig: "(Ljava/awt/Shape;)V", methodCache: &Graphics.setClip_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setClip( _ _arg0: Shape? ) {
        setClip( arg0: _arg0 )
    }

    /// public abstract void java.awt.Graphics.setClip(int,int,int,int)

    private static var setClip_MethodID_21: jmethodID?

    open func setClip( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClip", methodSig: "(IIII)V", methodCache: &Graphics.setClip_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setClip( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        setClip( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.clearRect(int,int,int,int)

    private static var clearRect_MethodID_22: jmethodID?

    open func clearRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clearRect", methodSig: "(IIII)V", methodCache: &Graphics.clearRect_MethodID_22, args: &__args, locals: &__locals )
    }

    open func clearRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        clearRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.translate(int,int)

    private static var translate_MethodID_23: jmethodID?

    open func translate( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "translate", methodSig: "(II)V", methodCache: &Graphics.translate_MethodID_23, args: &__args, locals: &__locals )
    }

    open func translate( _ _arg0: Int, _ _arg1: Int ) {
        translate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.awt.Shape java.awt.Graphics.getClip()

    private static var getClip_MethodID_24: jmethodID?

    open func getClip() -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClip", methodSig: "()Ljava/awt/Shape;", methodCache: &Graphics.getClip_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Color java.awt.Graphics.getColor()

    private static var getColor_MethodID_25: jmethodID?

    open func getColor() -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColor", methodSig: "()Ljava/awt/Color;", methodCache: &Graphics.getColor_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Color( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.Graphics.drawString(java.lang.String,int,int)

    private static var drawString_MethodID_26: jmethodID?

    open func drawString( arg0: String?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawString", methodSig: "(Ljava/lang/String;II)V", methodCache: &Graphics.drawString_MethodID_26, args: &__args, locals: &__locals )
    }

    open func drawString( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int ) {
        drawString( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.awt.Graphics.drawString(java.text.AttributedCharacterIterator,int,int)

    private static var drawString_MethodID_27: jmethodID?

    open func drawString( arg0: /* java.text.AttributedCharacterIterator */ UnclassedProtocol?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawString", methodSig: "(Ljava/text/AttributedCharacterIterator;II)V", methodCache: &Graphics.drawString_MethodID_27, args: &__args, locals: &__locals )
    }

    open func drawString( _ _arg0: /* java.text.AttributedCharacterIterator */ UnclassedProtocol?, _ _arg1: Int, _ _arg2: Int ) {
        drawString( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.awt.Graphics.setPaintMode()

    private static var setPaintMode_MethodID_28: jmethodID?

    open func setPaintMode() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPaintMode", methodSig: "()V", methodCache: &Graphics.setPaintMode_MethodID_28, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.Graphics.setXORMode(java.awt.Color)

    private static var setXORMode_MethodID_29: jmethodID?

    open func setXORMode( arg0: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setXORMode", methodSig: "(Ljava/awt/Color;)V", methodCache: &Graphics.setXORMode_MethodID_29, args: &__args, locals: &__locals )
    }

    open func setXORMode( _ _arg0: Color? ) {
        setXORMode( arg0: _arg0 )
    }

    /// public abstract void java.awt.Graphics.clipRect(int,int,int,int)

    private static var clipRect_MethodID_30: jmethodID?

    open func clipRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clipRect", methodSig: "(IIII)V", methodCache: &Graphics.clipRect_MethodID_30, args: &__args, locals: &__locals )
    }

    open func clipRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        clipRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.copyArea(int,int,int,int,int,int)

    private static var copyArea_MethodID_31: jmethodID?

    open func copyArea( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "copyArea", methodSig: "(IIIIII)V", methodCache: &Graphics.copyArea_MethodID_31, args: &__args, locals: &__locals )
    }

    open func copyArea( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        copyArea( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract void java.awt.Graphics.drawLine(int,int,int,int)

    private static var drawLine_MethodID_32: jmethodID?

    open func drawLine( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawLine", methodSig: "(IIII)V", methodCache: &Graphics.drawLine_MethodID_32, args: &__args, locals: &__locals )
    }

    open func drawLine( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        drawLine( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.fillRect(int,int,int,int)

    private static var fillRect_MethodID_33: jmethodID?

    open func fillRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fillRect", methodSig: "(IIII)V", methodCache: &Graphics.fillRect_MethodID_33, args: &__args, locals: &__locals )
    }

    open func fillRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        fillRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.Graphics.drawRect(int,int,int,int)

    private static var drawRect_MethodID_34: jmethodID?

    open func drawRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawRect", methodSig: "(IIII)V", methodCache: &Graphics.drawRect_MethodID_34, args: &__args, locals: &__locals )
    }

    open func drawRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        drawRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.drawRoundRect(int,int,int,int,int,int)

    private static var drawRoundRect_MethodID_35: jmethodID?

    open func drawRoundRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawRoundRect", methodSig: "(IIIIII)V", methodCache: &Graphics.drawRoundRect_MethodID_35, args: &__args, locals: &__locals )
    }

    open func drawRoundRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        drawRoundRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract void java.awt.Graphics.fillRoundRect(int,int,int,int,int,int)

    private static var fillRoundRect_MethodID_36: jmethodID?

    open func fillRoundRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fillRoundRect", methodSig: "(IIIIII)V", methodCache: &Graphics.fillRoundRect_MethodID_36, args: &__args, locals: &__locals )
    }

    open func fillRoundRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        fillRoundRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.Graphics.draw3DRect(int,int,int,int,boolean)

    private static var draw3DRect_MethodID_37: jmethodID?

    open func draw3DRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "draw3DRect", methodSig: "(IIIIZ)V", methodCache: &Graphics.draw3DRect_MethodID_37, args: &__args, locals: &__locals )
    }

    open func draw3DRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Bool ) {
        draw3DRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.Graphics.fill3DRect(int,int,int,int,boolean)

    private static var fill3DRect_MethodID_38: jmethodID?

    open func fill3DRect( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fill3DRect", methodSig: "(IIIIZ)V", methodCache: &Graphics.fill3DRect_MethodID_38, args: &__args, locals: &__locals )
    }

    open func fill3DRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Bool ) {
        fill3DRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public abstract void java.awt.Graphics.drawOval(int,int,int,int)

    private static var drawOval_MethodID_39: jmethodID?

    open func drawOval( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawOval", methodSig: "(IIII)V", methodCache: &Graphics.drawOval_MethodID_39, args: &__args, locals: &__locals )
    }

    open func drawOval( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        drawOval( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.fillOval(int,int,int,int)

    private static var fillOval_MethodID_40: jmethodID?

    open func fillOval( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fillOval", methodSig: "(IIII)V", methodCache: &Graphics.fillOval_MethodID_40, args: &__args, locals: &__locals )
    }

    open func fillOval( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        fillOval( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.Graphics.drawArc(int,int,int,int,int,int)

    private static var drawArc_MethodID_41: jmethodID?

    open func drawArc( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawArc", methodSig: "(IIIIII)V", methodCache: &Graphics.drawArc_MethodID_41, args: &__args, locals: &__locals )
    }

    open func drawArc( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        drawArc( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract void java.awt.Graphics.fillArc(int,int,int,int,int,int)

    private static var fillArc_MethodID_42: jmethodID?

    open func fillArc( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fillArc", methodSig: "(IIIIII)V", methodCache: &Graphics.fillArc_MethodID_42, args: &__args, locals: &__locals )
    }

    open func fillArc( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int ) {
        fillArc( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract void java.awt.Graphics.drawPolyline(int[],int[],int)

    private static var drawPolyline_MethodID_43: jmethodID?

    open func drawPolyline( arg0: [Int32]?, arg1: [Int32]?, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawPolyline", methodSig: "([I[II)V", methodCache: &Graphics.drawPolyline_MethodID_43, args: &__args, locals: &__locals )
    }

    open func drawPolyline( _ _arg0: [Int32]?, _ _arg1: [Int32]?, _ _arg2: Int ) {
        drawPolyline( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.Graphics.drawPolygon(java.awt.Polygon)

    private static var drawPolygon_MethodID_44: jmethodID?

    open func drawPolygon( arg0: Polygon? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawPolygon", methodSig: "(Ljava/awt/Polygon;)V", methodCache: &Graphics.drawPolygon_MethodID_44, args: &__args, locals: &__locals )
    }

    open func drawPolygon( _ _arg0: Polygon? ) {
        drawPolygon( arg0: _arg0 )
    }

    /// public abstract void java.awt.Graphics.drawPolygon(int[],int[],int)

    private static var drawPolygon_MethodID_45: jmethodID?

    open func drawPolygon( arg0: [Int32]?, arg1: [Int32]?, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawPolygon", methodSig: "([I[II)V", methodCache: &Graphics.drawPolygon_MethodID_45, args: &__args, locals: &__locals )
    }

    open func drawPolygon( _ _arg0: [Int32]?, _ _arg1: [Int32]?, _ _arg2: Int ) {
        drawPolygon( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.Graphics.fillPolygon(java.awt.Polygon)

    private static var fillPolygon_MethodID_46: jmethodID?

    open func fillPolygon( arg0: Polygon? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fillPolygon", methodSig: "(Ljava/awt/Polygon;)V", methodCache: &Graphics.fillPolygon_MethodID_46, args: &__args, locals: &__locals )
    }

    open func fillPolygon( _ _arg0: Polygon? ) {
        fillPolygon( arg0: _arg0 )
    }

    /// public abstract void java.awt.Graphics.fillPolygon(int[],int[],int)

    private static var fillPolygon_MethodID_47: jmethodID?

    open func fillPolygon( arg0: [Int32]?, arg1: [Int32]?, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fillPolygon", methodSig: "([I[II)V", methodCache: &Graphics.fillPolygon_MethodID_47, args: &__args, locals: &__locals )
    }

    open func fillPolygon( _ _arg0: [Int32]?, _ _arg1: [Int32]?, _ _arg2: Int ) {
        fillPolygon( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.Graphics.drawChars(char[],int,int,int,int)

    private static var drawChars_MethodID_48: jmethodID?

    open func drawChars( arg0: [UInt16]?, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawChars", methodSig: "([CIIII)V", methodCache: &Graphics.drawChars_MethodID_48, args: &__args, locals: &__locals )
    }

    open func drawChars( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        drawChars( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.Graphics.drawBytes(byte[],int,int,int,int)

    private static var drawBytes_MethodID_49: jmethodID?

    open func drawBytes( arg0: [Int8]?, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawBytes", methodSig: "([BIIII)V", methodCache: &Graphics.drawBytes_MethodID_49, args: &__args, locals: &__locals )
    }

    open func drawBytes( _ _arg0: [Int8]?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        drawBytes( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public java.awt.Rectangle java.awt.Graphics.getClipRect()

    private static var getClipRect_MethodID_50: jmethodID?

    open func getClipRect() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClipRect", methodSig: "()Ljava/awt/Rectangle;", methodCache: &Graphics.getClipRect_MethodID_50, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


}
