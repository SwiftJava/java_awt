
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:08 GMT 2016 ///

/// class java.awt.font.TransformAttribute ///

open class TransformAttribute: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.font.TransformAttribute", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TransformAttributeJNIClass: jclass?

    /// private java.awt.geom.AffineTransform java.awt.font.TransformAttribute.transform

    /// public static final java.awt.font.TransformAttribute java.awt.font.TransformAttribute.IDENTITY

    private static var IDENTITY_FieldID: jfieldID?

    open static var IDENTITY: TransformAttribute! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "IDENTITY", fieldType: "Ljava/awt/font/TransformAttribute;", fieldCache: &IDENTITY_FieldID, className: "java/awt/font/TransformAttribute", classCache: &TransformAttributeJNIClass )
            return __value != nil ? TransformAttribute( javaObject: __value ) : nil
        }
    }

    /// static final long java.awt.font.TransformAttribute.serialVersionUID

    /// public java.awt.font.TransformAttribute(java.awt.geom.AffineTransform)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/font/TransformAttribute", classCache: &TransformAttribute.TransformAttributeJNIClass, methodSig: "(Ljava/awt/geom/AffineTransform;)V", methodCache: &TransformAttribute.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: AffineTransform? ) {
        self.init( arg0: _arg0 )
    }

    /// public boolean java.awt.font.TransformAttribute.equals(java.lang.Object)

    /// public int java.awt.font.TransformAttribute.hashCode()

    /// private void java.awt.font.TransformAttribute.writeObject(java.io.ObjectOutputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// private java.lang.Object java.awt.font.TransformAttribute.readResolve() throws java.io.ObjectStreamException

    /// public java.awt.geom.AffineTransform java.awt.font.TransformAttribute.getTransform()

    private static var getTransform_MethodID_2: jmethodID?

    open func getTransform() -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransform", methodSig: "()Ljava/awt/geom/AffineTransform;", methodCache: &TransformAttribute.getTransform_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }


    /// public boolean java.awt.font.TransformAttribute.isIdentity()

    private static var isIdentity_MethodID_3: jmethodID?

    open func isIdentity() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isIdentity", methodSig: "()Z", methodCache: &TransformAttribute.isIdentity_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


}
