
import java_swift
import java_util
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:28 GMT 2016 ///

/// class java.awt.event.AWTEventListenerProxy ///

open class AWTEventListenerProxy: java_util.EventListenerProxy, AWTEventListener {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.event.AWTEventListenerProxy", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AWTEventListenerProxyJNIClass: jclass?

    /// private long java.awt.event.AWTEventListenerProxy.eventMask

    /// private final java.util.EventListener java.util.EventListenerProxy.listener

    /// public java.awt.event.AWTEventListenerProxy(long,java.awt.event.AWTEventListener)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int64, arg1: AWTEventListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/awt/event/AWTEventListenerProxy", classCache: &AWTEventListenerProxy.AWTEventListenerProxyJNIClass, methodSig: "(JLjava/awt/event/AWTEventListener;)V", methodCache: &AWTEventListenerProxy.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int64, _ _arg1: AWTEventListener? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.event.AWTEventListenerProxy.eventDispatched(java.awt.AWTEvent)

    private static var eventDispatched_MethodID_2: jmethodID?

    open func eventDispatched( arg0: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "eventDispatched", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &AWTEventListenerProxy.eventDispatched_MethodID_2, args: &__args, locals: &__locals )
    }

    open func eventDispatched( _ _arg0: AWTEvent? ) {
        eventDispatched( arg0: _arg0 )
    }

    /// public long java.awt.event.AWTEventListenerProxy.getEventMask()

    private static var getEventMask_MethodID_3: jmethodID?

    open func getEventMask() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getEventMask", methodSig: "()J", methodCache: &AWTEventListenerProxy.getEventMask_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int64(), from: __return )
    }


}
