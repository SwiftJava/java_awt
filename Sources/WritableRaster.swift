
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:31 GMT 2016 ///

/// class java.awt.image.WritableRaster ///

open class WritableRaster: Raster {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.WritableRaster", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var WritableRasterJNIClass: jclass?

    /// protected java.awt.image.SampleModel java.awt.image.Raster.sampleModel

    private static var sampleModel_FieldID: jfieldID?

    override open var sampleModel: SampleModel! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "sampleModel", fieldType: "Ljava/awt/image/SampleModel;", fieldCache: &WritableRaster.sampleModel_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? SampleModel( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "sampleModel", fieldType: "Ljava/awt/image/SampleModel;", fieldCache: &WritableRaster.sampleModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.image.DataBuffer java.awt.image.Raster.dataBuffer

    private static var dataBuffer_FieldID: jfieldID?

    override open var dataBuffer: DataBuffer! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "dataBuffer", fieldType: "Ljava/awt/image/DataBuffer;", fieldCache: &WritableRaster.dataBuffer_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? DataBuffer( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "dataBuffer", fieldType: "Ljava/awt/image/DataBuffer;", fieldCache: &WritableRaster.dataBuffer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.minX

    private static var minX_FieldID: jfieldID?

    override open var minX: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "minX", fieldType: "I", fieldCache: &WritableRaster.minX_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "minX", fieldType: "I", fieldCache: &WritableRaster.minX_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.minY

    private static var minY_FieldID: jfieldID?

    override open var minY: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "minY", fieldType: "I", fieldCache: &WritableRaster.minY_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "minY", fieldType: "I", fieldCache: &WritableRaster.minY_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.width

    private static var width_FieldID: jfieldID?

    override open var width: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "width", fieldType: "I", fieldCache: &WritableRaster.width_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "width", fieldType: "I", fieldCache: &WritableRaster.width_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.height

    private static var height_FieldID: jfieldID?

    override open var height: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "height", fieldType: "I", fieldCache: &WritableRaster.height_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "height", fieldType: "I", fieldCache: &WritableRaster.height_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.sampleModelTranslateX

    private static var sampleModelTranslateX_FieldID: jfieldID?

    override open var sampleModelTranslateX: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "sampleModelTranslateX", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateX_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "sampleModelTranslateX", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateX_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.sampleModelTranslateY

    private static var sampleModelTranslateY_FieldID: jfieldID?

    override open var sampleModelTranslateY: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "sampleModelTranslateY", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateY_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "sampleModelTranslateY", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateY_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.numBands

    private static var numBands_FieldID: jfieldID?

    override open var numBands: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &WritableRaster.numBands_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &WritableRaster.numBands_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.numDataElements

    private static var numDataElements_FieldID: jfieldID?

    override open var numDataElements: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numDataElements", fieldType: "I", fieldCache: &WritableRaster.numDataElements_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numDataElements", fieldType: "I", fieldCache: &WritableRaster.numDataElements_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.awt.image.Raster java.awt.image.Raster.parent

    private static var parent_FieldID: jfieldID?

    override open var parent: Raster! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "parent", fieldType: "Ljava/awt/image/Raster;", fieldCache: &WritableRaster.parent_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? Raster( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "parent", fieldType: "Ljava/awt/image/Raster;", fieldCache: &WritableRaster.parent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.image.WritableRaster(java.awt.image.SampleModel,java.awt.Point)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: SampleModel?, arg1: Point? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/WritableRaster", classCache: &WritableRaster.WritableRasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/Point;)V", methodCache: &WritableRaster.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SampleModel?, _ _arg1: Point? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// protected java.awt.image.WritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: SampleModel?, arg1: DataBuffer?, arg2: Point? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/WritableRaster", classCache: &WritableRaster.WritableRasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Point;)V", methodCache: &WritableRaster.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SampleModel?, _ _arg1: DataBuffer?, _ _arg2: Point? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// protected java.awt.image.WritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Rectangle,java.awt.Point,java.awt.image.WritableRaster)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: SampleModel?, arg1: DataBuffer?, arg2: Rectangle?, arg3: Point?, arg4: WritableRaster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/WritableRaster", classCache: &WritableRaster.WritableRasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Rectangle;Ljava/awt/Point;Ljava/awt/image/WritableRaster;)V", methodCache: &WritableRaster.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: SampleModel?, _ _arg1: DataBuffer?, _ _arg2: Rectangle?, _ _arg3: Point?, _ _arg4: WritableRaster? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.image.WritableRaster.setRect(int,int,java.awt.image.Raster)

    private static var setRect_MethodID_4: jmethodID?

    open func setRect( arg0: Int, arg1: Int, arg2: Raster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRect", methodSig: "(IILjava/awt/image/Raster;)V", methodCache: &WritableRaster.setRect_MethodID_4, args: &__args, locals: &__locals )
    }

    open func setRect( _ _arg0: Int, _ _arg1: Int, _ _arg2: Raster? ) {
        setRect( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.image.WritableRaster.setRect(java.awt.image.Raster)

    private static var setRect_MethodID_5: jmethodID?

    open func setRect( arg0: Raster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRect", methodSig: "(Ljava/awt/image/Raster;)V", methodCache: &WritableRaster.setRect_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setRect( _ _arg0: Raster? ) {
        setRect( arg0: _arg0 )
    }

    /// public java.awt.image.WritableRaster java.awt.image.WritableRaster.createWritableChild(int,int,int,int,int,int,int[])

    private static var createWritableChild_MethodID_6: jmethodID?

    open func createWritableChild( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: [Int32]? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createWritableChild", methodSig: "(IIIIII[I)Ljava/awt/image/WritableRaster;", methodCache: &WritableRaster.createWritableChild_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createWritableChild( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: [Int32]? ) -> WritableRaster! {
        return createWritableChild( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public java.awt.image.WritableRaster java.awt.image.WritableRaster.getWritableParent()

    private static var getWritableParent_MethodID_7: jmethodID?

    open func getWritableParent() -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWritableParent", methodSig: "()Ljava/awt/image/WritableRaster;", methodCache: &WritableRaster.getWritableParent_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }


    /// public java.awt.image.WritableRaster java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)

    private static var createWritableTranslatedChild_MethodID_8: jmethodID?

    open func createWritableTranslatedChild( arg0: Int, arg1: Int ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createWritableTranslatedChild", methodSig: "(II)Ljava/awt/image/WritableRaster;", methodCache: &WritableRaster.createWritableTranslatedChild_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createWritableTranslatedChild( _ _arg0: Int, _ _arg1: Int ) -> WritableRaster! {
        return createWritableTranslatedChild( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.image.WritableRaster.setDataElements(int,int,java.lang.Object)

    private static var setDataElements_MethodID_9: jmethodID?

    open func setDataElements( arg0: Int, arg1: Int, arg2: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IILjava/lang/Object;)V", methodCache: &WritableRaster.setDataElements_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: java_lang.JavaObject? ) {
        setDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.image.WritableRaster.setDataElements(int,int,java.awt.image.Raster)

    private static var setDataElements_MethodID_10: jmethodID?

    open func setDataElements( arg0: Int, arg1: Int, arg2: Raster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IILjava/awt/image/Raster;)V", methodCache: &WritableRaster.setDataElements_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: Raster? ) {
        setDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.image.WritableRaster.setDataElements(int,int,int,int,java.lang.Object)

    private static var setDataElements_MethodID_11: jmethodID?

    open func setDataElements( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IIIILjava/lang/Object;)V", methodCache: &WritableRaster.setDataElements_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: java_lang.JavaObject? ) {
        setDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.image.WritableRaster.setPixel(int,int,int[])

    private static var setPixel_MethodID_12: jmethodID?

    open func setPixel( arg0: Int, arg1: Int, arg2: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[I)V", methodCache: &WritableRaster.setPixel_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Int32]? ) {
        setPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.image.WritableRaster.setPixel(int,int,float[])

    private static var setPixel_MethodID_13: jmethodID?

    open func setPixel( arg0: Int, arg1: Int, arg2: [Float]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[F)V", methodCache: &WritableRaster.setPixel_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Float]? ) {
        setPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.image.WritableRaster.setPixel(int,int,double[])

    private static var setPixel_MethodID_14: jmethodID?

    open func setPixel( arg0: Int, arg1: Int, arg2: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[D)V", methodCache: &WritableRaster.setPixel_MethodID_14, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Double]? ) {
        setPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.image.WritableRaster.setPixels(int,int,int,int,float[])

    private static var setPixels_MethodID_15: jmethodID?

    open func setPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Float]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[F)V", methodCache: &WritableRaster.setPixels_MethodID_15, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Float]? ) {
        setPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.image.WritableRaster.setPixels(int,int,int,int,int[])

    private static var setPixels_MethodID_16: jmethodID?

    open func setPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[I)V", methodCache: &WritableRaster.setPixels_MethodID_16, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Int32]? ) {
        setPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.image.WritableRaster.setPixels(int,int,int,int,double[])

    private static var setPixels_MethodID_17: jmethodID?

    open func setPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[D)V", methodCache: &WritableRaster.setPixels_MethodID_17, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Double]? ) {
        setPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.image.WritableRaster.setSample(int,int,int,float)

    private static var setSample_MethodID_18: jmethodID?

    open func setSample( arg0: Int, arg1: Int, arg2: Int, arg3: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIIF)V", methodCache: &WritableRaster.setSample_MethodID_18, args: &__args, locals: &__locals )
    }

    open func setSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Float ) {
        setSample( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.image.WritableRaster.setSample(int,int,int,int)

    private static var setSample_MethodID_19: jmethodID?

    open func setSample( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIII)V", methodCache: &WritableRaster.setSample_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        setSample( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.image.WritableRaster.setSample(int,int,int,double)

    private static var setSample_MethodID_20: jmethodID?

    open func setSample( arg0: Int, arg1: Int, arg2: Int, arg3: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIID)V", methodCache: &WritableRaster.setSample_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Double ) {
        setSample( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.image.WritableRaster.setSamples(int,int,int,int,int,int[])

    private static var setSamples_MethodID_21: jmethodID?

    open func setSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[I)V", methodCache: &WritableRaster.setSamples_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]? ) {
        setSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.image.WritableRaster.setSamples(int,int,int,int,int,float[])

    private static var setSamples_MethodID_22: jmethodID?

    open func setSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Float]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[F)V", methodCache: &WritableRaster.setSamples_MethodID_22, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Float]? ) {
        setSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.image.WritableRaster.setSamples(int,int,int,int,int,double[])

    private static var setSamples_MethodID_23: jmethodID?

    open func setSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[D)V", methodCache: &WritableRaster.setSamples_MethodID_23, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Double]? ) {
        setSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

}
