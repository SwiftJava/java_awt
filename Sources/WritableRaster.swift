
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.image.WritableRaster ///

open class WritableRaster: Raster {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var WritableRasterJNIClass: jclass?

    /// protected java.awt.image.SampleModel java.awt.image.Raster.sampleModel

    private static var sampleModel_FieldID: jfieldID?

    override open var sampleModel: SampleModel! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "sampleModel", fieldType: "Ljava/awt/image/SampleModel;", fieldCache: &WritableRaster.sampleModel_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? SampleModel( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "sampleModel", fieldType: "Ljava/awt/image/SampleModel;", fieldCache: &WritableRaster.sampleModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.image.DataBuffer java.awt.image.Raster.dataBuffer

    private static var dataBuffer_FieldID: jfieldID?

    override open var dataBuffer: DataBuffer! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "dataBuffer", fieldType: "Ljava/awt/image/DataBuffer;", fieldCache: &WritableRaster.dataBuffer_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? DataBuffer( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "dataBuffer", fieldType: "Ljava/awt/image/DataBuffer;", fieldCache: &WritableRaster.dataBuffer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.minX

    private static var minX_FieldID: jfieldID?

    override open var minX: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "minX", fieldType: "I", fieldCache: &WritableRaster.minX_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "minX", fieldType: "I", fieldCache: &WritableRaster.minX_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.minY

    private static var minY_FieldID: jfieldID?

    override open var minY: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "minY", fieldType: "I", fieldCache: &WritableRaster.minY_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "minY", fieldType: "I", fieldCache: &WritableRaster.minY_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.width

    private static var width_FieldID: jfieldID?

    override open var width: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "width", fieldType: "I", fieldCache: &WritableRaster.width_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "width", fieldType: "I", fieldCache: &WritableRaster.width_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.height

    private static var height_FieldID: jfieldID?

    override open var height: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "height", fieldType: "I", fieldCache: &WritableRaster.height_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "height", fieldType: "I", fieldCache: &WritableRaster.height_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.sampleModelTranslateX

    private static var sampleModelTranslateX_FieldID: jfieldID?

    override open var sampleModelTranslateX: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "sampleModelTranslateX", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateX_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "sampleModelTranslateX", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateX_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.sampleModelTranslateY

    private static var sampleModelTranslateY_FieldID: jfieldID?

    override open var sampleModelTranslateY: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "sampleModelTranslateY", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateY_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "sampleModelTranslateY", fieldType: "I", fieldCache: &WritableRaster.sampleModelTranslateY_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.numBands

    private static var numBands_FieldID: jfieldID?

    override open var numBands: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &WritableRaster.numBands_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &WritableRaster.numBands_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.Raster.numDataElements

    private static var numDataElements_FieldID: jfieldID?

    override open var numDataElements: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numDataElements", fieldType: "I", fieldCache: &WritableRaster.numDataElements_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numDataElements", fieldType: "I", fieldCache: &WritableRaster.numDataElements_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.awt.image.Raster java.awt.image.Raster.parent

    private static var parent_FieldID: jfieldID?

    override open var parent: Raster! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "parent", fieldType: "Ljava/awt/image/Raster;", fieldCache: &WritableRaster.parent_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? Raster( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "parent", fieldType: "Ljava/awt/image/Raster;", fieldCache: &WritableRaster.parent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.image.WritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Rectangle,java.awt.Point,java.awt.image.WritableRaster)

    private static var new_MethodID_1: jmethodID?

    public convenience init( sampleModel: SampleModel?, dataBuffer: DataBuffer?, aRegion: Rectangle?, sampleModelTranslate: Point?, parent: WritableRaster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: sampleModel != nil ? sampleModel! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: dataBuffer != nil ? dataBuffer! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: aRegion != nil ? aRegion! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: sampleModelTranslate != nil ? sampleModelTranslate! as JNIObject : nil, locals: &__locals )
        __args[4] = JNIType.toJava( value: parent != nil ? parent! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/WritableRaster", classCache: &WritableRaster.WritableRasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Rectangle;Ljava/awt/Point;Ljava/awt/image/WritableRaster;)V", methodCache: &WritableRaster.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _sampleModel: SampleModel?, _ _dataBuffer: DataBuffer?, _ _aRegion: Rectangle?, _ _sampleModelTranslate: Point?, _ _parent: WritableRaster? ) {
        self.init( sampleModel: _sampleModel, dataBuffer: _dataBuffer, aRegion: _aRegion, sampleModelTranslate: _sampleModelTranslate, parent: _parent )
    }

    /// protected java.awt.image.WritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)

    private static var new_MethodID_2: jmethodID?

    public convenience init( sampleModel: SampleModel?, dataBuffer: DataBuffer?, origin: Point? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: sampleModel != nil ? sampleModel! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: dataBuffer != nil ? dataBuffer! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: origin != nil ? origin! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/WritableRaster", classCache: &WritableRaster.WritableRasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/image/DataBuffer;Ljava/awt/Point;)V", methodCache: &WritableRaster.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _sampleModel: SampleModel?, _ _dataBuffer: DataBuffer?, _ _origin: Point? ) {
        self.init( sampleModel: _sampleModel, dataBuffer: _dataBuffer, origin: _origin )
    }

    /// protected java.awt.image.WritableRaster(java.awt.image.SampleModel,java.awt.Point)

    private static var new_MethodID_3: jmethodID?

    public convenience init( sampleModel: SampleModel?, origin: Point? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: sampleModel != nil ? sampleModel! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: origin != nil ? origin! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/WritableRaster", classCache: &WritableRaster.WritableRasterJNIClass, methodSig: "(Ljava/awt/image/SampleModel;Ljava/awt/Point;)V", methodCache: &WritableRaster.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _sampleModel: SampleModel?, _ _origin: Point? ) {
        self.init( sampleModel: _sampleModel, origin: _origin )
    }

    /// public java.awt.image.WritableRaster java.awt.image.WritableRaster.createWritableChild(int,int,int,int,int,int,int[])

    private static var createWritableChild_MethodID_4: jmethodID?

    open func createWritableChild( parentX: Int, parentY: Int, w: Int, h: Int, childMinX: Int, childMinY: Int, bandList: [Int32]? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: parentX, locals: &__locals )
        __args[1] = JNIType.toJava( value: parentY, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: childMinX, locals: &__locals )
        __args[5] = JNIType.toJava( value: childMinY, locals: &__locals )
        __args[6] = JNIType.toJava( value: bandList, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createWritableChild", methodSig: "(IIIIII[I)Ljava/awt/image/WritableRaster;", methodCache: &WritableRaster.createWritableChild_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createWritableChild( _ _parentX: Int, _ _parentY: Int, _ _w: Int, _ _h: Int, _ _childMinX: Int, _ _childMinY: Int, _ _bandList: [Int32]? ) -> WritableRaster! {
        return createWritableChild( parentX: _parentX, parentY: _parentY, w: _w, h: _h, childMinX: _childMinX, childMinY: _childMinY, bandList: _bandList )
    }

    /// public java.awt.image.WritableRaster java.awt.image.WritableRaster.getWritableParent()

    private static var getWritableParent_MethodID_5: jmethodID?

    open func getWritableParent() -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWritableParent", methodSig: "()Ljava/awt/image/WritableRaster;", methodCache: &WritableRaster.getWritableParent_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }


    /// public java.awt.image.WritableRaster java.awt.image.WritableRaster.createWritableTranslatedChild(int,int)

    private static var createWritableTranslatedChild_MethodID_6: jmethodID?

    open func createWritableTranslatedChild( childMinX: Int, childMinY: Int ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: childMinX, locals: &__locals )
        __args[1] = JNIType.toJava( value: childMinY, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createWritableTranslatedChild", methodSig: "(II)Ljava/awt/image/WritableRaster;", methodCache: &WritableRaster.createWritableTranslatedChild_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createWritableTranslatedChild( _ _childMinX: Int, _ _childMinY: Int ) -> WritableRaster! {
        return createWritableTranslatedChild( childMinX: _childMinX, childMinY: _childMinY )
    }

    /// public void java.awt.image.WritableRaster.setDataElements(int,int,int,int,java.lang.Object)

    private static var setDataElements_MethodID_7: jmethodID?

    open func setDataElements( x: Int, y: Int, w: Int, h: Int, inData: java_swift.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: inData != nil ? inData! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IIIILjava/lang/Object;)V", methodCache: &WritableRaster.setDataElements_MethodID_7, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int, _ _inData: java_swift.JavaObject? ) {
        setDataElements( x: _x, y: _y, w: _w, h: _h, inData: _inData )
    }

    /// public void java.awt.image.WritableRaster.setDataElements(int,int,java.awt.image.Raster)

    private static var setDataElements_MethodID_8: jmethodID?

    open func setDataElements( x: Int, y: Int, inRaster: Raster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: inRaster != nil ? inRaster! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IILjava/awt/image/Raster;)V", methodCache: &WritableRaster.setDataElements_MethodID_8, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _x: Int, _ _y: Int, _ _inRaster: Raster? ) {
        setDataElements( x: _x, y: _y, inRaster: _inRaster )
    }

    /// public void java.awt.image.WritableRaster.setDataElements(int,int,java.lang.Object)

    private static var setDataElements_MethodID_9: jmethodID?

    open func setDataElements( x: Int, y: Int, inData: java_swift.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: inData != nil ? inData! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IILjava/lang/Object;)V", methodCache: &WritableRaster.setDataElements_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _x: Int, _ _y: Int, _ _inData: java_swift.JavaObject? ) {
        setDataElements( x: _x, y: _y, inData: _inData )
    }

    /// public void java.awt.image.WritableRaster.setPixel(int,int,int[])

    private static var setPixel_MethodID_10: jmethodID?

    open func setPixel( x: Int, y: Int, iArray: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: iArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[I)V", methodCache: &WritableRaster.setPixel_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _x: Int, _ _y: Int, _ _iArray: [Int32]? ) {
        setPixel( x: _x, y: _y, iArray: _iArray )
    }

    /// public void java.awt.image.WritableRaster.setPixel(int,int,float[])

    private static var setPixel_MethodID_11: jmethodID?

    open func setPixel( x: Int, y: Int, fArray: [Float]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: fArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[F)V", methodCache: &WritableRaster.setPixel_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _x: Int, _ _y: Int, _ _fArray: [Float]? ) {
        setPixel( x: _x, y: _y, fArray: _fArray )
    }

    /// public void java.awt.image.WritableRaster.setPixel(int,int,double[])

    private static var setPixel_MethodID_12: jmethodID?

    open func setPixel( x: Int, y: Int, dArray: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: dArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[D)V", methodCache: &WritableRaster.setPixel_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _x: Int, _ _y: Int, _ _dArray: [Double]? ) {
        setPixel( x: _x, y: _y, dArray: _dArray )
    }

    /// public void java.awt.image.WritableRaster.setPixels(int,int,int,int,float[])

    private static var setPixels_MethodID_13: jmethodID?

    open func setPixels( x: Int, y: Int, w: Int, h: Int, fArray: [Float]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: fArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[F)V", methodCache: &WritableRaster.setPixels_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int, _ _fArray: [Float]? ) {
        setPixels( x: _x, y: _y, w: _w, h: _h, fArray: _fArray )
    }

    /// public void java.awt.image.WritableRaster.setPixels(int,int,int,int,int[])

    private static var setPixels_MethodID_14: jmethodID?

    open func setPixels( x: Int, y: Int, w: Int, h: Int, iArray: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: iArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[I)V", methodCache: &WritableRaster.setPixels_MethodID_14, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int, _ _iArray: [Int32]? ) {
        setPixels( x: _x, y: _y, w: _w, h: _h, iArray: _iArray )
    }

    /// public void java.awt.image.WritableRaster.setPixels(int,int,int,int,double[])

    private static var setPixels_MethodID_15: jmethodID?

    open func setPixels( x: Int, y: Int, w: Int, h: Int, dArray: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: dArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[D)V", methodCache: &WritableRaster.setPixels_MethodID_15, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int, _ _dArray: [Double]? ) {
        setPixels( x: _x, y: _y, w: _w, h: _h, dArray: _dArray )
    }

    /// public void java.awt.image.WritableRaster.setSample(int,int,int,double)

    private static var setSample_MethodID_16: jmethodID?

    open func setSample( x: Int, y: Int, b: Int, s: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: b, locals: &__locals )
        __args[3] = JNIType.toJava( value: s, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIID)V", methodCache: &WritableRaster.setSample_MethodID_16, args: &__args, locals: &__locals )
    }

    open func setSample( _ _x: Int, _ _y: Int, _ _b: Int, _ _s: Double ) {
        setSample( x: _x, y: _y, b: _b, s: _s )
    }

    /// public void java.awt.image.WritableRaster.setSample(int,int,int,float)

    private static var setSample_MethodID_17: jmethodID?

    open func setSample( x: Int, y: Int, b: Int, s: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: b, locals: &__locals )
        __args[3] = JNIType.toJava( value: s, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIIF)V", methodCache: &WritableRaster.setSample_MethodID_17, args: &__args, locals: &__locals )
    }

    open func setSample( _ _x: Int, _ _y: Int, _ _b: Int, _ _s: Float ) {
        setSample( x: _x, y: _y, b: _b, s: _s )
    }

    /// public void java.awt.image.WritableRaster.setSample(int,int,int,int)

    private static var setSample_MethodID_18: jmethodID?

    open func setSample( x: Int, y: Int, b: Int, s: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: b, locals: &__locals )
        __args[3] = JNIType.toJava( value: s, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIII)V", methodCache: &WritableRaster.setSample_MethodID_18, args: &__args, locals: &__locals )
    }

    open func setSample( _ _x: Int, _ _y: Int, _ _b: Int, _ _s: Int ) {
        setSample( x: _x, y: _y, b: _b, s: _s )
    }

    /// public void java.awt.image.WritableRaster.setSamples(int,int,int,int,int,int[])

    private static var setSamples_MethodID_19: jmethodID?

    open func setSamples( x: Int, y: Int, w: Int, h: Int, b: Int, iArray: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: b, locals: &__locals )
        __args[5] = JNIType.toJava( value: iArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[I)V", methodCache: &WritableRaster.setSamples_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int, _ _b: Int, _ _iArray: [Int32]? ) {
        setSamples( x: _x, y: _y, w: _w, h: _h, b: _b, iArray: _iArray )
    }

    /// public void java.awt.image.WritableRaster.setSamples(int,int,int,int,int,float[])

    private static var setSamples_MethodID_20: jmethodID?

    open func setSamples( x: Int, y: Int, w: Int, h: Int, b: Int, fArray: [Float]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: b, locals: &__locals )
        __args[5] = JNIType.toJava( value: fArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[F)V", methodCache: &WritableRaster.setSamples_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int, _ _b: Int, _ _fArray: [Float]? ) {
        setSamples( x: _x, y: _y, w: _w, h: _h, b: _b, fArray: _fArray )
    }

    /// public void java.awt.image.WritableRaster.setSamples(int,int,int,int,int,double[])

    private static var setSamples_MethodID_21: jmethodID?

    open func setSamples( x: Int, y: Int, w: Int, h: Int, b: Int, dArray: [Double]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: b, locals: &__locals )
        __args[5] = JNIType.toJava( value: dArray, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[D)V", methodCache: &WritableRaster.setSamples_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int, _ _b: Int, _ _dArray: [Double]? ) {
        setSamples( x: _x, y: _y, w: _w, h: _h, b: _b, dArray: _dArray )
    }

    /// public void java.awt.image.WritableRaster.setRect(java.awt.image.Raster)

    private static var setRect_MethodID_22: jmethodID?

    open func setRect( srcRaster: Raster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: srcRaster != nil ? srcRaster! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRect", methodSig: "(Ljava/awt/image/Raster;)V", methodCache: &WritableRaster.setRect_MethodID_22, args: &__args, locals: &__locals )
    }

    open func setRect( _ _srcRaster: Raster? ) {
        setRect( srcRaster: _srcRaster )
    }

    /// public void java.awt.image.WritableRaster.setRect(int,int,java.awt.image.Raster)

    private static var setRect_MethodID_23: jmethodID?

    open func setRect( dx: Int, dy: Int, srcRaster: Raster? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: dx, locals: &__locals )
        __args[1] = JNIType.toJava( value: dy, locals: &__locals )
        __args[2] = JNIType.toJava( value: srcRaster != nil ? srcRaster! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRect", methodSig: "(IILjava/awt/image/Raster;)V", methodCache: &WritableRaster.setRect_MethodID_23, args: &__args, locals: &__locals )
    }

    open func setRect( _ _dx: Int, _ _dy: Int, _ _srcRaster: Raster? ) {
        setRect( dx: _dx, dy: _dy, srcRaster: _srcRaster )
    }

}

