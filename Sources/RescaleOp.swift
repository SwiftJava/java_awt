
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:21 GMT 2016 ///

/// class java.awt.image.RescaleOp ///

open class RescaleOp: java_lang.JavaObject, BufferedImageOp, RasterOp {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.RescaleOp", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RescaleOpJNIClass: jclass?

    /// float[] java.awt.image.RescaleOp.scaleFactors

    /// float[] java.awt.image.RescaleOp.offsets

    /// int java.awt.image.RescaleOp.length

    /// java.awt.RenderingHints java.awt.image.RescaleOp.hints

    /// private int java.awt.image.RescaleOp.srcNbits

    /// private int java.awt.image.RescaleOp.dstNbits

    /// public java.awt.image.RescaleOp(float,float,java.awt.RenderingHints)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Float, arg1: Float, arg2: RenderingHints? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/RescaleOp", classCache: &RescaleOp.RescaleOpJNIClass, methodSig: "(FFLjava/awt/RenderingHints;)V", methodCache: &RescaleOp.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Float, _ _arg2: RenderingHints? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.image.RescaleOp(float[],float[],java.awt.RenderingHints)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: [Float]?, arg1: [Float]?, arg2: RenderingHints? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/RescaleOp", classCache: &RescaleOp.RescaleOpJNIClass, methodSig: "([F[FLjava/awt/RenderingHints;)V", methodCache: &RescaleOp.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [Float]?, _ _arg1: [Float]?, _ _arg2: RenderingHints? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public final float[] java.awt.image.RescaleOp.getOffsets(float[])

    private static var getOffsets_MethodID_3: jmethodID?

    open func getOffsets( arg0: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOffsets", methodSig: "([F)[F", methodCache: &RescaleOp.getOffsets_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getOffsets( _ _arg0: [Float]? ) -> [Float]! {
        return getOffsets( arg0: _arg0 )
    }

    /// public final java.awt.image.BufferedImage java.awt.image.RescaleOp.filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)

    private static var filter_MethodID_4: jmethodID?

    open func filter( arg0: BufferedImage?, arg1: BufferedImage? ) -> BufferedImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "filter", methodSig: "(Ljava/awt/image/BufferedImage;Ljava/awt/image/BufferedImage;)Ljava/awt/image/BufferedImage;", methodCache: &RescaleOp.filter_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BufferedImage( javaObject: __return ) : nil
    }

    open func filter( _ _arg0: BufferedImage?, _ _arg1: BufferedImage? ) -> BufferedImage! {
        return filter( arg0: _arg0, arg1: _arg1 )
    }

    /// public final java.awt.image.WritableRaster java.awt.image.RescaleOp.filter(java.awt.image.Raster,java.awt.image.WritableRaster)

    private static var filter_MethodID_5: jmethodID?

    open func filter( arg0: Raster?, arg1: WritableRaster? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "filter", methodSig: "(Ljava/awt/image/Raster;Ljava/awt/image/WritableRaster;)Ljava/awt/image/WritableRaster;", methodCache: &RescaleOp.filter_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func filter( _ _arg0: Raster?, _ _arg1: WritableRaster? ) -> WritableRaster! {
        return filter( arg0: _arg0, arg1: _arg1 )
    }

    /// public final java.awt.geom.Rectangle2D java.awt.image.RescaleOp.getBounds2D(java.awt.image.Raster)

    private static var getBounds2D_MethodID_6: jmethodID?

    open func getBounds2D( arg0: Raster? ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds2D", methodSig: "(Ljava/awt/image/Raster;)Ljava/awt/geom/Rectangle2D;", methodCache: &RescaleOp.getBounds2D_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    open func getBounds2D( _ _arg0: Raster? ) -> Rectangle2D! {
        return getBounds2D( arg0: _arg0 )
    }

    /// public final java.awt.geom.Rectangle2D java.awt.image.RescaleOp.getBounds2D(java.awt.image.BufferedImage)

    private static var getBounds2D_MethodID_7: jmethodID?

    open func getBounds2D( arg0: BufferedImage? ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds2D", methodSig: "(Ljava/awt/image/BufferedImage;)Ljava/awt/geom/Rectangle2D;", methodCache: &RescaleOp.getBounds2D_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    open func getBounds2D( _ _arg0: BufferedImage? ) -> Rectangle2D! {
        return getBounds2D( arg0: _arg0 )
    }

    /// public final java.awt.RenderingHints java.awt.image.RescaleOp.getRenderingHints()

    private static var getRenderingHints_MethodID_8: jmethodID?

    open func getRenderingHints() -> RenderingHints! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRenderingHints", methodSig: "()Ljava/awt/RenderingHints;", methodCache: &RescaleOp.getRenderingHints_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? RenderingHints( javaObject: __return ) : nil
    }


    /// public java.awt.image.WritableRaster java.awt.image.RescaleOp.createCompatibleDestRaster(java.awt.image.Raster)

    private static var createCompatibleDestRaster_MethodID_9: jmethodID?

    open func createCompatibleDestRaster( arg0: Raster? ) -> WritableRaster! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleDestRaster", methodSig: "(Ljava/awt/image/Raster;)Ljava/awt/image/WritableRaster;", methodCache: &RescaleOp.createCompatibleDestRaster_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? WritableRaster( javaObject: __return ) : nil
    }

    open func createCompatibleDestRaster( _ _arg0: Raster? ) -> WritableRaster! {
        return createCompatibleDestRaster( arg0: _arg0 )
    }

    /// public final java.awt.geom.Point2D java.awt.image.RescaleOp.getPoint2D(java.awt.geom.Point2D,java.awt.geom.Point2D)

    private static var getPoint2D_MethodID_10: jmethodID?

    open func getPoint2D( arg0: Point2D?, arg1: Point2D? ) -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPoint2D", methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)Ljava/awt/geom/Point2D;", methodCache: &RescaleOp.getPoint2D_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }

    open func getPoint2D( _ _arg0: Point2D?, _ _arg1: Point2D? ) -> Point2D! {
        return getPoint2D( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.image.BufferedImage java.awt.image.RescaleOp.createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)

    private static var createCompatibleDestImage_MethodID_11: jmethodID?

    open func createCompatibleDestImage( arg0: BufferedImage?, arg1: ColorModel? ) -> BufferedImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleDestImage", methodSig: "(Ljava/awt/image/BufferedImage;Ljava/awt/image/ColorModel;)Ljava/awt/image/BufferedImage;", methodCache: &RescaleOp.createCompatibleDestImage_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BufferedImage( javaObject: __return ) : nil
    }

    open func createCompatibleDestImage( _ _arg0: BufferedImage?, _ _arg1: ColorModel? ) -> BufferedImage! {
        return createCompatibleDestImage( arg0: _arg0, arg1: _arg1 )
    }

    /// public final float[] java.awt.image.RescaleOp.getScaleFactors(float[])

    private static var getScaleFactors_MethodID_12: jmethodID?

    open func getScaleFactors( arg0: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getScaleFactors", methodSig: "([F)[F", methodCache: &RescaleOp.getScaleFactors_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getScaleFactors( _ _arg0: [Float]? ) -> [Float]! {
        return getScaleFactors( arg0: _arg0 )
    }

    /// public final int java.awt.image.RescaleOp.getNumFactors()

    private static var getNumFactors_MethodID_13: jmethodID?

    open func getNumFactors() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumFactors", methodSig: "()I", methodCache: &RescaleOp.getNumFactors_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private java.awt.image.ByteLookupTable java.awt.image.RescaleOp.createByteLut(float[],float[],int,int)

    /// private java.awt.image.ShortLookupTable java.awt.image.RescaleOp.createShortLut(float[],float[],int,int)

    /// private boolean java.awt.image.RescaleOp.canUseLookup(java.awt.image.Raster,java.awt.image.Raster)

}
