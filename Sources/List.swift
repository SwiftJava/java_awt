
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:34:51 GMT 2016 ///

/// class java.awt.List ///

open class List: Component, ItemSelectable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.List", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ListJNIClass: jclass?

    /// java.util.Vector java.awt.List.items

    /// int java.awt.List.rows

    /// boolean java.awt.List.multipleMode

    /// int[] java.awt.List.selected

    /// int java.awt.List.visibleIndex

    /// transient java.awt.event.ActionListener java.awt.List.actionListener

    /// transient java.awt.event.ItemListener java.awt.List.itemListener

    /// private static final java.lang.String java.awt.List.base

    /// private static int java.awt.List.nameCounter

    /// private static final long java.awt.List.serialVersionUID

    /// static final int java.awt.List.DEFAULT_VISIBLE_ROWS

    /// private int java.awt.List.listSerializedDataVersion

    /// private static final java.util.logging.Logger java.awt.Component.focusLog

    /// private static final java.util.logging.Logger java.awt.Component.log

    /// private static final java.util.logging.Logger java.awt.Component.mixingLog

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    /// transient java.awt.Container java.awt.Component.parent

    /// transient sun.awt.AppContext java.awt.Component.appContext

    /// int java.awt.Component.x

    /// int java.awt.Component.y

    /// int java.awt.Component.width

    /// int java.awt.Component.height

    /// java.awt.Color java.awt.Component.foreground

    /// java.awt.Color java.awt.Component.background

    /// java.awt.Font java.awt.Component.font

    /// java.awt.Font java.awt.Component.peerFont

    /// java.awt.Cursor java.awt.Component.cursor

    /// java.util.Locale java.awt.Component.locale

    /// transient java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    /// boolean java.awt.Component.ignoreRepaint

    /// boolean java.awt.Component.visible

    /// boolean java.awt.Component.enabled

    /// private volatile boolean java.awt.Component.valid

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    /// java.util.Vector java.awt.Component.popups

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// private boolean java.awt.Component.focusable

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// static final java.lang.Object java.awt.Component.LOCK

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// java.awt.Dimension java.awt.Component.minSize

    /// boolean java.awt.Component.minSizeSet

    /// java.awt.Dimension java.awt.Component.prefSize

    /// boolean java.awt.Component.prefSizeSet

    /// java.awt.Dimension java.awt.Component.maxSize

    /// boolean java.awt.Component.maxSizeSet

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    /// boolean java.awt.Component.newEventsOnly

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    /// static final java.lang.String java.awt.Component.actionListenerK

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    /// static final java.lang.String java.awt.Component.componentListenerK

    /// static final java.lang.String java.awt.Component.containerListenerK

    /// static final java.lang.String java.awt.Component.focusListenerK

    /// static final java.lang.String java.awt.Component.itemListenerK

    /// static final java.lang.String java.awt.Component.keyListenerK

    /// static final java.lang.String java.awt.Component.mouseListenerK

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    /// static final java.lang.String java.awt.Component.textListenerK

    /// static final java.lang.String java.awt.Component.ownedWindowK

    /// static final java.lang.String java.awt.Component.windowListenerK

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    /// long java.awt.Component.eventMask

    /// private static final sun.awt.DebugHelper java.awt.Component.dbg

    /// static boolean java.awt.Component.isInc

    /// static int java.awt.Component.incRate

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    /// private static final long java.awt.Component.serialVersionUID

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// boolean java.awt.Component.isPacked

    /// private transient java.lang.Object java.awt.Component.privateKey

    /// private int java.awt.Component.boundsOp

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    /// transient java.awt.EventQueueItem[] java.awt.Component.eventCache

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private int java.awt.Component.componentSerializedDataVersion

    /// transient java.awt.Component$NativeInLightFixer java.awt.Component.nativeInLightFixer

    /// javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    /// static final boolean java.awt.Component.$assertionsDisabled

    /// public static final int java.awt.image.ImageObserver.WIDTH

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    /// public static final int java.awt.image.ImageObserver.ERROR

    /// public static final int java.awt.image.ImageObserver.ABORT

    /// public java.awt.List() throws java.awt.HeadlessException

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/List", classCache: &List.ListJNIClass, methodSig: "()V", methodCache: &List.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.List(int) throws java.awt.HeadlessException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/List", classCache: &List.ListJNIClass, methodSig: "(I)V", methodCache: &List.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public java.awt.List(int,boolean) throws java.awt.HeadlessException

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Int, arg1: Bool ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/List", classCache: &List.ListJNIClass, methodSig: "(IZ)V", methodCache: &List.new_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Bool ) throws {
        try self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.List.add(java.lang.String,int)

    private static var add_MethodID_4: jmethodID?

    open func add( arg0: String?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/String;I)V", methodCache: &List.add_MethodID_4, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: String?, _ _arg1: Int ) {
        add( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.List.add(java.lang.String)

    private static var add_MethodID_5: jmethodID?

    open func add( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/String;)V", methodCache: &List.add_MethodID_5, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: String? ) {
        add( arg0: _arg0 )
    }

    /// public synchronized void java.awt.List.clear()

    private static var clear_MethodID_6: jmethodID?

    open func clear() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clear", methodSig: "()V", methodCache: &List.clear_MethodID_6, args: &__args, locals: &__locals )
    }


    /// public synchronized void java.awt.List.remove(java.lang.String)

    private static var remove_MethodID_7: jmethodID?

    open func remove( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/lang/String;)V", methodCache: &List.remove_MethodID_7, args: &__args, locals: &__locals )
    }

    open func remove( _ _arg0: String? ) {
        remove( arg0: _arg0 )
    }

    /// public void java.awt.List.remove(int)

    private static var remove_MethodID_8: jmethodID?

    open func remove( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(I)V", methodCache: &List.remove_MethodID_8, args: &__args, locals: &__locals )
    }

    open func remove( _ _arg0: Int ) {
        remove( arg0: _arg0 )
    }

    /// private void java.awt.List.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.awt.List.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException,java.awt.HeadlessException

    /// public void java.awt.List.removeAll()

    private static var removeAll_MethodID_9: jmethodID?

    open func removeAll() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeAll", methodSig: "()V", methodCache: &List.removeAll_MethodID_9, args: &__args, locals: &__locals )
    }


    /// public java.util.EventListener[] java.awt.List.getListeners(java.lang.Class)

    /// public void java.awt.List.addNotify()

    /// public java.awt.Dimension java.awt.List.getPreferredSize()

    /// public java.awt.Dimension java.awt.List.getPreferredSize(int)

    private static var getPreferredSize_MethodID_10: jmethodID?

    open func getPreferredSize( arg0: Int ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredSize", methodSig: "(I)Ljava/awt/Dimension;", methodCache: &List.getPreferredSize_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func getPreferredSize( _ _arg0: Int ) -> Dimension! {
        return getPreferredSize( arg0: _arg0 )
    }

    /// protected java.lang.String java.awt.List.paramString()

    private static var paramString_MethodID_11: jmethodID?

    override open func paramString() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &List.paramString_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public javax.accessibility.AccessibleContext java.awt.List.getAccessibleContext()

    /// public java.awt.Dimension java.awt.List.getMinimumSize(int)

    private static var getMinimumSize_MethodID_12: jmethodID?

    open func getMinimumSize( arg0: Int ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMinimumSize", methodSig: "(I)Ljava/awt/Dimension;", methodCache: &List.getMinimumSize_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func getMinimumSize( _ _arg0: Int ) -> Dimension! {
        return getMinimumSize( arg0: _arg0 )
    }

    /// public java.awt.Dimension java.awt.List.getMinimumSize()

    /// public void java.awt.List.removeNotify()

    /// public java.awt.Dimension java.awt.List.preferredSize()

    /// public java.awt.Dimension java.awt.List.preferredSize(int)

    private static var preferredSize_MethodID_13: jmethodID?

    open func preferredSize( arg0: Int ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "preferredSize", methodSig: "(I)Ljava/awt/Dimension;", methodCache: &List.preferredSize_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func preferredSize( _ _arg0: Int ) -> Dimension! {
        return preferredSize( arg0: _arg0 )
    }

    /// public java.awt.Dimension java.awt.List.minimumSize(int)

    private static var minimumSize_MethodID_14: jmethodID?

    open func minimumSize( arg0: Int ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "minimumSize", methodSig: "(I)Ljava/awt/Dimension;", methodCache: &List.minimumSize_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func minimumSize( _ _arg0: Int ) -> Dimension! {
        return minimumSize( arg0: _arg0 )
    }

    /// public java.awt.Dimension java.awt.List.minimumSize()

    /// boolean java.awt.List.eventEnabled(java.awt.AWTEvent)

    /// protected void java.awt.List.processEvent(java.awt.AWTEvent)

    private static var processEvent_MethodID_15: jmethodID?

    override open func processEvent( arg0: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &List.processEvent_MethodID_15, args: &__args, locals: &__locals )
    }

    override open func processEvent( _ _arg0: AWTEvent? ) {
        processEvent( arg0: _arg0 )
    }

    /// java.lang.String java.awt.List.constructComponentName()

    /// public synchronized void java.awt.List.addActionListener(java.awt.event.ActionListener)

    private static var addActionListener_MethodID_16: jmethodID?

    open func addActionListener( arg0: ActionListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addActionListener", methodSig: "(Ljava/awt/event/ActionListener;)V", methodCache: &List.addActionListener_MethodID_16, args: &__args, locals: &__locals )
    }

    open func addActionListener( _ _arg0: ActionListener? ) {
        addActionListener( arg0: _arg0 )
    }

    /// public synchronized void java.awt.List.removeActionListener(java.awt.event.ActionListener)

    private static var removeActionListener_MethodID_17: jmethodID?

    open func removeActionListener( arg0: ActionListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeActionListener", methodSig: "(Ljava/awt/event/ActionListener;)V", methodCache: &List.removeActionListener_MethodID_17, args: &__args, locals: &__locals )
    }

    open func removeActionListener( _ _arg0: ActionListener? ) {
        removeActionListener( arg0: _arg0 )
    }

    /// public synchronized java.awt.event.ActionListener[] java.awt.List.getActionListeners()

    private static var getActionListeners_MethodID_18: jmethodID?

    open func getActionListeners() -> [ActionListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActionListeners", methodSig: "()[Ljava/awt/event/ActionListener;", methodCache: &List.getActionListeners_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: [ActionListenerForward](), from: __return )
    }


    /// protected void java.awt.List.processActionEvent(java.awt.event.ActionEvent)

    private static var processActionEvent_MethodID_19: jmethodID?

    open func processActionEvent( arg0: ActionEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processActionEvent", methodSig: "(Ljava/awt/event/ActionEvent;)V", methodCache: &List.processActionEvent_MethodID_19, args: &__args, locals: &__locals )
    }

    open func processActionEvent( _ _arg0: ActionEvent? ) {
        processActionEvent( arg0: _arg0 )
    }

    /// public java.lang.String java.awt.List.getItem(int)

    private static var getItem_MethodID_20: jmethodID?

    open func getItem( arg0: Int ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getItem", methodSig: "(I)Ljava/lang/String;", methodCache: &List.getItem_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getItem( _ _arg0: Int ) -> String! {
        return getItem( arg0: _arg0 )
    }

    /// public int java.awt.List.getItemCount()

    private static var getItemCount_MethodID_21: jmethodID?

    open func getItemCount() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getItemCount", methodSig: "()I", methodCache: &List.getItemCount_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.List.countItems()

    private static var countItems_MethodID_22: jmethodID?

    open func countItems() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "countItems", methodSig: "()I", methodCache: &List.countItems_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// final java.lang.String java.awt.List.getItemImpl(int)

    /// public synchronized void java.awt.List.addItem(java.lang.String,int)

    private static var addItem_MethodID_23: jmethodID?

    open func addItem( arg0: String?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addItem", methodSig: "(Ljava/lang/String;I)V", methodCache: &List.addItem_MethodID_23, args: &__args, locals: &__locals )
    }

    open func addItem( _ _arg0: String?, _ _arg1: Int ) {
        addItem( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.List.addItem(java.lang.String)

    private static var addItem_MethodID_24: jmethodID?

    open func addItem( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addItem", methodSig: "(Ljava/lang/String;)V", methodCache: &List.addItem_MethodID_24, args: &__args, locals: &__locals )
    }

    open func addItem( _ _arg0: String? ) {
        addItem( arg0: _arg0 )
    }

    /// public void java.awt.List.delItem(int)

    private static var delItem_MethodID_25: jmethodID?

    open func delItem( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "delItem", methodSig: "(I)V", methodCache: &List.delItem_MethodID_25, args: &__args, locals: &__locals )
    }

    open func delItem( _ _arg0: Int ) {
        delItem( arg0: _arg0 )
    }

    /// public synchronized void java.awt.List.addItemListener(java.awt.event.ItemListener)

    private static var addItemListener_MethodID_26: jmethodID?

    open func addItemListener( arg0: ItemListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addItemListener", methodSig: "(Ljava/awt/event/ItemListener;)V", methodCache: &List.addItemListener_MethodID_26, args: &__args, locals: &__locals )
    }

    open func addItemListener( _ _arg0: ItemListener? ) {
        addItemListener( arg0: _arg0 )
    }

    /// public java.lang.Object[] java.awt.List.getSelectedObjects()

    private static var getSelectedObjects_MethodID_27: jmethodID?

    open func getSelectedObjects() -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedObjects", methodSig: "()[Ljava/lang/Object;", methodCache: &List.getSelectedObjects_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }


    /// public synchronized void java.awt.List.removeItemListener(java.awt.event.ItemListener)

    private static var removeItemListener_MethodID_28: jmethodID?

    open func removeItemListener( arg0: ItemListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeItemListener", methodSig: "(Ljava/awt/event/ItemListener;)V", methodCache: &List.removeItemListener_MethodID_28, args: &__args, locals: &__locals )
    }

    open func removeItemListener( _ _arg0: ItemListener? ) {
        removeItemListener( arg0: _arg0 )
    }

    /// public synchronized java.awt.event.ItemListener[] java.awt.List.getItemListeners()

    private static var getItemListeners_MethodID_29: jmethodID?

    open func getItemListeners() -> [ItemListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getItemListeners", methodSig: "()[Ljava/awt/event/ItemListener;", methodCache: &List.getItemListeners_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.decode( type: [ItemListenerForward](), from: __return )
    }


    /// protected void java.awt.List.processItemEvent(java.awt.event.ItemEvent)

    private static var processItemEvent_MethodID_30: jmethodID?

    open func processItemEvent( arg0: ItemEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processItemEvent", methodSig: "(Ljava/awt/event/ItemEvent;)V", methodCache: &List.processItemEvent_MethodID_30, args: &__args, locals: &__locals )
    }

    open func processItemEvent( _ _arg0: ItemEvent? ) {
        processItemEvent( arg0: _arg0 )
    }

    /// public synchronized java.lang.String java.awt.List.getSelectedItem()

    private static var getSelectedItem_MethodID_31: jmethodID?

    open func getSelectedItem() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedItem", methodSig: "()Ljava/lang/String;", methodCache: &List.getSelectedItem_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public synchronized int java.awt.List.getSelectedIndex()

    private static var getSelectedIndex_MethodID_32: jmethodID?

    open func getSelectedIndex() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSelectedIndex", methodSig: "()I", methodCache: &List.getSelectedIndex_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.List.select(int)

    private static var select_MethodID_33: jmethodID?

    open func select( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "select", methodSig: "(I)V", methodCache: &List.select_MethodID_33, args: &__args, locals: &__locals )
    }

    open func select( _ _arg0: Int ) {
        select( arg0: _arg0 )
    }

    /// public boolean java.awt.List.isIndexSelected(int)

    private static var isIndexSelected_MethodID_34: jmethodID?

    open func isIndexSelected( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isIndexSelected", methodSig: "(I)Z", methodCache: &List.isIndexSelected_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isIndexSelected( _ _arg0: Int ) -> Bool {
        return isIndexSelected( arg0: _arg0 )
    }

    /// public boolean java.awt.List.isMultipleMode()

    private static var isMultipleMode_MethodID_35: jmethodID?

    open func isMultipleMode() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isMultipleMode", methodSig: "()Z", methodCache: &List.isMultipleMode_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public synchronized int[] java.awt.List.getSelectedIndexes()

    private static var getSelectedIndexes_MethodID_36: jmethodID?

    open func getSelectedIndexes() -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedIndexes", methodSig: "()[I", methodCache: &List.getSelectedIndexes_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }


    /// public synchronized void java.awt.List.deselect(int)

    private static var deselect_MethodID_37: jmethodID?

    open func deselect( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "deselect", methodSig: "(I)V", methodCache: &List.deselect_MethodID_37, args: &__args, locals: &__locals )
    }

    open func deselect( _ _arg0: Int ) {
        deselect( arg0: _arg0 )
    }

    /// public synchronized java.lang.String[] java.awt.List.getItems()

    private static var getItems_MethodID_38: jmethodID?

    open func getItems() -> [String]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getItems", methodSig: "()[Ljava/lang/String;", methodCache: &List.getItems_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: [String](), from: __return )
    }


    /// public synchronized void java.awt.List.replaceItem(java.lang.String,int)

    private static var replaceItem_MethodID_39: jmethodID?

    open func replaceItem( arg0: String?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "replaceItem", methodSig: "(Ljava/lang/String;I)V", methodCache: &List.replaceItem_MethodID_39, args: &__args, locals: &__locals )
    }

    open func replaceItem( _ _arg0: String?, _ _arg1: Int ) {
        replaceItem( arg0: _arg0, arg1: _arg1 )
    }

    /// public synchronized java.lang.String[] java.awt.List.getSelectedItems()

    private static var getSelectedItems_MethodID_40: jmethodID?

    open func getSelectedItems() -> [String]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedItems", methodSig: "()[Ljava/lang/String;", methodCache: &List.getSelectedItems_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: [String](), from: __return )
    }


    /// public boolean java.awt.List.isSelected(int)

    private static var isSelected_MethodID_41: jmethodID?

    open func isSelected( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isSelected", methodSig: "(I)Z", methodCache: &List.isSelected_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isSelected( _ _arg0: Int ) -> Bool {
        return isSelected( arg0: _arg0 )
    }

    /// public int java.awt.List.getRows()

    private static var getRows_MethodID_42: jmethodID?

    open func getRows() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getRows", methodSig: "()I", methodCache: &List.getRows_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public boolean java.awt.List.allowsMultipleSelections()

    private static var allowsMultipleSelections_MethodID_43: jmethodID?

    open func allowsMultipleSelections() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "allowsMultipleSelections", methodSig: "()Z", methodCache: &List.allowsMultipleSelections_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public void java.awt.List.setMultipleMode(boolean)

    private static var setMultipleMode_MethodID_44: jmethodID?

    open func setMultipleMode( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMultipleMode", methodSig: "(Z)V", methodCache: &List.setMultipleMode_MethodID_44, args: &__args, locals: &__locals )
    }

    open func setMultipleMode( _ _arg0: Bool ) {
        setMultipleMode( arg0: _arg0 )
    }

    /// public synchronized void java.awt.List.setMultipleSelections(boolean)

    private static var setMultipleSelections_MethodID_45: jmethodID?

    open func setMultipleSelections( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMultipleSelections", methodSig: "(Z)V", methodCache: &List.setMultipleSelections_MethodID_45, args: &__args, locals: &__locals )
    }

    open func setMultipleSelections( _ _arg0: Bool ) {
        setMultipleSelections( arg0: _arg0 )
    }

    /// public int java.awt.List.getVisibleIndex()

    private static var getVisibleIndex_MethodID_46: jmethodID?

    open func getVisibleIndex() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getVisibleIndex", methodSig: "()I", methodCache: &List.getVisibleIndex_MethodID_46, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public synchronized void java.awt.List.makeVisible(int)

    private static var makeVisible_MethodID_47: jmethodID?

    open func makeVisible( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "makeVisible", methodSig: "(I)V", methodCache: &List.makeVisible_MethodID_47, args: &__args, locals: &__locals )
    }

    open func makeVisible( _ _arg0: Int ) {
        makeVisible( arg0: _arg0 )
    }

    /// public synchronized void java.awt.List.delItems(int,int)

    private static var delItems_MethodID_48: jmethodID?

    open func delItems( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "delItems", methodSig: "(II)V", methodCache: &List.delItems_MethodID_48, args: &__args, locals: &__locals )
    }

    open func delItems( _ _arg0: Int, _ _arg1: Int ) {
        delItems( arg0: _arg0, arg1: _arg1 )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

}
