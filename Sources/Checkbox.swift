
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:34:45 GMT 2016 ///

/// class java.awt.Checkbox ///

open class Checkbox: Component, ItemSelectable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.Checkbox", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CheckboxJNIClass: jclass?

    /// java.lang.String java.awt.Checkbox.label

    /// boolean java.awt.Checkbox.state

    /// java.awt.CheckboxGroup java.awt.Checkbox.group

    /// transient java.awt.event.ItemListener java.awt.Checkbox.itemListener

    /// private static final java.lang.String java.awt.Checkbox.base

    /// private static int java.awt.Checkbox.nameCounter

    /// private static final long java.awt.Checkbox.serialVersionUID

    /// private int java.awt.Checkbox.checkboxSerializedDataVersion

    /// private static final java.util.logging.Logger java.awt.Component.focusLog

    /// private static final java.util.logging.Logger java.awt.Component.log

    /// private static final java.util.logging.Logger java.awt.Component.mixingLog

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    /// transient java.awt.Container java.awt.Component.parent

    /// transient sun.awt.AppContext java.awt.Component.appContext

    /// int java.awt.Component.x

    /// int java.awt.Component.y

    /// int java.awt.Component.width

    /// int java.awt.Component.height

    /// java.awt.Color java.awt.Component.foreground

    /// java.awt.Color java.awt.Component.background

    /// java.awt.Font java.awt.Component.font

    /// java.awt.Font java.awt.Component.peerFont

    /// java.awt.Cursor java.awt.Component.cursor

    /// java.util.Locale java.awt.Component.locale

    /// transient java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    /// boolean java.awt.Component.ignoreRepaint

    /// boolean java.awt.Component.visible

    /// boolean java.awt.Component.enabled

    /// private volatile boolean java.awt.Component.valid

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    /// java.util.Vector java.awt.Component.popups

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// private boolean java.awt.Component.focusable

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// static final java.lang.Object java.awt.Component.LOCK

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// java.awt.Dimension java.awt.Component.minSize

    /// boolean java.awt.Component.minSizeSet

    /// java.awt.Dimension java.awt.Component.prefSize

    /// boolean java.awt.Component.prefSizeSet

    /// java.awt.Dimension java.awt.Component.maxSize

    /// boolean java.awt.Component.maxSizeSet

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    /// boolean java.awt.Component.newEventsOnly

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    /// static final java.lang.String java.awt.Component.actionListenerK

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    /// static final java.lang.String java.awt.Component.componentListenerK

    /// static final java.lang.String java.awt.Component.containerListenerK

    /// static final java.lang.String java.awt.Component.focusListenerK

    /// static final java.lang.String java.awt.Component.itemListenerK

    /// static final java.lang.String java.awt.Component.keyListenerK

    /// static final java.lang.String java.awt.Component.mouseListenerK

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    /// static final java.lang.String java.awt.Component.textListenerK

    /// static final java.lang.String java.awt.Component.ownedWindowK

    /// static final java.lang.String java.awt.Component.windowListenerK

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    /// long java.awt.Component.eventMask

    /// private static final sun.awt.DebugHelper java.awt.Component.dbg

    /// static boolean java.awt.Component.isInc

    /// static int java.awt.Component.incRate

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    /// private static final long java.awt.Component.serialVersionUID

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// boolean java.awt.Component.isPacked

    /// private transient java.lang.Object java.awt.Component.privateKey

    /// private int java.awt.Component.boundsOp

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    /// transient java.awt.EventQueueItem[] java.awt.Component.eventCache

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private int java.awt.Component.componentSerializedDataVersion

    /// transient java.awt.Component$NativeInLightFixer java.awt.Component.nativeInLightFixer

    /// javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    /// static final boolean java.awt.Component.$assertionsDisabled

    /// public static final int java.awt.image.ImageObserver.WIDTH

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    /// public static final int java.awt.image.ImageObserver.ERROR

    /// public static final int java.awt.image.ImageObserver.ABORT

    /// public java.awt.Checkbox() throws java.awt.HeadlessException

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/Checkbox", classCache: &Checkbox.CheckboxJNIClass, methodSig: "()V", methodCache: &Checkbox.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.Checkbox(java.lang.String) throws java.awt.HeadlessException

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Checkbox", classCache: &Checkbox.CheckboxJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Checkbox.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String? ) throws {
        try self.init( arg0: _arg0 )
    }

    /// public java.awt.Checkbox(java.lang.String,boolean) throws java.awt.HeadlessException

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: String?, arg1: Bool ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Checkbox", classCache: &Checkbox.CheckboxJNIClass, methodSig: "(Ljava/lang/String;Z)V", methodCache: &Checkbox.new_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Bool ) throws {
        try self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Checkbox(java.lang.String,boolean,java.awt.CheckboxGroup) throws java.awt.HeadlessException

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: String?, arg1: Bool, arg2: CheckboxGroup? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Checkbox", classCache: &Checkbox.CheckboxJNIClass, methodSig: "(Ljava/lang/String;ZLjava/awt/CheckboxGroup;)V", methodCache: &Checkbox.new_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Bool, _ _arg2: CheckboxGroup? ) throws {
        try self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Checkbox(java.lang.String,java.awt.CheckboxGroup,boolean) throws java.awt.HeadlessException

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: String?, arg1: CheckboxGroup?, arg2: Bool ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Checkbox", classCache: &Checkbox.CheckboxJNIClass, methodSig: "(Ljava/lang/String;Ljava/awt/CheckboxGroup;Z)V", methodCache: &Checkbox.new_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: CheckboxGroup?, _ _arg2: Bool ) throws {
        try self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private void java.awt.Checkbox.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public boolean java.awt.Checkbox.getState()

    private static var getState_MethodID_6: jmethodID?

    open func getState() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getState", methodSig: "()Z", methodCache: &Checkbox.getState_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// private void java.awt.Checkbox.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException,java.awt.HeadlessException

    /// private static void java.awt.Checkbox.initIDs()

    /// public void java.awt.Checkbox.setState(boolean)

    private static var setState_MethodID_7: jmethodID?

    open func setState( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setState", methodSig: "(Z)V", methodCache: &Checkbox.setState_MethodID_7, args: &__args, locals: &__locals )
    }

    open func setState( _ _arg0: Bool ) {
        setState( arg0: _arg0 )
    }

    /// public java.util.EventListener[] java.awt.Checkbox.getListeners(java.lang.Class)

    /// public void java.awt.Checkbox.addNotify()

    /// protected java.lang.String java.awt.Checkbox.paramString()

    private static var paramString_MethodID_8: jmethodID?

    override open func paramString() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &Checkbox.paramString_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public javax.accessibility.AccessibleContext java.awt.Checkbox.getAccessibleContext()

    /// boolean java.awt.Checkbox.eventEnabled(java.awt.AWTEvent)

    /// protected void java.awt.Checkbox.processEvent(java.awt.AWTEvent)

    private static var processEvent_MethodID_9: jmethodID?

    override open func processEvent( arg0: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &Checkbox.processEvent_MethodID_9, args: &__args, locals: &__locals )
    }

    override open func processEvent( _ _arg0: AWTEvent? ) {
        processEvent( arg0: _arg0 )
    }

    /// java.lang.String java.awt.Checkbox.constructComponentName()

    /// public java.lang.String java.awt.Checkbox.getLabel()

    private static var getLabel_MethodID_10: jmethodID?

    open func getLabel() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLabel", methodSig: "()Ljava/lang/String;", methodCache: &Checkbox.getLabel_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public void java.awt.Checkbox.setLabel(java.lang.String)

    private static var setLabel_MethodID_11: jmethodID?

    open func setLabel( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLabel", methodSig: "(Ljava/lang/String;)V", methodCache: &Checkbox.setLabel_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setLabel( _ _arg0: String? ) {
        setLabel( arg0: _arg0 )
    }

    /// public synchronized void java.awt.Checkbox.addItemListener(java.awt.event.ItemListener)

    private static var addItemListener_MethodID_12: jmethodID?

    open func addItemListener( arg0: ItemListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addItemListener", methodSig: "(Ljava/awt/event/ItemListener;)V", methodCache: &Checkbox.addItemListener_MethodID_12, args: &__args, locals: &__locals )
    }

    open func addItemListener( _ _arg0: ItemListener? ) {
        addItemListener( arg0: _arg0 )
    }

    /// void java.awt.Checkbox.setStateInternal(boolean)

    /// public java.lang.Object[] java.awt.Checkbox.getSelectedObjects()

    private static var getSelectedObjects_MethodID_13: jmethodID?

    open func getSelectedObjects() -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedObjects", methodSig: "()[Ljava/lang/Object;", methodCache: &Checkbox.getSelectedObjects_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }


    /// public java.awt.CheckboxGroup java.awt.Checkbox.getCheckboxGroup()

    private static var getCheckboxGroup_MethodID_14: jmethodID?

    open func getCheckboxGroup() -> CheckboxGroup! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCheckboxGroup", methodSig: "()Ljava/awt/CheckboxGroup;", methodCache: &Checkbox.getCheckboxGroup_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CheckboxGroup( javaObject: __return ) : nil
    }


    /// public void java.awt.Checkbox.setCheckboxGroup(java.awt.CheckboxGroup)

    private static var setCheckboxGroup_MethodID_15: jmethodID?

    open func setCheckboxGroup( arg0: CheckboxGroup? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCheckboxGroup", methodSig: "(Ljava/awt/CheckboxGroup;)V", methodCache: &Checkbox.setCheckboxGroup_MethodID_15, args: &__args, locals: &__locals )
    }

    open func setCheckboxGroup( _ _arg0: CheckboxGroup? ) {
        setCheckboxGroup( arg0: _arg0 )
    }

    /// public synchronized void java.awt.Checkbox.removeItemListener(java.awt.event.ItemListener)

    private static var removeItemListener_MethodID_16: jmethodID?

    open func removeItemListener( arg0: ItemListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeItemListener", methodSig: "(Ljava/awt/event/ItemListener;)V", methodCache: &Checkbox.removeItemListener_MethodID_16, args: &__args, locals: &__locals )
    }

    open func removeItemListener( _ _arg0: ItemListener? ) {
        removeItemListener( arg0: _arg0 )
    }

    /// public synchronized java.awt.event.ItemListener[] java.awt.Checkbox.getItemListeners()

    private static var getItemListeners_MethodID_17: jmethodID?

    open func getItemListeners() -> [ItemListener]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getItemListeners", methodSig: "()[Ljava/awt/event/ItemListener;", methodCache: &Checkbox.getItemListeners_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: [ItemListenerForward](), from: __return )
    }


    /// protected void java.awt.Checkbox.processItemEvent(java.awt.event.ItemEvent)

    private static var processItemEvent_MethodID_18: jmethodID?

    open func processItemEvent( arg0: ItemEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processItemEvent", methodSig: "(Ljava/awt/event/ItemEvent;)V", methodCache: &Checkbox.processItemEvent_MethodID_18, args: &__args, locals: &__locals )
    }

    open func processItemEvent( _ _arg0: ItemEvent? ) {
        processItemEvent( arg0: _arg0 )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

}
