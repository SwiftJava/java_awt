
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:34:51 GMT 2016 ///

/// class java.awt.LinearGradientPaint ///

open class LinearGradientPaint: MultipleGradientPaint {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.LinearGradientPaint", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var LinearGradientPaintJNIClass: jclass?

    /// private final java.awt.geom.Point2D java.awt.LinearGradientPaint.start

    /// private final java.awt.geom.Point2D java.awt.LinearGradientPaint.end

    /// final int java.awt.MultipleGradientPaint.transparency

    /// final float[] java.awt.MultipleGradientPaint.fractions

    /// final java.awt.Color[] java.awt.MultipleGradientPaint.colors

    /// final java.awt.geom.AffineTransform java.awt.MultipleGradientPaint.gradientTransform

    /// final java.awt.MultipleGradientPaint$CycleMethod java.awt.MultipleGradientPaint.cycleMethod

    /// final java.awt.MultipleGradientPaint$ColorSpaceType java.awt.MultipleGradientPaint.colorSpace

    /// java.awt.image.ColorModel java.awt.MultipleGradientPaint.model

    /// float[] java.awt.MultipleGradientPaint.normalizedIntervals

    /// boolean java.awt.MultipleGradientPaint.isSimpleLookup

    /// java.lang.ref.SoftReference java.awt.MultipleGradientPaint.gradients

    /// java.lang.ref.SoftReference java.awt.MultipleGradientPaint.gradient

    /// int java.awt.MultipleGradientPaint.fastGradientArraySize

    /// public static final int java.awt.Transparency.OPAQUE

    /// public static final int java.awt.Transparency.BITMASK

    /// public static final int java.awt.Transparency.TRANSLUCENT

    /// public java.awt.LinearGradientPaint(float,float,float,float,float[],java.awt.Color[])

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Float, arg1: Float, arg2: Float, arg3: Float, arg4: [Float]?, arg5: [Color]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/LinearGradientPaint", classCache: &LinearGradientPaint.LinearGradientPaintJNIClass, methodSig: "(FFFF[F[Ljava/awt/Color;)V", methodCache: &LinearGradientPaint.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Float, _ _arg2: Float, _ _arg3: Float, _ _arg4: [Float]?, _ _arg5: [Color]? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public java.awt.LinearGradientPaint(float,float,float,float,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Float, arg1: Float, arg2: Float, arg3: Float, arg4: [Float]?, arg5: [Color]?, arg6: MultipleGradientPaint_CycleMethod? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/LinearGradientPaint", classCache: &LinearGradientPaint.LinearGradientPaintJNIClass, methodSig: "(FFFF[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;)V", methodCache: &LinearGradientPaint.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Float, _ _arg2: Float, _ _arg3: Float, _ _arg4: [Float]?, _ _arg5: [Color]?, _ _arg6: MultipleGradientPaint_CycleMethod? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public java.awt.LinearGradientPaint(java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[])

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Point2D?, arg1: Point2D?, arg2: [Float]?, arg3: [Color]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/LinearGradientPaint", classCache: &LinearGradientPaint.LinearGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;[F[Ljava/awt/Color;)V", methodCache: &LinearGradientPaint.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Point2D?, _ _arg1: Point2D?, _ _arg2: [Float]?, _ _arg3: [Color]? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.LinearGradientPaint(java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: Point2D?, arg1: Point2D?, arg2: [Float]?, arg3: [Color]?, arg4: MultipleGradientPaint_CycleMethod? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/LinearGradientPaint", classCache: &LinearGradientPaint.LinearGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;)V", methodCache: &LinearGradientPaint.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Point2D?, _ _arg1: Point2D?, _ _arg2: [Float]?, _ _arg3: [Color]?, _ _arg4: MultipleGradientPaint_CycleMethod? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public java.awt.LinearGradientPaint(java.awt.geom.Point2D,java.awt.geom.Point2D,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod,java.awt.MultipleGradientPaint$ColorSpaceType,java.awt.geom.AffineTransform)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: Point2D?, arg1: Point2D?, arg2: [Float]?, arg3: [Color]?, arg4: MultipleGradientPaint_CycleMethod?, arg5: MultipleGradientPaint_ColorSpaceType?, arg6: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/LinearGradientPaint", classCache: &LinearGradientPaint.LinearGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;Ljava/awt/MultipleGradientPaint$ColorSpaceType;Ljava/awt/geom/AffineTransform;)V", methodCache: &LinearGradientPaint.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Point2D?, _ _arg1: Point2D?, _ _arg2: [Float]?, _ _arg3: [Color]?, _ _arg4: MultipleGradientPaint_CycleMethod?, _ _arg5: MultipleGradientPaint_ColorSpaceType?, _ _arg6: AffineTransform? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public java.awt.PaintContext java.awt.LinearGradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)

    /// public java.awt.geom.Point2D java.awt.LinearGradientPaint.getStartPoint()

    private static var getStartPoint_MethodID_6: jmethodID?

    open func getStartPoint() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStartPoint", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &LinearGradientPaint.getStartPoint_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public java.awt.geom.Point2D java.awt.LinearGradientPaint.getEndPoint()

    private static var getEndPoint_MethodID_7: jmethodID?

    open func getEndPoint() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getEndPoint", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &LinearGradientPaint.getEndPoint_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


}
