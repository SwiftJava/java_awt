
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:38 GMT 2016 ///

/// interface java.awt.LayoutManager2 ///

public protocol LayoutManager2: LayoutManager {

    /// public abstract void java.awt.LayoutManager2.addLayoutComponent(java.awt.Component,java.lang.Object)

    func addLayoutComponent( arg0: Component?, arg1: java_lang.JavaObject? )
    func addLayoutComponent( _ _arg0: Component?, _ _arg1: java_lang.JavaObject? )

    /// public abstract void java.awt.LayoutManager2.invalidateLayout(java.awt.Container)

    func invalidateLayout( arg0: Container? )
    func invalidateLayout( _ _arg0: Container? )

    /// public abstract java.awt.Dimension java.awt.LayoutManager2.maximumLayoutSize(java.awt.Container)

    func maximumLayoutSize( arg0: Container? ) -> Dimension!
    func maximumLayoutSize( _ _arg0: Container? ) -> Dimension!

    /// public abstract float java.awt.LayoutManager2.getLayoutAlignmentX(java.awt.Container)

    func getLayoutAlignmentX( arg0: Container? ) -> Float
    func getLayoutAlignmentX( _ _arg0: Container? ) -> Float

    /// public abstract float java.awt.LayoutManager2.getLayoutAlignmentY(java.awt.Container)

    func getLayoutAlignmentY( arg0: Container? ) -> Float
    func getLayoutAlignmentY( _ _arg0: Container? ) -> Float

}

open class LayoutManager2Forward: LayoutManagerForward, LayoutManager2 {

    private static var LayoutManager2JNIClass: jclass?

    /// public abstract void java.awt.LayoutManager2.addLayoutComponent(java.awt.Component,java.lang.Object)

    private static var addLayoutComponent_MethodID_6: jmethodID?

    open func addLayoutComponent( arg0: Component?, arg1: java_lang.JavaObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLayoutComponent", methodSig: "(Ljava/awt/Component;Ljava/lang/Object;)V", methodCache: &LayoutManager2Forward.addLayoutComponent_MethodID_6, args: &__args, locals: &__locals )
    }

    open func addLayoutComponent( _ _arg0: Component?, _ _arg1: java_lang.JavaObject? ) {
        addLayoutComponent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.LayoutManager2.invalidateLayout(java.awt.Container)

    private static var invalidateLayout_MethodID_7: jmethodID?

    open func invalidateLayout( arg0: Container? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "invalidateLayout", methodSig: "(Ljava/awt/Container;)V", methodCache: &LayoutManager2Forward.invalidateLayout_MethodID_7, args: &__args, locals: &__locals )
    }

    open func invalidateLayout( _ _arg0: Container? ) {
        invalidateLayout( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager2.maximumLayoutSize(java.awt.Container)

    private static var maximumLayoutSize_MethodID_8: jmethodID?

    open func maximumLayoutSize( arg0: Container? ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "maximumLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &LayoutManager2Forward.maximumLayoutSize_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    open func maximumLayoutSize( _ _arg0: Container? ) -> Dimension! {
        return maximumLayoutSize( arg0: _arg0 )
    }

    /// public abstract float java.awt.LayoutManager2.getLayoutAlignmentX(java.awt.Container)

    private static var getLayoutAlignmentX_MethodID_9: jmethodID?

    open func getLayoutAlignmentX( arg0: Container? ) -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getLayoutAlignmentX", methodSig: "(Ljava/awt/Container;)F", methodCache: &LayoutManager2Forward.getLayoutAlignmentX_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }

    open func getLayoutAlignmentX( _ _arg0: Container? ) -> Float {
        return getLayoutAlignmentX( arg0: _arg0 )
    }

    /// public abstract float java.awt.LayoutManager2.getLayoutAlignmentY(java.awt.Container)

    private static var getLayoutAlignmentY_MethodID_10: jmethodID?

    open func getLayoutAlignmentY( arg0: Container? ) -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getLayoutAlignmentY", methodSig: "(Ljava/awt/Container;)F", methodCache: &LayoutManager2Forward.getLayoutAlignmentY_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }

    open func getLayoutAlignmentY( _ _arg0: Container? ) -> Float {
        return getLayoutAlignmentY( arg0: _arg0 )
    }

    /// public abstract void java.awt.LayoutManager.removeLayoutComponent(java.awt.Component)

    private static var removeLayoutComponent_MethodID_11: jmethodID?

    override open func removeLayoutComponent( arg0: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeLayoutComponent", methodSig: "(Ljava/awt/Component;)V", methodCache: &LayoutManager2Forward.removeLayoutComponent_MethodID_11, args: &__args, locals: &__locals )
    }

    override open func removeLayoutComponent( _ _arg0: Component? ) {
        removeLayoutComponent( arg0: _arg0 )
    }

    /// public abstract void java.awt.LayoutManager.addLayoutComponent(java.lang.String,java.awt.Component)

    private static var addLayoutComponent_MethodID_12: jmethodID?

    override open func addLayoutComponent( arg0: String?, arg1: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLayoutComponent", methodSig: "(Ljava/lang/String;Ljava/awt/Component;)V", methodCache: &LayoutManager2Forward.addLayoutComponent_MethodID_12, args: &__args, locals: &__locals )
    }

    override open func addLayoutComponent( _ _arg0: String?, _ _arg1: Component? ) {
        addLayoutComponent( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.LayoutManager.layoutContainer(java.awt.Container)

    private static var layoutContainer_MethodID_13: jmethodID?

    override open func layoutContainer( arg0: Container? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layoutContainer", methodSig: "(Ljava/awt/Container;)V", methodCache: &LayoutManager2Forward.layoutContainer_MethodID_13, args: &__args, locals: &__locals )
    }

    override open func layoutContainer( _ _arg0: Container? ) {
        layoutContainer( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.preferredLayoutSize(java.awt.Container)

    private static var preferredLayoutSize_MethodID_14: jmethodID?

    override open func preferredLayoutSize( arg0: Container? ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "preferredLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &LayoutManager2Forward.preferredLayoutSize_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    override open func preferredLayoutSize( _ _arg0: Container? ) -> Dimension! {
        return preferredLayoutSize( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.LayoutManager.minimumLayoutSize(java.awt.Container)

    private static var minimumLayoutSize_MethodID_15: jmethodID?

    override open func minimumLayoutSize( arg0: Container? ) -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "minimumLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &LayoutManager2Forward.minimumLayoutSize_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }

    override open func minimumLayoutSize( _ _arg0: Container? ) -> Dimension! {
        return minimumLayoutSize( arg0: _arg0 )
    }

}


