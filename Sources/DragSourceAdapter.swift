
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:04 GMT 2016 ///

/// class java.awt.dnd.DragSourceAdapter ///

open class DragSourceAdapter: java_lang.JavaObject, DragSourceListener, DragSourceMotionListener {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.dnd.DragSourceAdapter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DragSourceAdapterJNIClass: jclass?

    /// public java.awt.dnd.DragSourceAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSourceAdapter", classCache: &DragSourceAdapter.DragSourceAdapterJNIClass, methodSig: "()V", methodCache: &DragSourceAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.dnd.DragSourceAdapter.dragEnter(java.awt.dnd.DragSourceDragEvent)

    private static var dragEnter_MethodID_2: jmethodID?

    open func dragEnter( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragEnter", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceAdapter.dragEnter_MethodID_2, args: &__args, locals: &__locals )
    }

    open func dragEnter( _ _arg0: DragSourceDragEvent? ) {
        dragEnter( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceAdapter.dragOver(java.awt.dnd.DragSourceDragEvent)

    private static var dragOver_MethodID_3: jmethodID?

    open func dragOver( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragOver", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceAdapter.dragOver_MethodID_3, args: &__args, locals: &__locals )
    }

    open func dragOver( _ _arg0: DragSourceDragEvent? ) {
        dragOver( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceAdapter.dropActionChanged(java.awt.dnd.DragSourceDragEvent)

    private static var dropActionChanged_MethodID_4: jmethodID?

    open func dropActionChanged( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dropActionChanged", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceAdapter.dropActionChanged_MethodID_4, args: &__args, locals: &__locals )
    }

    open func dropActionChanged( _ _arg0: DragSourceDragEvent? ) {
        dropActionChanged( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceAdapter.dragExit(java.awt.dnd.DragSourceEvent)

    private static var dragExit_MethodID_5: jmethodID?

    open func dragExit( arg0: DragSourceEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragExit", methodSig: "(Ljava/awt/dnd/DragSourceEvent;)V", methodCache: &DragSourceAdapter.dragExit_MethodID_5, args: &__args, locals: &__locals )
    }

    open func dragExit( _ _arg0: DragSourceEvent? ) {
        dragExit( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceAdapter.dragDropEnd(java.awt.dnd.DragSourceDropEvent)

    private static var dragDropEnd_MethodID_6: jmethodID?

    open func dragDropEnd( arg0: DragSourceDropEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragDropEnd", methodSig: "(Ljava/awt/dnd/DragSourceDropEvent;)V", methodCache: &DragSourceAdapter.dragDropEnd_MethodID_6, args: &__args, locals: &__locals )
    }

    open func dragDropEnd( _ _arg0: DragSourceDropEvent? ) {
        dragDropEnd( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceAdapter.dragMouseMoved(java.awt.dnd.DragSourceDragEvent)

    private static var dragMouseMoved_MethodID_7: jmethodID?

    open func dragMouseMoved( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragMouseMoved", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceAdapter.dragMouseMoved_MethodID_7, args: &__args, locals: &__locals )
    }

    open func dragMouseMoved( _ _arg0: DragSourceDragEvent? ) {
        dragMouseMoved( arg0: _arg0 )
    }

}
private typealias DragSourceAdapter_dragEnter_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceAdapter_dragEnter_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).dragEnter( arg0 != nil ? DragSourceDragEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceAdapter_dragOver_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceAdapter_dragOver_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).dragOver( arg0 != nil ? DragSourceDragEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceAdapter_dropActionChanged_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceAdapter_dropActionChanged_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).dropActionChanged( arg0 != nil ? DragSourceDragEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceAdapter_dragExit_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceAdapter_dragExit_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).dragExit( arg0 != nil ? DragSourceEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceAdapter_dragDropEnd_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceAdapter_dragDropEnd_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).dragDropEnd( arg0 != nil ? DragSourceDropEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceAdapter_dragMouseMoved_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func DragSourceAdapter_dragMouseMoved_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).dragMouseMoved( arg0 != nil ? DragSourceDragEvent( javaObject: arg0 ) : nil )
}

private typealias DragSourceAdapter_equals_9_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> jboolean

private func DragSourceAdapter_equals_9( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> jboolean {
    let __return = DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).equals( arg0 != nil ? java_lang.JavaObject( javaObject: arg0 ) : nil )
    return JNIType.encode( value: __return, locals: nil ).z
}

private typealias DragSourceAdapter_toString_10_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jobject?

private func DragSourceAdapter_toString_10( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jobject? {
    let __return = DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).toString( )
    return JNIType.encode( value: __return, locals: nil ).l
}

private typealias DragSourceAdapter_hashCode_11_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jint

private func DragSourceAdapter_hashCode_11( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jint {
    let __return = DragSourceAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).hashCode( )
    return JNIType.encode( value: __return, locals: nil ).i
}

open class DragSourceAdapterBase: DragSourceAdapter {

    private static var DragSourceAdapterBaseJNIClass: jclass?
    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let DragSourceAdapter_dragEnter_0_thunk: DragSourceAdapter_dragEnter_0_type = DragSourceAdapter_dragEnter_0
            natives.append( JNINativeMethod( name: strdup("__dragEnter"), signature: strdup("(Ljava/awt/dnd/DragSourceDragEvent;)V"), fnPtr: unsafeBitCast( DragSourceAdapter_dragEnter_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_dragOver_1_thunk: DragSourceAdapter_dragOver_1_type = DragSourceAdapter_dragOver_1
            natives.append( JNINativeMethod( name: strdup("__dragOver"), signature: strdup("(Ljava/awt/dnd/DragSourceDragEvent;)V"), fnPtr: unsafeBitCast( DragSourceAdapter_dragOver_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_dropActionChanged_2_thunk: DragSourceAdapter_dropActionChanged_2_type = DragSourceAdapter_dropActionChanged_2
            natives.append( JNINativeMethod( name: strdup("__dropActionChanged"), signature: strdup("(Ljava/awt/dnd/DragSourceDragEvent;)V"), fnPtr: unsafeBitCast( DragSourceAdapter_dropActionChanged_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_dragExit_3_thunk: DragSourceAdapter_dragExit_3_type = DragSourceAdapter_dragExit_3
            natives.append( JNINativeMethod( name: strdup("__dragExit"), signature: strdup("(Ljava/awt/dnd/DragSourceEvent;)V"), fnPtr: unsafeBitCast( DragSourceAdapter_dragExit_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_dragDropEnd_4_thunk: DragSourceAdapter_dragDropEnd_4_type = DragSourceAdapter_dragDropEnd_4
            natives.append( JNINativeMethod( name: strdup("__dragDropEnd"), signature: strdup("(Ljava/awt/dnd/DragSourceDropEvent;)V"), fnPtr: unsafeBitCast( DragSourceAdapter_dragDropEnd_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_dragMouseMoved_5_thunk: DragSourceAdapter_dragMouseMoved_5_type = DragSourceAdapter_dragMouseMoved_5
            natives.append( JNINativeMethod( name: strdup("__dragMouseMoved"), signature: strdup("(Ljava/awt/dnd/DragSourceDragEvent;)V"), fnPtr: unsafeBitCast( DragSourceAdapter_dragMouseMoved_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_equals_9_thunk: DragSourceAdapter_equals_9_type = DragSourceAdapter_equals_9
            natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(Ljava/lang/Object;)Z"), fnPtr: unsafeBitCast( DragSourceAdapter_equals_9_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_toString_10_thunk: DragSourceAdapter_toString_10_type = DragSourceAdapter_toString_10
            natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("()Ljava/lang/String;"), fnPtr: unsafeBitCast( DragSourceAdapter_toString_10_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let DragSourceAdapter_hashCode_11_thunk: DragSourceAdapter_hashCode_11_type = DragSourceAdapter_hashCode_11
            natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("()I"), fnPtr: unsafeBitCast( DragSourceAdapter_hashCode_11_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/DragSourceAdapterProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    override open var javaObject: jobject? {
        get {
            return super.javaObject
        }
        set(newValue) {
            super.javaObject = newValue
            DragSourceAdapterBase.registerNatives()
            updateSwiftObject()
        }
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> DragSourceAdapterBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: DragSourceAdapterBase.self )
    }

    /// public java.awt.dnd.DragSourceAdapter()

    private static var new_MethodID_8: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = swiftValue()

        let __object = JNIMethod.NewObject( className: "org/genie/java_awt/DragSourceAdapterProxy", classCache: &DragSourceAdapterBase.DragSourceAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &DragSourceAdapterBase.new_MethodID_8, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
