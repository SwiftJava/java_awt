
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.event.WindowEvent ///

open class WindowEvent: ComponentEvent {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var WindowEventJNIClass: jclass?

    /// public static final int java.awt.event.WindowEvent.WINDOW_ACTIVATED

    private static var WINDOW_ACTIVATED_FieldID: jfieldID?

    open static var WINDOW_ACTIVATED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_ACTIVATED", fieldType: "I", fieldCache: &WINDOW_ACTIVATED_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_CLOSED

    private static var WINDOW_CLOSED_FieldID: jfieldID?

    open static var WINDOW_CLOSED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_CLOSED", fieldType: "I", fieldCache: &WINDOW_CLOSED_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_CLOSING

    private static var WINDOW_CLOSING_FieldID: jfieldID?

    open static var WINDOW_CLOSING: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_CLOSING", fieldType: "I", fieldCache: &WINDOW_CLOSING_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_DEACTIVATED

    private static var WINDOW_DEACTIVATED_FieldID: jfieldID?

    open static var WINDOW_DEACTIVATED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_DEACTIVATED", fieldType: "I", fieldCache: &WINDOW_DEACTIVATED_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_DEICONIFIED

    private static var WINDOW_DEICONIFIED_FieldID: jfieldID?

    open static var WINDOW_DEICONIFIED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_DEICONIFIED", fieldType: "I", fieldCache: &WINDOW_DEICONIFIED_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_FIRST

    private static var WINDOW_FIRST_FieldID: jfieldID?

    open static var WINDOW_FIRST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_FIRST", fieldType: "I", fieldCache: &WINDOW_FIRST_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_GAINED_FOCUS

    private static var WINDOW_GAINED_FOCUS_FieldID: jfieldID?

    open static var WINDOW_GAINED_FOCUS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_GAINED_FOCUS", fieldType: "I", fieldCache: &WINDOW_GAINED_FOCUS_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_ICONIFIED

    private static var WINDOW_ICONIFIED_FieldID: jfieldID?

    open static var WINDOW_ICONIFIED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_ICONIFIED", fieldType: "I", fieldCache: &WINDOW_ICONIFIED_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_LAST

    private static var WINDOW_LAST_FieldID: jfieldID?

    open static var WINDOW_LAST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_LAST", fieldType: "I", fieldCache: &WINDOW_LAST_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_LOST_FOCUS

    private static var WINDOW_LOST_FOCUS_FieldID: jfieldID?

    open static var WINDOW_LOST_FOCUS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_LOST_FOCUS", fieldType: "I", fieldCache: &WINDOW_LOST_FOCUS_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_OPENED

    private static var WINDOW_OPENED_FieldID: jfieldID?

    open static var WINDOW_OPENED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_OPENED", fieldType: "I", fieldCache: &WINDOW_OPENED_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.event.WindowEvent.WINDOW_STATE_CHANGED

    private static var WINDOW_STATE_CHANGED_FieldID: jfieldID?

    open static var WINDOW_STATE_CHANGED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WINDOW_STATE_CHANGED", fieldType: "I", fieldCache: &WINDOW_STATE_CHANGED_FieldID, className: "java/awt/event/WindowEvent", classCache: &WindowEventJNIClass )
            return Int(__value)
        }
    }

    /// private static final long java.awt.event.WindowEvent.serialVersionUID

    /// int java.awt.event.WindowEvent.newState

    // Skipping field: true false false false false false 

    /// int java.awt.event.WindowEvent.oldState

    // Skipping field: true false false false false false 

    /// transient java.awt.Window java.awt.event.WindowEvent.opposite

    // Skipping field: true false false false false false 

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_FIRST

    // Skipping field: false true false false false false 

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_HIDDEN

    // Skipping field: false true false false false false 

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_LAST

    // Skipping field: false true false false false false 

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_MOVED

    // Skipping field: false true false false false false 

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_RESIZED

    // Skipping field: false true false false false false 

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_SHOWN

    // Skipping field: false true false false false false 

    /// private static final long java.awt.event.ComponentEvent.serialVersionUID

    /// public static final long java.awt.AWTEvent.ACTION_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.COMPONENT_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.CONTAINER_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.FOCUS_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.HIERARCHY_EVENT_MASK

    // Skipping field: false true false false false false 

    /// static final long java.awt.AWTEvent.INPUT_METHODS_ENABLED_MASK

    // Skipping field: true false false false false false 

    /// public static final long java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.INVOCATION_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.ITEM_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.KEY_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.MOUSE_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.PAINT_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final int java.awt.AWTEvent.RESERVED_ID_MAX

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.TEXT_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.WINDOW_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK

    // Skipping field: false true false false false false 

    /// public static final long java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK

    // Skipping field: false true false false false false 

    /// private static java.lang.reflect.Field java.awt.AWTEvent.inputEvent_CanAccessSystemClipboard_Field

    /// private static final sun.util.logging.PlatformLogger java.awt.AWTEvent.log

    /// private static final long java.awt.AWTEvent.serialVersionUID

    /// private transient volatile java.security.AccessControlContext java.awt.AWTEvent.acc

    /// private byte[] java.awt.AWTEvent.bdata

    /// protected boolean java.awt.AWTEvent.consumed

    private static var consumed_FieldID: jfieldID?

    override open var consumed: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &WindowEvent.consumed_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &WindowEvent.consumed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// transient boolean java.awt.AWTEvent.focusManagerIsDispatching

    // Skipping field: true false false false false false 

    /// protected int java.awt.AWTEvent.id

    private static var id_FieldID: jfieldID?

    override open var id: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "id", fieldType: "I", fieldCache: &WindowEvent.id_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "id", fieldType: "I", fieldCache: &WindowEvent.id_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// transient boolean java.awt.AWTEvent.isPosted

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.AWTEvent.isSystemGenerated

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_swift.JavaObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &WindowEvent.source_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &WindowEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.awt.event.WindowEvent(java.awt.Window,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( source: Window?, id: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: source, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        let __object = JNIMethod.NewObject( className: "java/awt/event/WindowEvent", classCache: &WindowEvent.WindowEventJNIClass, methodSig: "(Ljava/awt/Window;I)V", methodCache: &WindowEvent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: Window?, _ _id: Int ) {
        self.init( source: _source, id: _id )
    }

    /// public java.awt.event.WindowEvent(java.awt.Window,int,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( source: Window?, id: Int, oldState: Int, newState: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: source, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        __args[2] = jvalue( i: jint(oldState) )
        __args[3] = jvalue( i: jint(newState) )
        let __object = JNIMethod.NewObject( className: "java/awt/event/WindowEvent", classCache: &WindowEvent.WindowEventJNIClass, methodSig: "(Ljava/awt/Window;III)V", methodCache: &WindowEvent.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: Window?, _ _id: Int, _ _oldState: Int, _ _newState: Int ) {
        self.init( source: _source, id: _id, oldState: _oldState, newState: _newState )
    }

    /// public java.awt.event.WindowEvent(java.awt.Window,int,java.awt.Window)

    private static var new_MethodID_3: jmethodID?

    public convenience init( source: Window?, id: Int, opposite: Window? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: source, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        __args[2] = JNIType.toJava( value: opposite, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/WindowEvent", classCache: &WindowEvent.WindowEventJNIClass, methodSig: "(Ljava/awt/Window;ILjava/awt/Window;)V", methodCache: &WindowEvent.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: Window?, _ _id: Int, _ _opposite: Window? ) {
        self.init( source: _source, id: _id, opposite: _opposite )
    }

    /// public java.awt.event.WindowEvent(java.awt.Window,int,java.awt.Window,int,int)

    private static var new_MethodID_4: jmethodID?

    public convenience init( source: Window?, id: Int, opposite: Window?, oldState: Int, newState: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = JNIType.toJava( value: source, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        __args[2] = JNIType.toJava( value: opposite, locals: &__locals )
        __args[3] = jvalue( i: jint(oldState) )
        __args[4] = jvalue( i: jint(newState) )
        let __object = JNIMethod.NewObject( className: "java/awt/event/WindowEvent", classCache: &WindowEvent.WindowEventJNIClass, methodSig: "(Ljava/awt/Window;ILjava/awt/Window;II)V", methodCache: &WindowEvent.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: Window?, _ _id: Int, _ _opposite: Window?, _ _oldState: Int, _ _newState: Int ) {
        self.init( source: _source, id: _id, opposite: _opposite, oldState: _oldState, newState: _newState )
    }

    /// public int java.awt.event.WindowEvent.getNewState()

    private static var getNewState_MethodID_5: jmethodID?

    open func getNewState() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNewState", methodSig: "()I", methodCache: &WindowEvent.getNewState_MethodID_5, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public int java.awt.event.WindowEvent.getOldState()

    private static var getOldState_MethodID_6: jmethodID?

    open func getOldState() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getOldState", methodSig: "()I", methodCache: &WindowEvent.getOldState_MethodID_6, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.awt.Window java.awt.event.WindowEvent.getOppositeWindow()

    private static var getOppositeWindow_MethodID_7: jmethodID?

    open func getOppositeWindow() -> Window! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOppositeWindow", methodSig: "()Ljava/awt/Window;", methodCache: &WindowEvent.getOppositeWindow_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Window( javaObject: __return ) : nil
    }


    /// public java.awt.Window java.awt.event.WindowEvent.getWindow()

    private static var getWindow_MethodID_8: jmethodID?

    open func getWindow() -> Window! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWindow", methodSig: "()Ljava/awt/Window;", methodCache: &WindowEvent.getWindow_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Window( javaObject: __return ) : nil
    }


    /// public java.lang.String java.awt.event.WindowEvent.paramString()

    // Skipping method: false true false false false 

}

