
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:21 GMT 2016 ///

/// interface java.awt.peer.MenuItemPeer ///

public protocol MenuItemPeer: MenuComponentPeer {

    /// public abstract void java.awt.peer.MenuItemPeer.enable()

    func enable()

    /// public abstract void java.awt.peer.MenuItemPeer.disable()

    func disable()

    /// public abstract void java.awt.peer.MenuItemPeer.setEnabled(boolean)

    func setEnabled( arg0: Bool )
    func setEnabled( _ _arg0: Bool )

    /// public abstract void java.awt.peer.MenuItemPeer.setLabel(java.lang.String)

    func setLabel( arg0: String? )
    func setLabel( _ _arg0: String? )

}

open class MenuItemPeerForward: MenuComponentPeerForward, MenuItemPeer {

    private static var MenuItemPeerJNIClass: jclass?

    /// public abstract void java.awt.peer.MenuItemPeer.enable()

    private static var enable_MethodID_5: jmethodID?

    open func enable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "enable", methodSig: "()V", methodCache: &MenuItemPeerForward.enable_MethodID_5, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.MenuItemPeer.disable()

    private static var disable_MethodID_6: jmethodID?

    open func disable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "disable", methodSig: "()V", methodCache: &MenuItemPeerForward.disable_MethodID_6, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.MenuItemPeer.setEnabled(boolean)

    private static var setEnabled_MethodID_7: jmethodID?

    open func setEnabled( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &MenuItemPeerForward.setEnabled_MethodID_7, args: &__args, locals: &__locals )
    }

    open func setEnabled( _ _arg0: Bool ) {
        setEnabled( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.MenuItemPeer.setLabel(java.lang.String)

    private static var setLabel_MethodID_8: jmethodID?

    open func setLabel( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLabel", methodSig: "(Ljava/lang/String;)V", methodCache: &MenuItemPeerForward.setLabel_MethodID_8, args: &__args, locals: &__locals )
    }

    open func setLabel( _ _arg0: String? ) {
        setLabel( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.MenuComponentPeer.dispose()

    private static var dispose_MethodID_9: jmethodID?

    override open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &MenuItemPeerForward.dispose_MethodID_9, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.MenuComponentPeer.setFont(java.awt.Font)

    private static var setFont_MethodID_10: jmethodID?

    override open func setFont( arg0: Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &MenuItemPeerForward.setFont_MethodID_10, args: &__args, locals: &__locals )
    }

    override open func setFont( _ _arg0: Font? ) {
        setFont( arg0: _arg0 )
    }

}


