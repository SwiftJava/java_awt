
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.event.HierarchyBoundsAdapter ///

open class HierarchyBoundsAdapter: java_swift.JavaObject, HierarchyBoundsListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var HierarchyBoundsAdapterJNIClass: jclass?

    /// public java.awt.event.HierarchyBoundsAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/event/HierarchyBoundsAdapter", classCache: &HierarchyBoundsAdapter.HierarchyBoundsAdapterJNIClass, methodSig: "()V", methodCache: &HierarchyBoundsAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.event.HierarchyBoundsAdapter.ancestorMoved(java.awt.event.HierarchyEvent)

    private static var ancestorMoved_MethodID_2: jmethodID?

    open func ancestorMoved( e: HierarchyEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ancestorMoved", methodSig: "(Ljava/awt/event/HierarchyEvent;)V", methodCache: &HierarchyBoundsAdapter.ancestorMoved_MethodID_2, args: &__args, locals: &__locals )
    }

    open func ancestorMoved( _ _e: HierarchyEvent? ) {
        ancestorMoved( e: _e )
    }

    /// public void java.awt.event.HierarchyBoundsAdapter.ancestorResized(java.awt.event.HierarchyEvent)

    private static var ancestorResized_MethodID_3: jmethodID?

    open func ancestorResized( e: HierarchyEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "ancestorResized", methodSig: "(Ljava/awt/event/HierarchyEvent;)V", methodCache: &HierarchyBoundsAdapter.ancestorResized_MethodID_3, args: &__args, locals: &__locals )
    }

    open func ancestorResized( _ _e: HierarchyEvent? ) {
        ancestorResized( e: _e )
    }

}

private typealias HierarchyBoundsAdapter_ancestorMoved_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func HierarchyBoundsAdapter_ancestorMoved_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    HierarchyBoundsAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).ancestorMoved( e: e != nil ? HierarchyEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias HierarchyBoundsAdapter_ancestorResized_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func HierarchyBoundsAdapter_ancestorResized_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    HierarchyBoundsAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).ancestorResized( e: e != nil ? HierarchyEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias HierarchyBoundsAdapter_equals_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> jboolean

private func HierarchyBoundsAdapter_equals_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> jboolean {
    JNI.inNative = true;
    let __return = HierarchyBoundsAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).equals( arg0: arg0 != nil ? java_swift.JavaObject( javaObject: arg0 ) : nil )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).z, &locals, removeLast: true )
}

private typealias HierarchyBoundsAdapter_toString_6_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jobject?

private func HierarchyBoundsAdapter_toString_6( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jobject? {
    JNI.inNative = true;
    let __return = HierarchyBoundsAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).toString( )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).l, &locals, removeLast: true )
}

private typealias HierarchyBoundsAdapter_hashCode_7_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jint

private func HierarchyBoundsAdapter_hashCode_7( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jint {
    JNI.inNative = true;
    let __return = HierarchyBoundsAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).hashCode( )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).i, &locals, removeLast: true )
}

fileprivate class HierarchyBoundsAdapterLocal_: JNIObjectProxy<HierarchyBoundsAdapter> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let HierarchyBoundsAdapter_ancestorMoved_0_thunk: HierarchyBoundsAdapter_ancestorMoved_0_type = HierarchyBoundsAdapter_ancestorMoved_0
        natives.append( JNINativeMethod( name: strdup("__ancestorMoved"), signature: strdup("(JLjava/awt/event/HierarchyEvent;)V"), fnPtr: unsafeBitCast( HierarchyBoundsAdapter_ancestorMoved_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let HierarchyBoundsAdapter_ancestorResized_1_thunk: HierarchyBoundsAdapter_ancestorResized_1_type = HierarchyBoundsAdapter_ancestorResized_1
        natives.append( JNINativeMethod( name: strdup("__ancestorResized"), signature: strdup("(JLjava/awt/event/HierarchyEvent;)V"), fnPtr: unsafeBitCast( HierarchyBoundsAdapter_ancestorResized_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let HierarchyBoundsAdapter_equals_5_thunk: HierarchyBoundsAdapter_equals_5_type = HierarchyBoundsAdapter_equals_5
        natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(JLjava/lang/Object;)Z"), fnPtr: unsafeBitCast( HierarchyBoundsAdapter_equals_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let HierarchyBoundsAdapter_toString_6_thunk: HierarchyBoundsAdapter_toString_6_type = HierarchyBoundsAdapter_toString_6
        natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("(J)Ljava/lang/String;"), fnPtr: unsafeBitCast( HierarchyBoundsAdapter_toString_6_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let HierarchyBoundsAdapter_hashCode_7_thunk: HierarchyBoundsAdapter_hashCode_7_type = HierarchyBoundsAdapter_hashCode_7
        natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("(J)I"), fnPtr: unsafeBitCast( HierarchyBoundsAdapter_hashCode_7_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/HierarchyBoundsAdapterProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

open class HierarchyBoundsAdapterBase: HierarchyBoundsAdapter {

    private static var HierarchyBoundsAdapterBaseJNIClass: jclass? = HierarchyBoundsAdapterLocal_.proxyClass()

    private lazy var __local: HierarchyBoundsAdapterLocal_? = HierarchyBoundsAdapterLocal_( owned: self, proto: self )

    override open func clearLocal() {
        __local = nil
    }

    open func inherit( _ parent: JNIObjectProtocol ) {
        parent.withJavaObject {
            self.javaObject = $0
            self.__local?.takeOwnership(javaObject: $0)
        }
    }

    /// public java.awt.event.HierarchyBoundsAdapter()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/HierarchyBoundsAdapterProxy", classCache: &HierarchyBoundsAdapterBase.HierarchyBoundsAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &HierarchyBoundsAdapterBase.new_MethodID_4, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
