
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:07 GMT 2016 ///

/// class java.awt.font.NumericShaper ///

open class NumericShaper: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.font.NumericShaper", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var NumericShaperJNIClass: jclass?

    /// private int java.awt.font.NumericShaper.key

    /// private int java.awt.font.NumericShaper.mask

    /// public static final int java.awt.font.NumericShaper.EUROPEAN

    private static var EUROPEAN_FieldID: jfieldID?

    open static var EUROPEAN: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "EUROPEAN", fieldType: "I", fieldCache: &EUROPEAN_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.ARABIC

    private static var ARABIC_FieldID: jfieldID?

    open static var ARABIC: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ARABIC", fieldType: "I", fieldCache: &ARABIC_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.EASTERN_ARABIC

    private static var EASTERN_ARABIC_FieldID: jfieldID?

    open static var EASTERN_ARABIC: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "EASTERN_ARABIC", fieldType: "I", fieldCache: &EASTERN_ARABIC_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.DEVANAGARI

    private static var DEVANAGARI_FieldID: jfieldID?

    open static var DEVANAGARI: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEVANAGARI", fieldType: "I", fieldCache: &DEVANAGARI_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.BENGALI

    private static var BENGALI_FieldID: jfieldID?

    open static var BENGALI: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BENGALI", fieldType: "I", fieldCache: &BENGALI_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.GURMUKHI

    private static var GURMUKHI_FieldID: jfieldID?

    open static var GURMUKHI: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "GURMUKHI", fieldType: "I", fieldCache: &GURMUKHI_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.GUJARATI

    private static var GUJARATI_FieldID: jfieldID?

    open static var GUJARATI: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "GUJARATI", fieldType: "I", fieldCache: &GUJARATI_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.ORIYA

    private static var ORIYA_FieldID: jfieldID?

    open static var ORIYA: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ORIYA", fieldType: "I", fieldCache: &ORIYA_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.TAMIL

    private static var TAMIL_FieldID: jfieldID?

    open static var TAMIL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TAMIL", fieldType: "I", fieldCache: &TAMIL_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.TELUGU

    private static var TELUGU_FieldID: jfieldID?

    open static var TELUGU: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TELUGU", fieldType: "I", fieldCache: &TELUGU_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.KANNADA

    private static var KANNADA_FieldID: jfieldID?

    open static var KANNADA: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "KANNADA", fieldType: "I", fieldCache: &KANNADA_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.MALAYALAM

    private static var MALAYALAM_FieldID: jfieldID?

    open static var MALAYALAM: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MALAYALAM", fieldType: "I", fieldCache: &MALAYALAM_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.THAI

    private static var THAI_FieldID: jfieldID?

    open static var THAI: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "THAI", fieldType: "I", fieldCache: &THAI_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.LAO

    private static var LAO_FieldID: jfieldID?

    open static var LAO: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LAO", fieldType: "I", fieldCache: &LAO_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.TIBETAN

    private static var TIBETAN_FieldID: jfieldID?

    open static var TIBETAN: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TIBETAN", fieldType: "I", fieldCache: &TIBETAN_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.MYANMAR

    private static var MYANMAR_FieldID: jfieldID?

    open static var MYANMAR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MYANMAR", fieldType: "I", fieldCache: &MYANMAR_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.ETHIOPIC

    private static var ETHIOPIC_FieldID: jfieldID?

    open static var ETHIOPIC: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ETHIOPIC", fieldType: "I", fieldCache: &ETHIOPIC_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.KHMER

    private static var KHMER_FieldID: jfieldID?

    open static var KHMER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "KHMER", fieldType: "I", fieldCache: &KHMER_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.MONGOLIAN

    private static var MONGOLIAN_FieldID: jfieldID?

    open static var MONGOLIAN: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MONGOLIAN", fieldType: "I", fieldCache: &MONGOLIAN_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.font.NumericShaper.ALL_RANGES

    private static var ALL_RANGES_FieldID: jfieldID?

    open static var ALL_RANGES: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ALL_RANGES", fieldType: "I", fieldCache: &ALL_RANGES_FieldID, className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private static final int java.awt.font.NumericShaper.EUROPEAN_KEY

    /// private static final int java.awt.font.NumericShaper.ARABIC_KEY

    /// private static final int java.awt.font.NumericShaper.EASTERN_ARABIC_KEY

    /// private static final int java.awt.font.NumericShaper.DEVANAGARI_KEY

    /// private static final int java.awt.font.NumericShaper.BENGALI_KEY

    /// private static final int java.awt.font.NumericShaper.GURMUKHI_KEY

    /// private static final int java.awt.font.NumericShaper.GUJARATI_KEY

    /// private static final int java.awt.font.NumericShaper.ORIYA_KEY

    /// private static final int java.awt.font.NumericShaper.TAMIL_KEY

    /// private static final int java.awt.font.NumericShaper.TELUGU_KEY

    /// private static final int java.awt.font.NumericShaper.KANNADA_KEY

    /// private static final int java.awt.font.NumericShaper.MALAYALAM_KEY

    /// private static final int java.awt.font.NumericShaper.THAI_KEY

    /// private static final int java.awt.font.NumericShaper.LAO_KEY

    /// private static final int java.awt.font.NumericShaper.TIBETAN_KEY

    /// private static final int java.awt.font.NumericShaper.MYANMAR_KEY

    /// private static final int java.awt.font.NumericShaper.ETHIOPIC_KEY

    /// private static final int java.awt.font.NumericShaper.KHMER_KEY

    /// private static final int java.awt.font.NumericShaper.MONGOLIAN_KEY

    /// private static final int java.awt.font.NumericShaper.NUM_KEYS

    /// private static final java.lang.String[] java.awt.font.NumericShaper.keyNames

    /// private static final int java.awt.font.NumericShaper.CONTEXTUAL_MASK

    /// private static final char[] java.awt.font.NumericShaper.bases

    /// private static final char[] java.awt.font.NumericShaper.contexts

    /// private static int java.awt.font.NumericShaper.ctCache

    /// private static int java.awt.font.NumericShaper.ctCacheLimit

    /// private static char[] java.awt.font.NumericShaper.strongTable

    /// private static int java.awt.font.NumericShaper.stCache

    /// private java.awt.font.NumericShaper(int,int)

    /// public boolean java.awt.font.NumericShaper.equals(java.lang.Object)

    /// public java.lang.String java.awt.font.NumericShaper.toString()

    /// public int java.awt.font.NumericShaper.hashCode()

    /// private static int java.awt.font.NumericShaper.search(char,char[],int,int)

    /// public void java.awt.font.NumericShaper.shape(char[],int,int)

    private static var shape_MethodID_1: jmethodID?

    open func shape( arg0: [UInt16]?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "shape", methodSig: "([CII)V", methodCache: &NumericShaper.shape_MethodID_1, args: &__args, locals: &__locals )
    }

    open func shape( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int ) {
        shape( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.font.NumericShaper.shape(char[],int,int,int)

    private static var shape_MethodID_2: jmethodID?

    open func shape( arg0: [UInt16]?, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "shape", methodSig: "([CIII)V", methodCache: &NumericShaper.shape_MethodID_2, args: &__args, locals: &__locals )
    }

    open func shape( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        shape( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// private static int java.awt.font.NumericShaper.getContextKey(char)

    /// private static boolean java.awt.font.NumericShaper.isStrongDirectional(char)

    /// private static int java.awt.font.NumericShaper.getKeyFromMask(int)

    /// public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getShaper(int)

    private static var getShaper_MethodID_3: jmethodID?

    open class func getShaper( arg0: Int ) -> NumericShaper! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass, methodName: "getShaper", methodSig: "(I)Ljava/awt/font/NumericShaper;", methodCache: &getShaper_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NumericShaper( javaObject: __return ) : nil
    }

    open class func getShaper( _ _arg0: Int ) -> NumericShaper! {
        return getShaper( arg0: _arg0 )
    }

    /// public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getContextualShaper(int)

    private static var getContextualShaper_MethodID_4: jmethodID?

    open class func getContextualShaper( arg0: Int ) -> NumericShaper! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass, methodName: "getContextualShaper", methodSig: "(I)Ljava/awt/font/NumericShaper;", methodCache: &getContextualShaper_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NumericShaper( javaObject: __return ) : nil
    }

    open class func getContextualShaper( _ _arg0: Int ) -> NumericShaper! {
        return getContextualShaper( arg0: _arg0 )
    }

    /// public static java.awt.font.NumericShaper java.awt.font.NumericShaper.getContextualShaper(int,int)

    private static var getContextualShaper_MethodID_5: jmethodID?

    open class func getContextualShaper( arg0: Int, arg1: Int ) -> NumericShaper! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/font/NumericShaper", classCache: &NumericShaperJNIClass, methodName: "getContextualShaper", methodSig: "(II)Ljava/awt/font/NumericShaper;", methodCache: &getContextualShaper_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NumericShaper( javaObject: __return ) : nil
    }

    open class func getContextualShaper( _ _arg0: Int, _ _arg1: Int ) -> NumericShaper! {
        return getContextualShaper( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.awt.font.NumericShaper.isContextual()

    private static var isContextual_MethodID_6: jmethodID?

    open func isContextual() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isContextual", methodSig: "()Z", methodCache: &NumericShaper.isContextual_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.awt.font.NumericShaper.getRanges()

    private static var getRanges_MethodID_7: jmethodID?

    open func getRanges() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getRanges", methodSig: "()I", methodCache: &NumericShaper.getRanges_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private void java.awt.font.NumericShaper.shapeNonContextually(char[],int,int)

    /// private synchronized void java.awt.font.NumericShaper.shapeContextually(char[],int,int,int)

    /// private static int java.awt.font.NumericShaper.getHighBit(int)

}
