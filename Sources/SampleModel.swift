
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:31 GMT 2016 ///

/// class java.awt.image.SampleModel ///

open class SampleModel: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.SampleModel", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SampleModelJNIClass: jclass?

    /// protected int java.awt.image.SampleModel.width

    private static var width_FieldID: jfieldID?

    open var width: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "width", fieldType: "I", fieldCache: &SampleModel.width_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "width", fieldType: "I", fieldCache: &SampleModel.width_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.SampleModel.height

    private static var height_FieldID: jfieldID?

    open var height: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "height", fieldType: "I", fieldCache: &SampleModel.height_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "height", fieldType: "I", fieldCache: &SampleModel.height_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.SampleModel.numBands

    private static var numBands_FieldID: jfieldID?

    open var numBands: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &SampleModel.numBands_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &SampleModel.numBands_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.SampleModel.dataType

    private static var dataType_FieldID: jfieldID?

    open var dataType: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "dataType", fieldType: "I", fieldCache: &SampleModel.dataType_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "dataType", fieldType: "I", fieldCache: &SampleModel.dataType_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public java.awt.image.SampleModel(int,int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/SampleModel", classCache: &SampleModel.SampleModelJNIClass, methodSig: "(IIII)V", methodCache: &SampleModel.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// private static native void java.awt.image.SampleModel.initIDs()

    /// public final int java.awt.image.SampleModel.getWidth()

    private static var getWidth_MethodID_2: jmethodID?

    open func getWidth() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getWidth", methodSig: "()I", methodCache: &SampleModel.getWidth_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final int java.awt.image.SampleModel.getHeight()

    private static var getHeight_MethodID_3: jmethodID?

    open func getHeight() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getHeight", methodSig: "()I", methodCache: &SampleModel.getHeight_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.image.SampleModel.getTransferType()

    private static var getTransferType_MethodID_4: jmethodID?

    open func getTransferType() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTransferType", methodSig: "()I", methodCache: &SampleModel.getTransferType_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.lang.Object java.awt.image.SampleModel.getDataElements(int,int,int,int,java.lang.Object,java.awt.image.DataBuffer)

    private static var getDataElements_MethodID_5: jmethodID?

    open func getDataElements( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: java_lang.JavaObject?, arg5: DataBuffer? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDataElements", methodSig: "(IIIILjava/lang/Object;Ljava/awt/image/DataBuffer;)Ljava/lang/Object;", methodCache: &SampleModel.getDataElements_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: java_lang.JavaObject?, _ _arg5: DataBuffer? ) -> java_lang.JavaObject! {
        return getDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract java.lang.Object java.awt.image.SampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)

    private static var getDataElements_MethodID_6: jmethodID?

    open func getDataElements( arg0: Int, arg1: Int, arg2: java_lang.JavaObject?, arg3: DataBuffer? ) -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDataElements", methodSig: "(IILjava/lang/Object;Ljava/awt/image/DataBuffer;)Ljava/lang/Object;", methodCache: &SampleModel.getDataElements_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: java_lang.JavaObject?, _ _arg3: DataBuffer? ) -> java_lang.JavaObject! {
        return getDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract java.awt.image.SampleModel java.awt.image.SampleModel.createCompatibleSampleModel(int,int)

    private static var createCompatibleSampleModel_MethodID_7: jmethodID?

    open func createCompatibleSampleModel( arg0: Int, arg1: Int ) -> SampleModel! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createCompatibleSampleModel", methodSig: "(II)Ljava/awt/image/SampleModel;", methodCache: &SampleModel.createCompatibleSampleModel_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SampleModel( javaObject: __return ) : nil
    }

    open func createCompatibleSampleModel( _ _arg0: Int, _ _arg1: Int ) -> SampleModel! {
        return createCompatibleSampleModel( arg0: _arg0, arg1: _arg1 )
    }

    /// public final int java.awt.image.SampleModel.getNumBands()

    private static var getNumBands_MethodID_8: jmethodID?

    open func getNumBands() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumBands", methodSig: "()I", methodCache: &SampleModel.getNumBands_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract int java.awt.image.SampleModel.getNumDataElements()

    private static var getNumDataElements_MethodID_9: jmethodID?

    open func getNumDataElements() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumDataElements", methodSig: "()I", methodCache: &SampleModel.getNumDataElements_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int[] java.awt.image.SampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)

    private static var getPixel_MethodID_10: jmethodID?

    open func getPixel( arg0: Int, arg1: Int, arg2: [Int32]?, arg3: DataBuffer? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixel", methodSig: "(II[ILjava/awt/image/DataBuffer;)[I", methodCache: &SampleModel.getPixel_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Int32]?, _ _arg3: DataBuffer? ) -> [Int32]! {
        return getPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public float[] java.awt.image.SampleModel.getPixel(int,int,float[],java.awt.image.DataBuffer)

    private static var getPixel_MethodID_11: jmethodID?

    open func getPixel( arg0: Int, arg1: Int, arg2: [Float]?, arg3: DataBuffer? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixel", methodSig: "(II[FLjava/awt/image/DataBuffer;)[F", methodCache: &SampleModel.getPixel_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Float]?, _ _arg3: DataBuffer? ) -> [Float]! {
        return getPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public double[] java.awt.image.SampleModel.getPixel(int,int,double[],java.awt.image.DataBuffer)

    private static var getPixel_MethodID_12: jmethodID?

    open func getPixel( arg0: Int, arg1: Int, arg2: [Double]?, arg3: DataBuffer? ) -> [Double]! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixel", methodSig: "(II[DLjava/awt/image/DataBuffer;)[D", methodCache: &SampleModel.getPixel_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Double](), from: __return )
    }

    open func getPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Double]?, _ _arg3: DataBuffer? ) -> [Double]! {
        return getPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public int[] java.awt.image.SampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)

    private static var getPixels_MethodID_13: jmethodID?

    open func getPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Int32]?, arg5: DataBuffer? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixels", methodSig: "(IIII[ILjava/awt/image/DataBuffer;)[I", methodCache: &SampleModel.getPixels_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Int32]?, _ _arg5: DataBuffer? ) -> [Int32]! {
        return getPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public float[] java.awt.image.SampleModel.getPixels(int,int,int,int,float[],java.awt.image.DataBuffer)

    private static var getPixels_MethodID_14: jmethodID?

    open func getPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Float]?, arg5: DataBuffer? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixels", methodSig: "(IIII[FLjava/awt/image/DataBuffer;)[F", methodCache: &SampleModel.getPixels_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Float]?, _ _arg5: DataBuffer? ) -> [Float]! {
        return getPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public double[] java.awt.image.SampleModel.getPixels(int,int,int,int,double[],java.awt.image.DataBuffer)

    private static var getPixels_MethodID_15: jmethodID?

    open func getPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Double]?, arg5: DataBuffer? ) -> [Double]! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixels", methodSig: "(IIII[DLjava/awt/image/DataBuffer;)[D", methodCache: &SampleModel.getPixels_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Double](), from: __return )
    }

    open func getPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Double]?, _ _arg5: DataBuffer? ) -> [Double]! {
        return getPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract int java.awt.image.SampleModel.getSample(int,int,int,java.awt.image.DataBuffer)

    private static var getSample_MethodID_16: jmethodID?

    open func getSample( arg0: Int, arg1: Int, arg2: Int, arg3: DataBuffer? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSample", methodSig: "(IIILjava/awt/image/DataBuffer;)I", methodCache: &SampleModel.getSample_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: DataBuffer? ) -> Int {
        return getSample( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public float java.awt.image.SampleModel.getSampleFloat(int,int,int,java.awt.image.DataBuffer)

    private static var getSampleFloat_MethodID_17: jmethodID?

    open func getSampleFloat( arg0: Int, arg1: Int, arg2: Int, arg3: DataBuffer? ) -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getSampleFloat", methodSig: "(IIILjava/awt/image/DataBuffer;)F", methodCache: &SampleModel.getSampleFloat_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }

    open func getSampleFloat( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: DataBuffer? ) -> Float {
        return getSampleFloat( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public double java.awt.image.SampleModel.getSampleDouble(int,int,int,java.awt.image.DataBuffer)

    private static var getSampleDouble_MethodID_18: jmethodID?

    open func getSampleDouble( arg0: Int, arg1: Int, arg2: Int, arg3: DataBuffer? ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getSampleDouble", methodSig: "(IIILjava/awt/image/DataBuffer;)D", methodCache: &SampleModel.getSampleDouble_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open func getSampleDouble( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: DataBuffer? ) -> Double {
        return getSampleDouble( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public double[] java.awt.image.SampleModel.getSamples(int,int,int,int,int,double[],java.awt.image.DataBuffer)

    private static var getSamples_MethodID_19: jmethodID?

    open func getSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Double]?, arg6: DataBuffer? ) -> [Double]! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSamples", methodSig: "(IIIII[DLjava/awt/image/DataBuffer;)[D", methodCache: &SampleModel.getSamples_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Double](), from: __return )
    }

    open func getSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Double]?, _ _arg6: DataBuffer? ) -> [Double]! {
        return getSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public int[] java.awt.image.SampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)

    private static var getSamples_MethodID_20: jmethodID?

    open func getSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]?, arg6: DataBuffer? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSamples", methodSig: "(IIIII[ILjava/awt/image/DataBuffer;)[I", methodCache: &SampleModel.getSamples_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]?, _ _arg6: DataBuffer? ) -> [Int32]! {
        return getSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public float[] java.awt.image.SampleModel.getSamples(int,int,int,int,int,float[],java.awt.image.DataBuffer)

    private static var getSamples_MethodID_21: jmethodID?

    open func getSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Float]?, arg6: DataBuffer? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSamples", methodSig: "(IIIII[FLjava/awt/image/DataBuffer;)[F", methodCache: &SampleModel.getSamples_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Float]?, _ _arg6: DataBuffer? ) -> [Float]! {
        return getSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public final int java.awt.image.SampleModel.getDataType()

    private static var getDataType_MethodID_22: jmethodID?

    open func getDataType() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDataType", methodSig: "()I", methodCache: &SampleModel.getDataType_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract int java.awt.image.SampleModel.getSampleSize(int)

    private static var getSampleSize_MethodID_23: jmethodID?

    open func getSampleSize( arg0: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSampleSize", methodSig: "(I)I", methodCache: &SampleModel.getSampleSize_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getSampleSize( _ _arg0: Int ) -> Int {
        return getSampleSize( arg0: _arg0 )
    }

    /// public abstract int[] java.awt.image.SampleModel.getSampleSize()

    private static var getSampleSize_MethodID_24: jmethodID?

    open func getSampleSize() -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSampleSize", methodSig: "()[I", methodCache: &SampleModel.getSampleSize_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }


    /// public abstract java.awt.image.DataBuffer java.awt.image.SampleModel.createDataBuffer()

    private static var createDataBuffer_MethodID_25: jmethodID?

    open func createDataBuffer() -> DataBuffer! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDataBuffer", methodSig: "()Ljava/awt/image/DataBuffer;", methodCache: &SampleModel.createDataBuffer_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DataBuffer( javaObject: __return ) : nil
    }


    /// public abstract java.awt.image.SampleModel java.awt.image.SampleModel.createSubsetSampleModel(int[])

    private static var createSubsetSampleModel_MethodID_26: jmethodID?

    open func createSubsetSampleModel( arg0: [Int32]? ) -> SampleModel! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createSubsetSampleModel", methodSig: "([I)Ljava/awt/image/SampleModel;", methodCache: &SampleModel.createSubsetSampleModel_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SampleModel( javaObject: __return ) : nil
    }

    open func createSubsetSampleModel( _ _arg0: [Int32]? ) -> SampleModel! {
        return createSubsetSampleModel( arg0: _arg0 )
    }

    /// public abstract void java.awt.image.SampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)

    private static var setDataElements_MethodID_27: jmethodID?

    open func setDataElements( arg0: Int, arg1: Int, arg2: java_lang.JavaObject?, arg3: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IILjava/lang/Object;Ljava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setDataElements_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: java_lang.JavaObject?, _ _arg3: DataBuffer? ) {
        setDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.image.SampleModel.setDataElements(int,int,int,int,java.lang.Object,java.awt.image.DataBuffer)

    private static var setDataElements_MethodID_28: jmethodID?

    open func setDataElements( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: java_lang.JavaObject?, arg5: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDataElements", methodSig: "(IIIILjava/lang/Object;Ljava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setDataElements_MethodID_28, args: &__args, locals: &__locals )
    }

    open func setDataElements( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: java_lang.JavaObject?, _ _arg5: DataBuffer? ) {
        setDataElements( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.image.SampleModel.setPixel(int,int,double[],java.awt.image.DataBuffer)

    private static var setPixel_MethodID_29: jmethodID?

    open func setPixel( arg0: Int, arg1: Int, arg2: [Double]?, arg3: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[DLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setPixel_MethodID_29, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Double]?, _ _arg3: DataBuffer? ) {
        setPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.image.SampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)

    private static var setPixel_MethodID_30: jmethodID?

    open func setPixel( arg0: Int, arg1: Int, arg2: [Int32]?, arg3: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[ILjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setPixel_MethodID_30, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Int32]?, _ _arg3: DataBuffer? ) {
        setPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.image.SampleModel.setPixel(int,int,float[],java.awt.image.DataBuffer)

    private static var setPixel_MethodID_31: jmethodID?

    open func setPixel( arg0: Int, arg1: Int, arg2: [Float]?, arg3: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixel", methodSig: "(II[FLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setPixel_MethodID_31, args: &__args, locals: &__locals )
    }

    open func setPixel( _ _arg0: Int, _ _arg1: Int, _ _arg2: [Float]?, _ _arg3: DataBuffer? ) {
        setPixel( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public void java.awt.image.SampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)

    private static var setPixels_MethodID_32: jmethodID?

    open func setPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Int32]?, arg5: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[ILjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setPixels_MethodID_32, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Int32]?, _ _arg5: DataBuffer? ) {
        setPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.image.SampleModel.setPixels(int,int,int,int,double[],java.awt.image.DataBuffer)

    private static var setPixels_MethodID_33: jmethodID?

    open func setPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Double]?, arg5: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[DLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setPixels_MethodID_33, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Double]?, _ _arg5: DataBuffer? ) {
        setPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.image.SampleModel.setPixels(int,int,int,int,float[],java.awt.image.DataBuffer)

    private static var setPixels_MethodID_34: jmethodID?

    open func setPixels( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: [Float]?, arg5: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPixels", methodSig: "(IIII[FLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setPixels_MethodID_34, args: &__args, locals: &__locals )
    }

    open func setPixels( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: [Float]?, _ _arg5: DataBuffer? ) {
        setPixels( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public void java.awt.image.SampleModel.setSample(int,int,int,double,java.awt.image.DataBuffer)

    private static var setSample_MethodID_35: jmethodID?

    open func setSample( arg0: Int, arg1: Int, arg2: Int, arg3: Double, arg4: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIIDLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setSample_MethodID_35, args: &__args, locals: &__locals )
    }

    open func setSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Double, _ _arg4: DataBuffer? ) {
        setSample( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public abstract void java.awt.image.SampleModel.setSample(int,int,int,int,java.awt.image.DataBuffer)

    private static var setSample_MethodID_36: jmethodID?

    open func setSample( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIIILjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setSample_MethodID_36, args: &__args, locals: &__locals )
    }

    open func setSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: DataBuffer? ) {
        setSample( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.image.SampleModel.setSample(int,int,int,float,java.awt.image.DataBuffer)

    private static var setSample_MethodID_37: jmethodID?

    open func setSample( arg0: Int, arg1: Int, arg2: Int, arg3: Float, arg4: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSample", methodSig: "(IIIFLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setSample_MethodID_37, args: &__args, locals: &__locals )
    }

    open func setSample( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Float, _ _arg4: DataBuffer? ) {
        setSample( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public void java.awt.image.SampleModel.setSamples(int,int,int,int,int,float[],java.awt.image.DataBuffer)

    private static var setSamples_MethodID_38: jmethodID?

    open func setSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Float]?, arg6: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[FLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setSamples_MethodID_38, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Float]?, _ _arg6: DataBuffer? ) {
        setSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public void java.awt.image.SampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)

    private static var setSamples_MethodID_39: jmethodID?

    open func setSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]?, arg6: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[ILjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setSamples_MethodID_39, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]?, _ _arg6: DataBuffer? ) {
        setSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public void java.awt.image.SampleModel.setSamples(int,int,int,int,int,double[],java.awt.image.DataBuffer)

    private static var setSamples_MethodID_40: jmethodID?

    open func setSamples( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Double]?, arg6: DataBuffer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSamples", methodSig: "(IIIII[DLjava/awt/image/DataBuffer;)V", methodCache: &SampleModel.setSamples_MethodID_40, args: &__args, locals: &__locals )
    }

    open func setSamples( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Double]?, _ _arg6: DataBuffer? ) {
        setSamples( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

}
