
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.RadialGradientPaint ///

open class RadialGradientPaint: MultipleGradientPaint {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RadialGradientPaintJNIClass: jclass?

    /// private final java.awt.geom.Point2D java.awt.RadialGradientPaint.focus

    /// private final java.awt.geom.Point2D java.awt.RadialGradientPaint.center

    /// private final float java.awt.RadialGradientPaint.radius

    /// final int java.awt.MultipleGradientPaint.transparency

    /// final float[] java.awt.MultipleGradientPaint.fractions

    /// final java.awt.Color[] java.awt.MultipleGradientPaint.colors

    /// final java.awt.geom.AffineTransform java.awt.MultipleGradientPaint.gradientTransform

    /// final java.awt.MultipleGradientPaint$CycleMethod java.awt.MultipleGradientPaint.cycleMethod

    /// final java.awt.MultipleGradientPaint$ColorSpaceType java.awt.MultipleGradientPaint.colorSpace

    /// java.awt.image.ColorModel java.awt.MultipleGradientPaint.model

    /// float[] java.awt.MultipleGradientPaint.normalizedIntervals

    /// boolean java.awt.MultipleGradientPaint.isSimpleLookup

    /// java.lang.ref.SoftReference java.awt.MultipleGradientPaint.gradients

    /// java.lang.ref.SoftReference java.awt.MultipleGradientPaint.gradient

    /// int java.awt.MultipleGradientPaint.fastGradientArraySize

    /// public static final int java.awt.Transparency.OPAQUE

    /// public static final int java.awt.Transparency.BITMASK

    /// public static final int java.awt.Transparency.TRANSLUCENT

    /// public java.awt.RadialGradientPaint(float,float,float,float,float,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)

    private static var new_MethodID_1: jmethodID?

    public convenience init( cx: Float, cy: Float, radius: Float, fx: Float, fy: Float, fractions: [Float]?, colors: [Color]?, cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cx, locals: &__locals )
        __args[1] = JNIType.toJava( value: cy, locals: &__locals )
        __args[2] = JNIType.toJava( value: radius, locals: &__locals )
        __args[3] = JNIType.toJava( value: fx, locals: &__locals )
        __args[4] = JNIType.toJava( value: fy, locals: &__locals )
        __args[5] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[6] = JNIType.toJava( value: colors, locals: &__locals )
        __args[7] = JNIType.toJava( value: cycleMethod, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(FFFFF[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;)V", methodCache: &RadialGradientPaint.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _cx: Float, _ _cy: Float, _ _radius: Float, _ _fx: Float, _ _fy: Float, _ _fractions: [Float]?, _ _colors: [Color]?, _ _cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        self.init( cx: _cx, cy: _cy, radius: _radius, fx: _fx, fy: _fy, fractions: _fractions, colors: _colors, cycleMethod: _cycleMethod )
    }

    /// public java.awt.RadialGradientPaint(java.awt.geom.Point2D,float,java.awt.geom.Point2D,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)

    private static var new_MethodID_2: jmethodID?

    public convenience init( center: Point2D?, radius: Float, focus: Point2D?, fractions: [Float]?, colors: [Color]?, cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: center, locals: &__locals )
        __args[1] = JNIType.toJava( value: radius, locals: &__locals )
        __args[2] = JNIType.toJava( value: focus, locals: &__locals )
        __args[3] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[4] = JNIType.toJava( value: colors, locals: &__locals )
        __args[5] = JNIType.toJava( value: cycleMethod, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Point2D;FLjava/awt/geom/Point2D;[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;)V", methodCache: &RadialGradientPaint.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _center: Point2D?, _ _radius: Float, _ _focus: Point2D?, _ _fractions: [Float]?, _ _colors: [Color]?, _ _cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        self.init( center: _center, radius: _radius, focus: _focus, fractions: _fractions, colors: _colors, cycleMethod: _cycleMethod )
    }

    /// public java.awt.RadialGradientPaint(java.awt.geom.Point2D,float,java.awt.geom.Point2D,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod,java.awt.MultipleGradientPaint$ColorSpaceType,java.awt.geom.AffineTransform)

    private static var new_MethodID_3: jmethodID?

    public convenience init( center: Point2D?, radius: Float, focus: Point2D?, fractions: [Float]?, colors: [Color]?, cycleMethod: MultipleGradientPaint_CycleMethod?, colorSpace: MultipleGradientPaint_ColorSpaceType?, gradientTransform: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: center, locals: &__locals )
        __args[1] = JNIType.toJava( value: radius, locals: &__locals )
        __args[2] = JNIType.toJava( value: focus, locals: &__locals )
        __args[3] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[4] = JNIType.toJava( value: colors, locals: &__locals )
        __args[5] = JNIType.toJava( value: cycleMethod, locals: &__locals )
        __args[6] = JNIType.toJava( value: colorSpace, locals: &__locals )
        __args[7] = JNIType.toJava( value: gradientTransform, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Point2D;FLjava/awt/geom/Point2D;[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;Ljava/awt/MultipleGradientPaint$ColorSpaceType;Ljava/awt/geom/AffineTransform;)V", methodCache: &RadialGradientPaint.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _center: Point2D?, _ _radius: Float, _ _focus: Point2D?, _ _fractions: [Float]?, _ _colors: [Color]?, _ _cycleMethod: MultipleGradientPaint_CycleMethod?, _ _colorSpace: MultipleGradientPaint_ColorSpaceType?, _ _gradientTransform: AffineTransform? ) {
        self.init( center: _center, radius: _radius, focus: _focus, fractions: _fractions, colors: _colors, cycleMethod: _cycleMethod, colorSpace: _colorSpace, gradientTransform: _gradientTransform )
    }

    /// public java.awt.RadialGradientPaint(java.awt.geom.Rectangle2D,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)

    private static var new_MethodID_4: jmethodID?

    public convenience init( gradientBounds: Rectangle2D?, fractions: [Float]?, colors: [Color]?, cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: gradientBounds, locals: &__locals )
        __args[1] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[2] = JNIType.toJava( value: colors, locals: &__locals )
        __args[3] = JNIType.toJava( value: cycleMethod, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Rectangle2D;[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;)V", methodCache: &RadialGradientPaint.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _gradientBounds: Rectangle2D?, _ _fractions: [Float]?, _ _colors: [Color]?, _ _cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        self.init( gradientBounds: _gradientBounds, fractions: _fractions, colors: _colors, cycleMethod: _cycleMethod )
    }

    /// public java.awt.RadialGradientPaint(float,float,float,float[],java.awt.Color[])

    private static var new_MethodID_5: jmethodID?

    public convenience init( cx: Float, cy: Float, radius: Float, fractions: [Float]?, colors: [Color]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cx, locals: &__locals )
        __args[1] = JNIType.toJava( value: cy, locals: &__locals )
        __args[2] = JNIType.toJava( value: radius, locals: &__locals )
        __args[3] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[4] = JNIType.toJava( value: colors, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(FFF[F[Ljava/awt/Color;)V", methodCache: &RadialGradientPaint.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _cx: Float, _ _cy: Float, _ _radius: Float, _ _fractions: [Float]?, _ _colors: [Color]? ) {
        self.init( cx: _cx, cy: _cy, radius: _radius, fractions: _fractions, colors: _colors )
    }

    /// public java.awt.RadialGradientPaint(java.awt.geom.Point2D,float,float[],java.awt.Color[])

    private static var new_MethodID_6: jmethodID?

    public convenience init( center: Point2D?, radius: Float, fractions: [Float]?, colors: [Color]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: center, locals: &__locals )
        __args[1] = JNIType.toJava( value: radius, locals: &__locals )
        __args[2] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[3] = JNIType.toJava( value: colors, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Point2D;F[F[Ljava/awt/Color;)V", methodCache: &RadialGradientPaint.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _center: Point2D?, _ _radius: Float, _ _fractions: [Float]?, _ _colors: [Color]? ) {
        self.init( center: _center, radius: _radius, fractions: _fractions, colors: _colors )
    }

    /// public java.awt.RadialGradientPaint(float,float,float,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)

    private static var new_MethodID_7: jmethodID?

    public convenience init( cx: Float, cy: Float, radius: Float, fractions: [Float]?, colors: [Color]?, cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cx, locals: &__locals )
        __args[1] = JNIType.toJava( value: cy, locals: &__locals )
        __args[2] = JNIType.toJava( value: radius, locals: &__locals )
        __args[3] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[4] = JNIType.toJava( value: colors, locals: &__locals )
        __args[5] = JNIType.toJava( value: cycleMethod, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(FFF[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;)V", methodCache: &RadialGradientPaint.new_MethodID_7, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _cx: Float, _ _cy: Float, _ _radius: Float, _ _fractions: [Float]?, _ _colors: [Color]?, _ _cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        self.init( cx: _cx, cy: _cy, radius: _radius, fractions: _fractions, colors: _colors, cycleMethod: _cycleMethod )
    }

    /// public java.awt.RadialGradientPaint(java.awt.geom.Point2D,float,float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod)

    private static var new_MethodID_8: jmethodID?

    public convenience init( center: Point2D?, radius: Float, fractions: [Float]?, colors: [Color]?, cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: center, locals: &__locals )
        __args[1] = JNIType.toJava( value: radius, locals: &__locals )
        __args[2] = JNIType.toJava( value: fractions, locals: &__locals )
        __args[3] = JNIType.toJava( value: colors, locals: &__locals )
        __args[4] = JNIType.toJava( value: cycleMethod, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RadialGradientPaint", classCache: &RadialGradientPaint.RadialGradientPaintJNIClass, methodSig: "(Ljava/awt/geom/Point2D;F[F[Ljava/awt/Color;Ljava/awt/MultipleGradientPaint$CycleMethod;)V", methodCache: &RadialGradientPaint.new_MethodID_8, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _center: Point2D?, _ _radius: Float, _ _fractions: [Float]?, _ _colors: [Color]?, _ _cycleMethod: MultipleGradientPaint_CycleMethod? ) {
        self.init( center: _center, radius: _radius, fractions: _fractions, colors: _colors, cycleMethod: _cycleMethod )
    }

    /// public java.awt.PaintContext java.awt.RadialGradientPaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)

    private static var createContext_MethodID_9: jmethodID?

    open func createContext( cm: ColorModel?, deviceBounds: Rectangle?, userBounds: Rectangle2D?, transform: AffineTransform?, hints: RenderingHints? ) -> PaintContext! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cm, locals: &__locals )
        __args[1] = JNIType.toJava( value: deviceBounds, locals: &__locals )
        __args[2] = JNIType.toJava( value: userBounds, locals: &__locals )
        __args[3] = JNIType.toJava( value: transform, locals: &__locals )
        __args[4] = JNIType.toJava( value: hints, mapClass: "java/awt/RenderingHints", locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createContext", methodSig: "(Ljava/awt/image/ColorModel;Ljava/awt/Rectangle;Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/AffineTransform;Ljava/awt/RenderingHints;)Ljava/awt/PaintContext;", methodCache: &RadialGradientPaint.createContext_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PaintContextForward( javaObject: __return ) : nil
    }

    override open func createContext( _ _cm: ColorModel?, _ _deviceBounds: Rectangle?, _ _userBounds: Rectangle2D?, _ _transform: AffineTransform?, _ _hints: RenderingHints? ) -> PaintContext! {
        return createContext( cm: _cm, deviceBounds: _deviceBounds, userBounds: _userBounds, transform: _transform, hints: _hints )
    }

    /// public java.awt.geom.Point2D java.awt.RadialGradientPaint.getCenterPoint()

    private static var getCenterPoint_MethodID_10: jmethodID?

    open func getCenterPoint() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCenterPoint", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &RadialGradientPaint.getCenterPoint_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// private static java.awt.geom.AffineTransform java.awt.RadialGradientPaint.createGradientTransform(java.awt.geom.Rectangle2D)

    /// public java.awt.geom.Point2D java.awt.RadialGradientPaint.getFocusPoint()

    private static var getFocusPoint_MethodID_11: jmethodID?

    open func getFocusPoint() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFocusPoint", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &RadialGradientPaint.getFocusPoint_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public float java.awt.RadialGradientPaint.getRadius()

    private static var getRadius_MethodID_12: jmethodID?

    open func getRadius() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getRadius", methodSig: "()F", methodCache: &RadialGradientPaint.getRadius_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Float(), from: __return )
    }


}

