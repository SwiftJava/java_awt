
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:10 GMT 2016 ///

/// class java.awt.image.DataBufferFloat ///

open class DataBufferFloat: DataBuffer {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.DataBufferFloat", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DataBufferFloatJNIClass: jclass?

    /// float[][] java.awt.image.DataBufferFloat.bankdata

    /// float[] java.awt.image.DataBufferFloat.data

    /// public static final int java.awt.image.DataBuffer.TYPE_BYTE

    /// public static final int java.awt.image.DataBuffer.TYPE_USHORT

    /// public static final int java.awt.image.DataBuffer.TYPE_SHORT

    /// public static final int java.awt.image.DataBuffer.TYPE_INT

    /// public static final int java.awt.image.DataBuffer.TYPE_FLOAT

    /// public static final int java.awt.image.DataBuffer.TYPE_DOUBLE

    /// public static final int java.awt.image.DataBuffer.TYPE_UNDEFINED

    /// protected int java.awt.image.DataBuffer.dataType

    private static var dataType_FieldID: jfieldID?

    override open var dataType: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "dataType", fieldType: "I", fieldCache: &DataBufferFloat.dataType_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "dataType", fieldType: "I", fieldCache: &DataBufferFloat.dataType_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.DataBuffer.banks

    private static var banks_FieldID: jfieldID?

    override open var banks: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "banks", fieldType: "I", fieldCache: &DataBufferFloat.banks_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "banks", fieldType: "I", fieldCache: &DataBufferFloat.banks_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.DataBuffer.offset

    private static var offset_FieldID: jfieldID?

    override open var offset: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "offset", fieldType: "I", fieldCache: &DataBufferFloat.offset_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "offset", fieldType: "I", fieldCache: &DataBufferFloat.offset_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.DataBuffer.size

    private static var size_FieldID: jfieldID?

    override open var size: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "size", fieldType: "I", fieldCache: &DataBufferFloat.size_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "size", fieldType: "I", fieldCache: &DataBufferFloat.size_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int[] java.awt.image.DataBuffer.offsets

    private static var offsets_FieldID: jfieldID?

    override open var offsets: [Int32]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "offsets", fieldType: "[I", fieldCache: &DataBufferFloat.offsets_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int32](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "offsets", fieldType: "[I", fieldCache: &DataBufferFloat.offsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private static final int[] java.awt.image.DataBuffer.dataTypeSize

    /// private boolean java.awt.image.DataBuffer.pixelsExposed

    /// public java.awt.image.DataBufferFloat(int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/DataBufferFloat", classCache: &DataBufferFloat.DataBufferFloatJNIClass, methodSig: "(I)V", methodCache: &DataBufferFloat.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.image.DataBufferFloat(int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/DataBufferFloat", classCache: &DataBufferFloat.DataBufferFloatJNIClass, methodSig: "(II)V", methodCache: &DataBufferFloat.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.image.DataBufferFloat(float[],int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: [Float]?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/DataBufferFloat", classCache: &DataBufferFloat.DataBufferFloatJNIClass, methodSig: "([FI)V", methodCache: &DataBufferFloat.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [Float]?, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.image.DataBufferFloat(float[],int,int)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: [Float]?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/DataBufferFloat", classCache: &DataBufferFloat.DataBufferFloatJNIClass, methodSig: "([FII)V", methodCache: &DataBufferFloat.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [Float]?, _ _arg1: Int, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.image.DataBufferFloat(float[][],int)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: [[Float]]?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/DataBufferFloat", classCache: &DataBufferFloat.DataBufferFloatJNIClass, methodSig: "([[FI)V", methodCache: &DataBufferFloat.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [[Float]]?, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.image.DataBufferFloat(float[][],int,int[])

    private static var new_MethodID_6: jmethodID?

    public convenience init( arg0: [[Float]]?, arg1: Int, arg2: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/DataBufferFloat", classCache: &DataBufferFloat.DataBufferFloatJNIClass, methodSig: "([[FI[I)V", methodCache: &DataBufferFloat.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: [[Float]]?, _ _arg1: Int, _ _arg2: [Int32]? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public float[] java.awt.image.DataBufferFloat.getData()

    private static var getData_MethodID_7: jmethodID?

    open func getData() -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getData", methodSig: "()[F", methodCache: &DataBufferFloat.getData_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }


    /// public float[] java.awt.image.DataBufferFloat.getData(int)

    private static var getData_MethodID_8: jmethodID?

    open func getData( arg0: Int ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getData", methodSig: "(I)[F", methodCache: &DataBufferFloat.getData_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getData( _ _arg0: Int ) -> [Float]! {
        return getData( arg0: _arg0 )
    }

    /// public float[][] java.awt.image.DataBufferFloat.getBankData()

    private static var getBankData_MethodID_9: jmethodID?

    open func getBankData() -> [[Float]]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBankData", methodSig: "()[[F", methodCache: &DataBufferFloat.getBankData_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: [[Float]](), from: __return )
    }


    /// public int java.awt.image.DataBufferFloat.getElem(int)

    /// public int java.awt.image.DataBufferFloat.getElem(int,int)

    /// public float java.awt.image.DataBufferFloat.getElemFloat(int,int)

    /// public float java.awt.image.DataBufferFloat.getElemFloat(int)

    /// public double java.awt.image.DataBufferFloat.getElemDouble(int,int)

    /// public double java.awt.image.DataBufferFloat.getElemDouble(int)

    /// public void java.awt.image.DataBufferFloat.setElem(int,int)

    /// public void java.awt.image.DataBufferFloat.setElem(int,int,int)

    /// public void java.awt.image.DataBufferFloat.setElemFloat(int,int,float)

    /// public void java.awt.image.DataBufferFloat.setElemFloat(int,float)

    /// public void java.awt.image.DataBufferFloat.setElemDouble(int,double)

    /// public void java.awt.image.DataBufferFloat.setElemDouble(int,int,double)

    /// private native void java.awt.image.DataBufferFloat.markPixelsExposed(boolean)

}
