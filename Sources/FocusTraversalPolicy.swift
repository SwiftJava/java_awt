
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:54 GMT 2016 ///

/// class java.awt.FocusTraversalPolicy ///

open class FocusTraversalPolicy: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.FocusTraversalPolicy", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FocusTraversalPolicyJNIClass: jclass?

    /// public java.awt.FocusTraversalPolicy()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/FocusTraversalPolicy", classCache: &FocusTraversalPolicy.FocusTraversalPolicyJNIClass, methodSig: "()V", methodCache: &FocusTraversalPolicy.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public abstract java.awt.Component java.awt.FocusTraversalPolicy.getDefaultComponent(java.awt.Container)

    private static var getDefaultComponent_MethodID_2: jmethodID?

    open func getDefaultComponent( arg0: Container? ) -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultComponent", methodSig: "(Ljava/awt/Container;)Ljava/awt/Component;", methodCache: &FocusTraversalPolicy.getDefaultComponent_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func getDefaultComponent( _ _arg0: Container? ) -> Component! {
        return getDefaultComponent( arg0: _arg0 )
    }

    /// public abstract java.awt.Component java.awt.FocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)

    private static var getComponentAfter_MethodID_3: jmethodID?

    open func getComponentAfter( arg0: Container?, arg1: Component? ) -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponentAfter", methodSig: "(Ljava/awt/Container;Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &FocusTraversalPolicy.getComponentAfter_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func getComponentAfter( _ _arg0: Container?, _ _arg1: Component? ) -> Component! {
        return getComponentAfter( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.awt.Component java.awt.FocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)

    private static var getComponentBefore_MethodID_4: jmethodID?

    open func getComponentBefore( arg0: Container?, arg1: Component? ) -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponentBefore", methodSig: "(Ljava/awt/Container;Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &FocusTraversalPolicy.getComponentBefore_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func getComponentBefore( _ _arg0: Container?, _ _arg1: Component? ) -> Component! {
        return getComponentBefore( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Component java.awt.FocusTraversalPolicy.getInitialComponent(java.awt.Window)

    private static var getInitialComponent_MethodID_5: jmethodID?

    open func getInitialComponent( arg0: Window? ) -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInitialComponent", methodSig: "(Ljava/awt/Window;)Ljava/awt/Component;", methodCache: &FocusTraversalPolicy.getInitialComponent_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func getInitialComponent( _ _arg0: Window? ) -> Component! {
        return getInitialComponent( arg0: _arg0 )
    }

    /// public abstract java.awt.Component java.awt.FocusTraversalPolicy.getFirstComponent(java.awt.Container)

    private static var getFirstComponent_MethodID_6: jmethodID?

    open func getFirstComponent( arg0: Container? ) -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFirstComponent", methodSig: "(Ljava/awt/Container;)Ljava/awt/Component;", methodCache: &FocusTraversalPolicy.getFirstComponent_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func getFirstComponent( _ _arg0: Container? ) -> Component! {
        return getFirstComponent( arg0: _arg0 )
    }

    /// public abstract java.awt.Component java.awt.FocusTraversalPolicy.getLastComponent(java.awt.Container)

    private static var getLastComponent_MethodID_7: jmethodID?

    open func getLastComponent( arg0: Container? ) -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLastComponent", methodSig: "(Ljava/awt/Container;)Ljava/awt/Component;", methodCache: &FocusTraversalPolicy.getLastComponent_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func getLastComponent( _ _arg0: Container? ) -> Component! {
        return getLastComponent( arg0: _arg0 )
    }

}
