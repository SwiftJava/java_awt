
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.TrayIcon$MessageType ///

public enum TrayIcon_MessageType: Int, JNIObjectProtocol, JNIObjectInit {

    case ERROR, WARNING, INFO, NONE

    static let enumConstants = try! JavaClass.forName("java.awt.TrayIcon$MessageType")
        .getEnumConstants()!.map { TrayIcon_MessageTypeForward( javaObject: $0.javaObject ) }

    public func underlier() -> TrayIcon_MessageTypeForward {
        return TrayIcon_MessageType.enumConstants[self.rawValue]
    }

    public func localJavaObject(_ locals: UnsafeMutablePointer<[jobject]>) -> jobject? {
        return underlier().localJavaObject( locals )
    }

    public init( javaObject: jobject? ) {
        self = TrayIcon_MessageType( rawValue: JavaEnum( javaObject: javaObject ).ordinal() )!
    }

    /// public static java.awt.TrayIcon$MessageType java.awt.TrayIcon$MessageType.valueOf(java.lang.String)

    private static var valueOf_MethodID_1: jmethodID?

    public static func valueOf( name: String? ) -> TrayIcon_MessageType! {
        return TrayIcon_MessageTypeForward.valueOf( name: name )
    }
    public static func valueOf( _ _name: String? ) -> TrayIcon_MessageType! {
        return valueOf( name: _name )
    }

    /// public static java.awt.TrayIcon$MessageType[] java.awt.TrayIcon$MessageType.values()

    private static var values_MethodID_2: jmethodID?

    public static func values() -> [TrayIcon_MessageType]! {
        return TrayIcon_MessageTypeForward.values( )
    }

}


open class TrayIcon_MessageTypeForward: JNIObjectForward {

    private static var TrayIcon_MessageTypeJNIClass: jclass?

    /// private static final java.awt.TrayIcon$MessageType[] java.awt.TrayIcon$MessageType.$VALUES

    /// public static final java.awt.TrayIcon$MessageType java.awt.TrayIcon$MessageType.ERROR

    private static var ERROR_FieldID: jfieldID?

    open static var ERROR: TrayIcon_MessageType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "ERROR", fieldType: "Ljava/awt/TrayIcon$MessageType;", fieldCache: &ERROR_FieldID, className: "java/awt/TrayIcon$MessageType", classCache: &TrayIcon_MessageTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? TrayIcon_MessageType( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.TrayIcon$MessageType java.awt.TrayIcon$MessageType.INFO

    private static var INFO_FieldID: jfieldID?

    open static var INFO: TrayIcon_MessageType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "INFO", fieldType: "Ljava/awt/TrayIcon$MessageType;", fieldCache: &INFO_FieldID, className: "java/awt/TrayIcon$MessageType", classCache: &TrayIcon_MessageTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? TrayIcon_MessageType( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.TrayIcon$MessageType java.awt.TrayIcon$MessageType.NONE

    private static var NONE_FieldID: jfieldID?

    open static var NONE: TrayIcon_MessageType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "NONE", fieldType: "Ljava/awt/TrayIcon$MessageType;", fieldCache: &NONE_FieldID, className: "java/awt/TrayIcon$MessageType", classCache: &TrayIcon_MessageTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? TrayIcon_MessageType( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.TrayIcon$MessageType java.awt.TrayIcon$MessageType.WARNING

    private static var WARNING_FieldID: jfieldID?

    open static var WARNING: TrayIcon_MessageType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "WARNING", fieldType: "Ljava/awt/TrayIcon$MessageType;", fieldCache: &WARNING_FieldID, className: "java/awt/TrayIcon$MessageType", classCache: &TrayIcon_MessageTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? TrayIcon_MessageType( javaObject: __value ) : nil
        }
    }

    /// public static java.awt.TrayIcon$MessageType java.awt.TrayIcon$MessageType.valueOf(java.lang.String)

    private static var valueOf_MethodID_3: jmethodID?

    open class func valueOf( name: String? ) -> TrayIcon_MessageType! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/TrayIcon$MessageType", classCache: &TrayIcon_MessageTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/awt/TrayIcon$MessageType;", methodCache: &valueOf_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TrayIcon_MessageType( javaObject: __return ) : nil
    }

    open class func valueOf( _ _name: String? ) -> TrayIcon_MessageType! {
        return valueOf( name: _name )
    }

    /// public static java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String)

    private static var valueOf_MethodID_4: jmethodID?

    open class func valueOf( enumType: java_swift.JavaClass?, name: String? ) -> java_swift.JavaEnum! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: enumType, locals: &__locals )
        __args[1] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/TrayIcon$MessageType", classCache: &TrayIcon_MessageTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", methodCache: &valueOf_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaEnum( javaObject: __return ) : nil
    }

    open class func valueOf( _ _enumType: java_swift.JavaClass?, _ _name: String? ) -> java_swift.JavaEnum! {
        return valueOf( enumType: _enumType, name: _name )
    }

    /// public static java.awt.TrayIcon$MessageType[] java.awt.TrayIcon$MessageType.values()

    private static var values_MethodID_5: jmethodID?

    open class func values() -> [TrayIcon_MessageType]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/TrayIcon$MessageType", classCache: &TrayIcon_MessageTypeJNIClass, methodName: "values", methodSig: "()[Ljava/awt/TrayIcon$MessageType;", methodCache: &values_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [TrayIcon_MessageType].self, from: __return )
    }


    /// public final int java.lang.Enum.compareTo(java.lang.Enum)

    // Skipping method: false true false false false 

    /// public int java.lang.Enum.compareTo(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final boolean java.lang.Enum.equals(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final native java.lang.Class java.lang.Object.getClass()

    // Skipping method: false true false false false 

    /// public final java.lang.Class java.lang.Enum.getDeclaringClass()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.hashCode()

    // Skipping method: false true false false false 

    /// public final java.lang.String java.lang.Enum.name()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notify()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notifyAll()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.ordinal()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.Enum.toString()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait() throws java.lang.InterruptedException

    // Skipping method: false true false false false 

}

