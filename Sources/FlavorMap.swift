
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:27 GMT 2016 ///

/// interface java.awt.datatransfer.FlavorMap ///

public protocol FlavorMap: JavaProtocol {

    /// public abstract java.util.Map java.awt.datatransfer.FlavorMap.getNativesForFlavors(java.awt.datatransfer.DataFlavor[])

    func getNativesForFlavors( arg0: [DataFlavor]? ) -> java_util.Map!
    func getNativesForFlavors( _ _arg0: [DataFlavor]? ) -> java_util.Map!

    /// public abstract java.util.Map java.awt.datatransfer.FlavorMap.getFlavorsForNatives(java.lang.String[])

    func getFlavorsForNatives( arg0: [String]? ) -> java_util.Map!
    func getFlavorsForNatives( _ _arg0: [String]? ) -> java_util.Map!

}

open class FlavorMapForward: JNIObjectForward, FlavorMap {

    private static var FlavorMapJNIClass: jclass?

    /// public abstract java.util.Map java.awt.datatransfer.FlavorMap.getNativesForFlavors(java.awt.datatransfer.DataFlavor[])

    private static var getNativesForFlavors_MethodID_3: jmethodID?

    open func getNativesForFlavors( arg0: [DataFlavor]? ) -> java_util.Map! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNativesForFlavors", methodSig: "([Ljava/awt/datatransfer/DataFlavor;)Ljava/util/Map;", methodCache: &FlavorMapForward.getNativesForFlavors_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.MapForward( javaObject: __return ) : nil
    }

    open func getNativesForFlavors( _ _arg0: [DataFlavor]? ) -> java_util.Map! {
        return getNativesForFlavors( arg0: _arg0 )
    }

    /// public abstract java.util.Map java.awt.datatransfer.FlavorMap.getFlavorsForNatives(java.lang.String[])

    private static var getFlavorsForNatives_MethodID_4: jmethodID?

    open func getFlavorsForNatives( arg0: [String]? ) -> java_util.Map! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFlavorsForNatives", methodSig: "([Ljava/lang/String;)Ljava/util/Map;", methodCache: &FlavorMapForward.getFlavorsForNatives_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.MapForward( javaObject: __return ) : nil
    }

    open func getFlavorsForNatives( _ _arg0: [String]? ) -> java_util.Map! {
        return getFlavorsForNatives( arg0: _arg0 )
    }

}


