
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.event.PaintEvent ///

open class PaintEvent: ComponentEvent {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var PaintEventJNIClass: jclass?

    /// public static final int java.awt.event.PaintEvent.PAINT_FIRST

    private static var PAINT_FIRST_FieldID: jfieldID?

    open static var PAINT_FIRST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PAINT_FIRST", fieldType: "I", fieldCache: &PAINT_FIRST_FieldID, className: "java/awt/event/PaintEvent", classCache: &PaintEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.PaintEvent.PAINT_LAST

    private static var PAINT_LAST_FieldID: jfieldID?

    open static var PAINT_LAST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PAINT_LAST", fieldType: "I", fieldCache: &PAINT_LAST_FieldID, className: "java/awt/event/PaintEvent", classCache: &PaintEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.PaintEvent.PAINT

    private static var PAINT_FieldID: jfieldID?

    open static var PAINT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PAINT", fieldType: "I", fieldCache: &PAINT_FieldID, className: "java/awt/event/PaintEvent", classCache: &PaintEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.PaintEvent.UPDATE

    private static var UPDATE_FieldID: jfieldID?

    open static var UPDATE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "UPDATE", fieldType: "I", fieldCache: &UPDATE_FieldID, className: "java/awt/event/PaintEvent", classCache: &PaintEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// java.awt.Rectangle java.awt.event.PaintEvent.updateRect

    /// private static final long java.awt.event.PaintEvent.serialVersionUID

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_FIRST

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_LAST

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_MOVED

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_RESIZED

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_SHOWN

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_HIDDEN

    /// private static final long java.awt.event.ComponentEvent.serialVersionUID

    /// private static final sun.util.logging.PlatformLogger java.awt.AWTEvent.log

    /// private byte[] java.awt.AWTEvent.bdata

    /// protected int java.awt.AWTEvent.id

    private static var id_FieldID: jfieldID?

    override open var id: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "id", fieldType: "I", fieldCache: &PaintEvent.id_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "id", fieldType: "I", fieldCache: &PaintEvent.id_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean java.awt.AWTEvent.consumed

    private static var consumed_FieldID: jfieldID?

    override open var consumed: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &PaintEvent.consumed_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &PaintEvent.consumed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private transient volatile java.security.AccessControlContext java.awt.AWTEvent.acc

    /// transient boolean java.awt.AWTEvent.focusManagerIsDispatching

    /// transient boolean java.awt.AWTEvent.isPosted

    /// private transient boolean java.awt.AWTEvent.isSystemGenerated

    /// public static final long java.awt.AWTEvent.COMPONENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.CONTAINER_EVENT_MASK

    /// public static final long java.awt.AWTEvent.FOCUS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.KEY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ACTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ITEM_EVENT_MASK

    /// public static final long java.awt.AWTEvent.TEXT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK

    /// static final long java.awt.AWTEvent.INPUT_METHODS_ENABLED_MASK

    /// public static final long java.awt.AWTEvent.PAINT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INVOCATION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK

    /// public static final int java.awt.AWTEvent.RESERVED_ID_MAX

    /// private static java.lang.reflect.Field java.awt.AWTEvent.inputEvent_CanAccessSystemClipboard_Field

    /// private static final long java.awt.AWTEvent.serialVersionUID

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_swift.JavaObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &PaintEvent.source_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &PaintEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.awt.event.PaintEvent(java.awt.Component,int,java.awt.Rectangle)

    private static var new_MethodID_1: jmethodID?

    public convenience init( source: Component?, id: Int, updateRect: Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: id, locals: &__locals )
        __args[2] = JNIType.toJava( value: updateRect != nil ? updateRect! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/PaintEvent", classCache: &PaintEvent.PaintEventJNIClass, methodSig: "(Ljava/awt/Component;ILjava/awt/Rectangle;)V", methodCache: &PaintEvent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: Component?, _ _id: Int, _ _updateRect: Rectangle? ) {
        self.init( source: _source, id: _id, updateRect: _updateRect )
    }

    /// public java.lang.String java.awt.event.PaintEvent.paramString()

    /// public void java.awt.event.PaintEvent.setUpdateRect(java.awt.Rectangle)

    private static var setUpdateRect_MethodID_2: jmethodID?

    open func setUpdateRect( updateRect: Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: updateRect != nil ? updateRect! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUpdateRect", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &PaintEvent.setUpdateRect_MethodID_2, args: &__args, locals: &__locals )
    }

    open func setUpdateRect( _ _updateRect: Rectangle? ) {
        setUpdateRect( updateRect: _updateRect )
    }

    /// public java.awt.Rectangle java.awt.event.PaintEvent.getUpdateRect()

    private static var getUpdateRect_MethodID_3: jmethodID?

    open func getUpdateRect() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getUpdateRect", methodSig: "()Ljava/awt/Rectangle;", methodCache: &PaintEvent.getUpdateRect_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


}

