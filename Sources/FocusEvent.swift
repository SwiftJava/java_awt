
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:40 GMT 2016 ///

/// class java.awt.event.FocusEvent ///

open class FocusEvent: ComponentEvent {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.event.FocusEvent", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FocusEventJNIClass: jclass?

    /// public static final int java.awt.event.FocusEvent.FOCUS_FIRST

    private static var FOCUS_FIRST_FieldID: jfieldID?

    open static var FOCUS_FIRST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FOCUS_FIRST", fieldType: "I", fieldCache: &FOCUS_FIRST_FieldID, className: "java/awt/event/FocusEvent", classCache: &FocusEventJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.FocusEvent.FOCUS_LAST

    private static var FOCUS_LAST_FieldID: jfieldID?

    open static var FOCUS_LAST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FOCUS_LAST", fieldType: "I", fieldCache: &FOCUS_LAST_FieldID, className: "java/awt/event/FocusEvent", classCache: &FocusEventJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.FocusEvent.FOCUS_GAINED

    private static var FOCUS_GAINED_FieldID: jfieldID?

    open static var FOCUS_GAINED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FOCUS_GAINED", fieldType: "I", fieldCache: &FOCUS_GAINED_FieldID, className: "java/awt/event/FocusEvent", classCache: &FocusEventJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.FocusEvent.FOCUS_LOST

    private static var FOCUS_LOST_FieldID: jfieldID?

    open static var FOCUS_LOST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FOCUS_LOST", fieldType: "I", fieldCache: &FOCUS_LOST_FieldID, className: "java/awt/event/FocusEvent", classCache: &FocusEventJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// boolean java.awt.event.FocusEvent.temporary

    /// transient java.awt.Component java.awt.event.FocusEvent.opposite

    /// private static final long java.awt.event.FocusEvent.serialVersionUID

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_FIRST

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_LAST

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_MOVED

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_RESIZED

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_SHOWN

    /// public static final int java.awt.event.ComponentEvent.COMPONENT_HIDDEN

    /// private static final long java.awt.event.ComponentEvent.serialVersionUID

    /// private byte[] java.awt.AWTEvent.bdata

    /// private long java.awt.AWTEvent.bdata2

    /// protected int java.awt.AWTEvent.id

    private static var id_FieldID: jfieldID?

    override open var id: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "id", fieldType: "I", fieldCache: &FocusEvent.id_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "id", fieldType: "I", fieldCache: &FocusEvent.id_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean java.awt.AWTEvent.consumed

    private static var consumed_FieldID: jfieldID?

    override open var consumed: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &FocusEvent.consumed_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &FocusEvent.consumed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private transient volatile java.security.AccessControlContext java.awt.AWTEvent.acc

    /// transient boolean java.awt.AWTEvent.focusManagerIsDispatching

    /// transient boolean java.awt.AWTEvent.isPosted

    /// private transient boolean java.awt.AWTEvent.isSystemGenerated

    /// public static final long java.awt.AWTEvent.COMPONENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.CONTAINER_EVENT_MASK

    /// public static final long java.awt.AWTEvent.FOCUS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.KEY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ACTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ITEM_EVENT_MASK

    /// public static final long java.awt.AWTEvent.TEXT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK

    /// static final long java.awt.AWTEvent.INPUT_METHODS_ENABLED_MASK

    /// public static final long java.awt.AWTEvent.PAINT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INVOCATION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK

    /// public static final int java.awt.AWTEvent.RESERVED_ID_MAX

    /// private static java.lang.reflect.Field java.awt.AWTEvent.inputEvent_CanAccessSystemClipboard_Field

    /// private static final long java.awt.AWTEvent.serialVersionUID

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_lang.JavaObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &FocusEvent.source_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_lang.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &FocusEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.awt.event.FocusEvent(java.awt.Component,int,boolean,java.awt.Component)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Component?, arg1: Int, arg2: Bool, arg3: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/FocusEvent", classCache: &FocusEvent.FocusEventJNIClass, methodSig: "(Ljava/awt/Component;IZLjava/awt/Component;)V", methodCache: &FocusEvent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Component?, _ _arg1: Int, _ _arg2: Bool, _ _arg3: Component? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.event.FocusEvent(java.awt.Component,int,boolean)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Component?, arg1: Int, arg2: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/FocusEvent", classCache: &FocusEvent.FocusEventJNIClass, methodSig: "(Ljava/awt/Component;IZ)V", methodCache: &FocusEvent.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Component?, _ _arg1: Int, _ _arg2: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.event.FocusEvent(java.awt.Component,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Component?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/FocusEvent", classCache: &FocusEvent.FocusEventJNIClass, methodSig: "(Ljava/awt/Component;I)V", methodCache: &FocusEvent.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Component?, _ _arg1: Int ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.String java.awt.event.FocusEvent.paramString()

    /// public boolean java.awt.event.FocusEvent.isTemporary()

    private static var isTemporary_MethodID_4: jmethodID?

    open func isTemporary() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTemporary", methodSig: "()Z", methodCache: &FocusEvent.isTemporary_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.awt.Component java.awt.event.FocusEvent.getOppositeComponent()

    private static var getOppositeComponent_MethodID_5: jmethodID?

    open func getOppositeComponent() -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOppositeComponent", methodSig: "()Ljava/awt/Component;", methodCache: &FocusEvent.getOppositeComponent_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }


}
