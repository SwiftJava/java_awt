
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.geom.Point2D$Float ///

open class Point2D_Float: Point2D, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.Point2D$Float", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Point2D_FloatJNIClass: jclass?

    /// private static final long java.awt.geom.Point2D$Float.serialVersionUID

    /// public float java.awt.geom.Point2D$Float.x

    private static var x_FieldID: jfieldID?

    open var x: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "x", fieldType: "F", fieldCache: &Point2D_Float.x_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "x", fieldType: "F", fieldCache: &Point2D_Float.x_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.Point2D$Float.y

    private static var y_FieldID: jfieldID?

    open var y: Float {
        get {
            let __value = JNIField.GetFloatField( fieldName: "y", fieldType: "F", fieldCache: &Point2D_Float.y_FieldID, object: javaObject )
            return __value
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( f: newValue )
            JNIField.SetFloatField( fieldName: "y", fieldType: "F", fieldCache: &Point2D_Float.y_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public java.awt.geom.Point2D$Float()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Point2D$Float", classCache: &Point2D_Float.Point2D_FloatJNIClass, methodSig: "()V", methodCache: &Point2D_Float.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.geom.Point2D$Float(float,float)

    private static var new_MethodID_2: jmethodID?

    public convenience init( x: Float, y: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( f: x )
        __args[1] = jvalue( f: y )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Point2D$Float", classCache: &Point2D_Float.Point2D_FloatJNIClass, methodSig: "(FF)V", methodCache: &Point2D_Float.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _x: Float, _ _y: Float ) {
        self.init( x: _x, y: _y )
    }

    /// public double java.awt.geom.Point2D$Float.getX()

    // Skipping method: false true false false false 

    /// public double java.awt.geom.Point2D$Float.getY()

    // Skipping method: false true false false false 

    /// public void java.awt.geom.Point2D$Float.setLocation(double,double)

    // Skipping method: false true false false false 

    /// public void java.awt.geom.Point2D$Float.setLocation(float,float)

    private static var setLocation_MethodID_3: jmethodID?

    open func setLocation( x: Float, y: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( f: x )
        __args[1] = jvalue( f: y )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocation", methodSig: "(FF)V", methodCache: &Point2D_Float.setLocation_MethodID_3, args: &__args, locals: &__locals )
    }

    open func setLocation( _ _x: Float, _ _y: Float ) {
        setLocation( x: _x, y: _y )
    }

    /// public java.lang.String java.awt.geom.Point2D$Float.toString()

    // Skipping method: false true false false false 

}

