
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:26 GMT 2016 ///

/// class java.awt.event.ComponentAdapter ///

open class ComponentAdapter: java_lang.JavaObject, ComponentListener {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.event.ComponentAdapter", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ComponentAdapterJNIClass: jclass?

    /// public java.awt.event.ComponentAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/event/ComponentAdapter", classCache: &ComponentAdapter.ComponentAdapterJNIClass, methodSig: "()V", methodCache: &ComponentAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.event.ComponentAdapter.componentResized(java.awt.event.ComponentEvent)

    private static var componentResized_MethodID_2: jmethodID?

    open func componentResized( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentResized", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentAdapter.componentResized_MethodID_2, args: &__args, locals: &__locals )
    }

    open func componentResized( _ _arg0: ComponentEvent? ) {
        componentResized( arg0: _arg0 )
    }

    /// public void java.awt.event.ComponentAdapter.componentMoved(java.awt.event.ComponentEvent)

    private static var componentMoved_MethodID_3: jmethodID?

    open func componentMoved( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentMoved", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentAdapter.componentMoved_MethodID_3, args: &__args, locals: &__locals )
    }

    open func componentMoved( _ _arg0: ComponentEvent? ) {
        componentMoved( arg0: _arg0 )
    }

    /// public void java.awt.event.ComponentAdapter.componentShown(java.awt.event.ComponentEvent)

    private static var componentShown_MethodID_4: jmethodID?

    open func componentShown( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentShown", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentAdapter.componentShown_MethodID_4, args: &__args, locals: &__locals )
    }

    open func componentShown( _ _arg0: ComponentEvent? ) {
        componentShown( arg0: _arg0 )
    }

    /// public void java.awt.event.ComponentAdapter.componentHidden(java.awt.event.ComponentEvent)

    private static var componentHidden_MethodID_5: jmethodID?

    open func componentHidden( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentHidden", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentAdapter.componentHidden_MethodID_5, args: &__args, locals: &__locals )
    }

    open func componentHidden( _ _arg0: ComponentEvent? ) {
        componentHidden( arg0: _arg0 )
    }

}
private typealias ComponentAdapter_componentResized_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentAdapter_componentResized_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).componentResized( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

private typealias ComponentAdapter_componentMoved_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentAdapter_componentMoved_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).componentMoved( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

private typealias ComponentAdapter_componentShown_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentAdapter_componentShown_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).componentShown( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

private typealias ComponentAdapter_componentHidden_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentAdapter_componentHidden_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).componentHidden( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

private typealias ComponentAdapter_equals_7_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> jboolean

private func ComponentAdapter_equals_7( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> jboolean {
    let __return = ComponentAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).equals( arg0 != nil ? java_lang.JavaObject( javaObject: arg0 ) : nil )
    return JNIType.encode( value: __return, locals: nil ).z
}

private typealias ComponentAdapter_toString_8_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jobject?

private func ComponentAdapter_toString_8( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jobject? {
    let __return = ComponentAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).toString( )
    return JNIType.encode( value: __return, locals: nil ).l
}

private typealias ComponentAdapter_hashCode_9_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject? ) -> jint

private func ComponentAdapter_hashCode_9( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject? ) -> jint {
    let __return = ComponentAdapterBase.swiftObject( jniEnv: __env, javaObject: __this ).hashCode( )
    return JNIType.encode( value: __return, locals: nil ).i
}

open class ComponentAdapterBase: ComponentAdapter {

    private static var ComponentAdapterBaseJNIClass: jclass?
    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let ComponentAdapter_componentResized_0_thunk: ComponentAdapter_componentResized_0_type = ComponentAdapter_componentResized_0
            natives.append( JNINativeMethod( name: strdup("__componentResized"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentAdapter_componentResized_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentAdapter_componentMoved_1_thunk: ComponentAdapter_componentMoved_1_type = ComponentAdapter_componentMoved_1
            natives.append( JNINativeMethod( name: strdup("__componentMoved"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentAdapter_componentMoved_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentAdapter_componentShown_2_thunk: ComponentAdapter_componentShown_2_type = ComponentAdapter_componentShown_2
            natives.append( JNINativeMethod( name: strdup("__componentShown"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentAdapter_componentShown_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentAdapter_componentHidden_3_thunk: ComponentAdapter_componentHidden_3_type = ComponentAdapter_componentHidden_3
            natives.append( JNINativeMethod( name: strdup("__componentHidden"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentAdapter_componentHidden_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentAdapter_equals_7_thunk: ComponentAdapter_equals_7_type = ComponentAdapter_equals_7
            natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(Ljava/lang/Object;)Z"), fnPtr: unsafeBitCast( ComponentAdapter_equals_7_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentAdapter_toString_8_thunk: ComponentAdapter_toString_8_type = ComponentAdapter_toString_8
            natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("()Ljava/lang/String;"), fnPtr: unsafeBitCast( ComponentAdapter_toString_8_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentAdapter_hashCode_9_thunk: ComponentAdapter_hashCode_9_type = ComponentAdapter_hashCode_9
            natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("()I"), fnPtr: unsafeBitCast( ComponentAdapter_hashCode_9_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/ComponentAdapterProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    override open var javaObject: jobject? {
        get {
            return super.javaObject
        }
        set(newValue) {
            super.javaObject = newValue
            ComponentAdapterBase.registerNatives()
            updateSwiftObject()
        }
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> ComponentAdapterBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: ComponentAdapterBase.self )
    }

    /// public java.awt.event.ComponentAdapter()

    private static var new_MethodID_6: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = swiftValue()

        let __object = JNIMethod.NewObject( className: "org/genie/java_awt/ComponentAdapterProxy", classCache: &ComponentAdapterBase.ComponentAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &ComponentAdapterBase.new_MethodID_6, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
