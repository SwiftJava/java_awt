
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.JobAttributes$MultipleDocumentHandlingType ///

open class JobAttributes_MultipleDocumentHandlingType: /* class java.awt.AttributeValue */ UnavailableObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JobAttributes_MultipleDocumentHandlingTypeJNIClass: jclass?

    /// private static final int java.awt.JobAttributes$MultipleDocumentHandlingType.I_SEPARATE_DOCUMENTS_COLLATED_COPIES

    /// private static final int java.awt.JobAttributes$MultipleDocumentHandlingType.I_SEPARATE_DOCUMENTS_UNCOLLATED_COPIES

    /// private static final java.lang.String[] java.awt.JobAttributes$MultipleDocumentHandlingType.NAMES

    /// public static final java.awt.JobAttributes$MultipleDocumentHandlingType java.awt.JobAttributes$MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_COLLATED_COPIES

    private static var SEPARATE_DOCUMENTS_COLLATED_COPIES_FieldID: jfieldID?

    open static var SEPARATE_DOCUMENTS_COLLATED_COPIES: JobAttributes_MultipleDocumentHandlingType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SEPARATE_DOCUMENTS_COLLATED_COPIES", fieldType: "Ljava/awt/JobAttributes$MultipleDocumentHandlingType;", fieldCache: &SEPARATE_DOCUMENTS_COLLATED_COPIES_FieldID, className: "java/awt/JobAttributes$MultipleDocumentHandlingType", classCache: &JobAttributes_MultipleDocumentHandlingTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JobAttributes_MultipleDocumentHandlingType( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.JobAttributes$MultipleDocumentHandlingType java.awt.JobAttributes$MultipleDocumentHandlingType.SEPARATE_DOCUMENTS_UNCOLLATED_COPIES

    private static var SEPARATE_DOCUMENTS_UNCOLLATED_COPIES_FieldID: jfieldID?

    open static var SEPARATE_DOCUMENTS_UNCOLLATED_COPIES: JobAttributes_MultipleDocumentHandlingType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SEPARATE_DOCUMENTS_UNCOLLATED_COPIES", fieldType: "Ljava/awt/JobAttributes$MultipleDocumentHandlingType;", fieldCache: &SEPARATE_DOCUMENTS_UNCOLLATED_COPIES_FieldID, className: "java/awt/JobAttributes$MultipleDocumentHandlingType", classCache: &JobAttributes_MultipleDocumentHandlingTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JobAttributes_MultipleDocumentHandlingType( javaObject: __value ) : nil
        }
    }

    /// private static final sun.util.logging.PlatformLogger java.awt.AttributeValue.log

    /// private final java.lang.String[] java.awt.AttributeValue.names

    /// private final int java.awt.AttributeValue.value

    /// private java.awt.JobAttributes$MultipleDocumentHandlingType(int)

    /// public int java.awt.JobAttributes$MultipleDocumentHandlingType.hashCode()

    private static var hashCode_MethodID_1: jmethodID?

    override open func hashCode() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "hashCode", methodSig: "()I", methodCache: &JobAttributes_MultipleDocumentHandlingType.hashCode_MethodID_1, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String java.awt.JobAttributes$MultipleDocumentHandlingType.toString()

    private static var toString_MethodID_2: jmethodID?

    override open func toString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toString", methodSig: "()Ljava/lang/String;", methodCache: &JobAttributes_MultipleDocumentHandlingType.toString_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


}

