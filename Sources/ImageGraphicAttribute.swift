
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.font.ImageGraphicAttribute ///

open class ImageGraphicAttribute: GraphicAttribute {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ImageGraphicAttributeJNIClass: jclass?

    /// private java.awt.Image java.awt.font.ImageGraphicAttribute.fImage

    /// private float java.awt.font.ImageGraphicAttribute.fImageWidth

    /// private float java.awt.font.ImageGraphicAttribute.fImageHeight

    /// private float java.awt.font.ImageGraphicAttribute.fOriginX

    /// private float java.awt.font.ImageGraphicAttribute.fOriginY

    /// private int java.awt.font.GraphicAttribute.fAlignment

    /// public static final int java.awt.font.GraphicAttribute.TOP_ALIGNMENT

    /// public static final int java.awt.font.GraphicAttribute.BOTTOM_ALIGNMENT

    /// public static final int java.awt.font.GraphicAttribute.ROMAN_BASELINE

    /// public static final int java.awt.font.GraphicAttribute.CENTER_BASELINE

    /// public static final int java.awt.font.GraphicAttribute.HANGING_BASELINE

    /// public java.awt.font.ImageGraphicAttribute(java.awt.Image,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( image: Image?, alignment: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: image != nil ? image! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: alignment, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/font/ImageGraphicAttribute", classCache: &ImageGraphicAttribute.ImageGraphicAttributeJNIClass, methodSig: "(Ljava/awt/Image;I)V", methodCache: &ImageGraphicAttribute.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _image: Image?, _ _alignment: Int ) {
        self.init( image: _image, alignment: _alignment )
    }

    /// public java.awt.font.ImageGraphicAttribute(java.awt.Image,int,float,float)

    private static var new_MethodID_2: jmethodID?

    public convenience init( image: Image?, alignment: Int, originX: Float, originY: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: image != nil ? image! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: alignment, locals: &__locals )
        __args[2] = JNIType.toJava( value: originX, locals: &__locals )
        __args[3] = JNIType.toJava( value: originY, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/font/ImageGraphicAttribute", classCache: &ImageGraphicAttribute.ImageGraphicAttributeJNIClass, methodSig: "(Ljava/awt/Image;IFF)V", methodCache: &ImageGraphicAttribute.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _image: Image?, _ _alignment: Int, _ _originX: Float, _ _originY: Float ) {
        self.init( image: _image, alignment: _alignment, originX: _originX, originY: _originY )
    }

    /// public boolean java.awt.font.ImageGraphicAttribute.equals(java.awt.font.ImageGraphicAttribute)

    private static var equals_MethodID_3: jmethodID?

    open func equals( rhs: ImageGraphicAttribute? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: rhs != nil ? rhs! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/awt/font/ImageGraphicAttribute;)Z", methodCache: &ImageGraphicAttribute.equals_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func equals( _ _rhs: ImageGraphicAttribute? ) -> Bool {
        return equals( rhs: _rhs )
    }

    /// public boolean java.awt.font.ImageGraphicAttribute.equals(java.lang.Object)

    private static var equals_MethodID_4: jmethodID?

    open func equals( rhs: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: rhs != nil ? rhs! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &ImageGraphicAttribute.equals_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _rhs: java_swift.JavaObject? ) -> Bool {
        return equals( rhs: _rhs )
    }

    /// public int java.awt.font.ImageGraphicAttribute.hashCode()

    /// public float java.awt.font.ImageGraphicAttribute.getAscent()

    /// public float java.awt.font.ImageGraphicAttribute.getAdvance()

    /// public float java.awt.font.ImageGraphicAttribute.getDescent()

    /// public void java.awt.font.ImageGraphicAttribute.draw(java.awt.Graphics2D,float,float)

    /// public java.awt.geom.Rectangle2D java.awt.font.ImageGraphicAttribute.getBounds()

}

