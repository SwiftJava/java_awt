
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.MultipleGradientPaint ///

open class MultipleGradientPaint: java_swift.JavaObject, Paint {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MultipleGradientPaintJNIClass: jclass?

    /// final int java.awt.MultipleGradientPaint.transparency

    /// final float[] java.awt.MultipleGradientPaint.fractions

    /// final java.awt.Color[] java.awt.MultipleGradientPaint.colors

    /// final java.awt.geom.AffineTransform java.awt.MultipleGradientPaint.gradientTransform

    /// final java.awt.MultipleGradientPaint$CycleMethod java.awt.MultipleGradientPaint.cycleMethod

    /// final java.awt.MultipleGradientPaint$ColorSpaceType java.awt.MultipleGradientPaint.colorSpace

    /// java.awt.image.ColorModel java.awt.MultipleGradientPaint.model

    /// float[] java.awt.MultipleGradientPaint.normalizedIntervals

    /// boolean java.awt.MultipleGradientPaint.isSimpleLookup

    /// java.lang.ref.SoftReference java.awt.MultipleGradientPaint.gradients

    /// java.lang.ref.SoftReference java.awt.MultipleGradientPaint.gradient

    /// int java.awt.MultipleGradientPaint.fastGradientArraySize

    /// public static final int java.awt.Transparency.OPAQUE

    private static var OPAQUE_FieldID: jfieldID?

    open static var OPAQUE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "OPAQUE", fieldType: "I", fieldCache: &OPAQUE_FieldID, className: "java/awt/MultipleGradientPaint", classCache: &MultipleGradientPaintJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.BITMASK

    private static var BITMASK_FieldID: jfieldID?

    open static var BITMASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BITMASK", fieldType: "I", fieldCache: &BITMASK_FieldID, className: "java/awt/MultipleGradientPaint", classCache: &MultipleGradientPaintJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.TRANSLUCENT

    private static var TRANSLUCENT_FieldID: jfieldID?

    open static var TRANSLUCENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TRANSLUCENT", fieldType: "I", fieldCache: &TRANSLUCENT_FieldID, className: "java/awt/MultipleGradientPaint", classCache: &MultipleGradientPaintJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// java.awt.MultipleGradientPaint(float[],java.awt.Color[],java.awt.MultipleGradientPaint$CycleMethod,java.awt.MultipleGradientPaint$ColorSpaceType,java.awt.geom.AffineTransform)

    /// public final float[] java.awt.MultipleGradientPaint.getFractions()

    private static var getFractions_MethodID_1: jmethodID?

    open func getFractions() -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFractions", methodSig: "()[F", methodCache: &MultipleGradientPaint.getFractions_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Float](), from: __return )
    }


    /// public final java.awt.Color[] java.awt.MultipleGradientPaint.getColors()

    private static var getColors_MethodID_2: jmethodID?

    open func getColors() -> [Color]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColors", methodSig: "()[Ljava/awt/Color;", methodCache: &MultipleGradientPaint.getColors_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Color](), from: __return )
    }


    /// public final java.awt.MultipleGradientPaint$CycleMethod java.awt.MultipleGradientPaint.getCycleMethod()

    private static var getCycleMethod_MethodID_3: jmethodID?

    open func getCycleMethod() -> MultipleGradientPaint_CycleMethod! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCycleMethod", methodSig: "()Ljava/awt/MultipleGradientPaint$CycleMethod;", methodCache: &MultipleGradientPaint.getCycleMethod_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MultipleGradientPaint_CycleMethod( javaObject: __return ) : nil
    }


    /// public final java.awt.MultipleGradientPaint$ColorSpaceType java.awt.MultipleGradientPaint.getColorSpace()

    private static var getColorSpace_MethodID_4: jmethodID?

    open func getColorSpace() -> MultipleGradientPaint_ColorSpaceType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColorSpace", methodSig: "()Ljava/awt/MultipleGradientPaint$ColorSpaceType;", methodCache: &MultipleGradientPaint.getColorSpace_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MultipleGradientPaint_ColorSpaceType( javaObject: __return ) : nil
    }


    /// public final int java.awt.MultipleGradientPaint.getTransparency()

    private static var getTransparency_MethodID_5: jmethodID?

    open func getTransparency() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTransparency", methodSig: "()I", methodCache: &MultipleGradientPaint.getTransparency_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public final java.awt.geom.AffineTransform java.awt.MultipleGradientPaint.getTransform()

    private static var getTransform_MethodID_6: jmethodID?

    open func getTransform() -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransform", methodSig: "()Ljava/awt/geom/AffineTransform;", methodCache: &MultipleGradientPaint.getTransform_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }


    /// In declared protocol but not defined.. ///

    /// public abstract java.awt.PaintContext java.awt.Paint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)

    private static var createContext_MethodID_7: jmethodID?

    open func createContext( cm: ColorModel?, deviceBounds: Rectangle?, userBounds: Rectangle2D?, xform: AffineTransform?, hints: RenderingHints? ) -> PaintContext! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cm != nil ? cm! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: deviceBounds != nil ? deviceBounds! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: userBounds != nil ? userBounds! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: xform != nil ? xform! as JNIObject : nil, locals: &__locals )
        __args[4] = JNIType.toJava( value: hints, mapClass: "java/awt/RenderingHints", locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createContext", methodSig: "(Ljava/awt/image/ColorModel;Ljava/awt/Rectangle;Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/AffineTransform;Ljava/awt/RenderingHints;)Ljava/awt/PaintContext;", methodCache: &MultipleGradientPaint.createContext_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PaintContextForward( javaObject: __return ) : nil
    }

    open func createContext( _ _cm: ColorModel?, _ _deviceBounds: Rectangle?, _ _userBounds: Rectangle2D?, _ _xform: AffineTransform?, _ _hints: RenderingHints? ) -> PaintContext! {
        return createContext( cm: _cm, deviceBounds: _deviceBounds, userBounds: _userBounds, xform: _xform, hints: _hints )
    }

}

