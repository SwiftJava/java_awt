
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:23 GMT 2016 ///

/// class java.awt.geom.RoundRectangle2D ///

open class RoundRectangle2D: RectangularShape {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.RoundRectangle2D", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RoundRectangle2DJNIClass: jclass?

    /// protected java.awt.geom.RoundRectangle2D()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/RoundRectangle2D", classCache: &RoundRectangle2D.RoundRectangle2DJNIClass, methodSig: "()V", methodCache: &RoundRectangle2D.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.awt.geom.RoundRectangle2D.equals(java.lang.Object)

    /// public int java.awt.geom.RoundRectangle2D.hashCode()

    /// public boolean java.awt.geom.RoundRectangle2D.contains(double,double,double,double)

    /// public boolean java.awt.geom.RoundRectangle2D.contains(double,double)

    /// public boolean java.awt.geom.RoundRectangle2D.intersects(double,double,double,double)

    /// public java.awt.geom.PathIterator java.awt.geom.RoundRectangle2D.getPathIterator(java.awt.geom.AffineTransform)

    /// public void java.awt.geom.RoundRectangle2D.setFrame(double,double,double,double)

    /// public abstract double java.awt.geom.RoundRectangle2D.getArcWidth()

    private static var getArcWidth_MethodID_2: jmethodID?

    open func getArcWidth() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getArcWidth", methodSig: "()D", methodCache: &RoundRectangle2D.getArcWidth_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.RoundRectangle2D.getArcHeight()

    private static var getArcHeight_MethodID_3: jmethodID?

    open func getArcHeight() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getArcHeight", methodSig: "()D", methodCache: &RoundRectangle2D.getArcHeight_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public void java.awt.geom.RoundRectangle2D.setRoundRect(java.awt.geom.RoundRectangle2D)

    private static var setRoundRect_MethodID_4: jmethodID?

    open func setRoundRect( arg0: RoundRectangle2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRoundRect", methodSig: "(Ljava/awt/geom/RoundRectangle2D;)V", methodCache: &RoundRectangle2D.setRoundRect_MethodID_4, args: &__args, locals: &__locals )
    }

    open func setRoundRect( _ _arg0: RoundRectangle2D? ) {
        setRoundRect( arg0: _arg0 )
    }

    /// public abstract void java.awt.geom.RoundRectangle2D.setRoundRect(double,double,double,double,double,double)

    private static var setRoundRect_MethodID_5: jmethodID?

    open func setRoundRect( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRoundRect", methodSig: "(DDDDDD)V", methodCache: &RoundRectangle2D.setRoundRect_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setRoundRect( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double ) {
        setRoundRect( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// private int java.awt.geom.RoundRectangle2D.classify(double,double,double,double)

}
