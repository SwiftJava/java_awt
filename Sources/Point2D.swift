
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.geom.Point2D ///

open class Point2D: java_swift.JavaObject, java_lang.Cloneable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.Point2D", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Point2DJNIClass: jclass?

    /// protected java.awt.geom.Point2D()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Point2D", classCache: &Point2D.Point2DJNIClass, methodSig: "()V", methodCache: &Point2D.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.awt.geom.Point2D.equals(java.lang.Object)

    private static var equals_MethodID_2: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: obj != nil ? obj! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &Point2D.equals_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public int java.awt.geom.Point2D.hashCode()

    /// public java.lang.Object java.awt.geom.Point2D.clone()

    private static var clone_MethodID_3: jmethodID?

    override open func clone() -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &Point2D.clone_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public double java.awt.geom.Point2D.distance(double,double)

    private static var distance_MethodID_4: jmethodID?

    open func distance( px: Double, py: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: px, locals: &__locals )
        __args[1] = JNIType.toJava( value: py, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "distance", methodSig: "(DD)D", methodCache: &Point2D.distance_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open func distance( _ _px: Double, _ _py: Double ) -> Double {
        return distance( px: _px, py: _py )
    }

    /// public static double java.awt.geom.Point2D.distance(double,double,double,double)

    private static var distance_MethodID_5: jmethodID?

    open class func distance( x1: Double, y1: Double, x2: Double, y2: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: x2, locals: &__locals )
        __args[3] = JNIType.toJava( value: y2, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/Point2D", classCache: &Point2DJNIClass, methodName: "distance", methodSig: "(DDDD)D", methodCache: &distance_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open class func distance( _ _x1: Double, _ _y1: Double, _ _x2: Double, _ _y2: Double ) -> Double {
        return distance( x1: _x1, y1: _y1, x2: _x2, y2: _y2 )
    }

    /// public double java.awt.geom.Point2D.distance(java.awt.geom.Point2D)

    private static var distance_MethodID_6: jmethodID?

    open func distance( pt: Point2D? ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: pt != nil ? pt! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "distance", methodSig: "(Ljava/awt/geom/Point2D;)D", methodCache: &Point2D.distance_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open func distance( _ _pt: Point2D? ) -> Double {
        return distance( pt: _pt )
    }

    /// public double java.awt.geom.Point2D.distanceSq(double,double)

    private static var distanceSq_MethodID_7: jmethodID?

    open func distanceSq( px: Double, py: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: px, locals: &__locals )
        __args[1] = JNIType.toJava( value: py, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "distanceSq", methodSig: "(DD)D", methodCache: &Point2D.distanceSq_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open func distanceSq( _ _px: Double, _ _py: Double ) -> Double {
        return distanceSq( px: _px, py: _py )
    }

    /// public double java.awt.geom.Point2D.distanceSq(java.awt.geom.Point2D)

    private static var distanceSq_MethodID_8: jmethodID?

    open func distanceSq( pt: Point2D? ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: pt != nil ? pt! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "distanceSq", methodSig: "(Ljava/awt/geom/Point2D;)D", methodCache: &Point2D.distanceSq_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open func distanceSq( _ _pt: Point2D? ) -> Double {
        return distanceSq( pt: _pt )
    }

    /// public static double java.awt.geom.Point2D.distanceSq(double,double,double,double)

    private static var distanceSq_MethodID_9: jmethodID?

    open class func distanceSq( x1: Double, y1: Double, x2: Double, y2: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: x2, locals: &__locals )
        __args[3] = JNIType.toJava( value: y2, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/Point2D", classCache: &Point2DJNIClass, methodName: "distanceSq", methodSig: "(DDDD)D", methodCache: &distanceSq_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open class func distanceSq( _ _x1: Double, _ _y1: Double, _ _x2: Double, _ _y2: Double ) -> Double {
        return distanceSq( x1: _x1, y1: _y1, x2: _x2, y2: _y2 )
    }

    /// public abstract double java.awt.geom.Point2D.getX()

    private static var getX_MethodID_10: jmethodID?

    open func getX() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getX", methodSig: "()D", methodCache: &Point2D.getX_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.Point2D.getY()

    private static var getY_MethodID_11: jmethodID?

    open func getY() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getY", methodSig: "()D", methodCache: &Point2D.getY_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public void java.awt.geom.Point2D.setLocation(java.awt.geom.Point2D)

    private static var setLocation_MethodID_12: jmethodID?

    open func setLocation( p: Point2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: p != nil ? p! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocation", methodSig: "(Ljava/awt/geom/Point2D;)V", methodCache: &Point2D.setLocation_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setLocation( _ _p: Point2D? ) {
        setLocation( p: _p )
    }

    /// public abstract void java.awt.geom.Point2D.setLocation(double,double)

    private static var setLocation_MethodID_13: jmethodID?

    open func setLocation( x: Double, y: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocation", methodSig: "(DD)V", methodCache: &Point2D.setLocation_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setLocation( _ _x: Double, _ _y: Double ) {
        setLocation( x: _x, y: _y )
    }

}

