
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// class java.awt.RenderingHints$Key ///

open class RenderingHints_Key: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.RenderingHints$Key", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RenderingHints_KeyJNIClass: jclass?

    /// private static java.util.HashMap java.awt.RenderingHints$Key.identitymap

    /// private int java.awt.RenderingHints$Key.privatekey

    /// protected java.awt.RenderingHints$Key(int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/RenderingHints$Key", classCache: &RenderingHints_Key.RenderingHints_KeyJNIClass, methodSig: "(I)V", methodCache: &RenderingHints_Key.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public final boolean java.awt.RenderingHints$Key.equals(java.lang.Object)

    /// public final int java.awt.RenderingHints$Key.hashCode()

    /// public abstract boolean java.awt.RenderingHints$Key.isCompatibleValue(java.lang.Object)

    private static var isCompatibleValue_MethodID_2: jmethodID?

    open func isCompatibleValue( arg0: java_lang.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isCompatibleValue", methodSig: "(Ljava/lang/Object;)Z", methodCache: &RenderingHints_Key.isCompatibleValue_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isCompatibleValue( _ _arg0: java_lang.JavaObject? ) -> Bool {
        return isCompatibleValue( arg0: _arg0 )
    }

    /// protected final int java.awt.RenderingHints$Key.intKey()

    private static var intKey_MethodID_3: jmethodID?

    open func intKey() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "intKey", methodSig: "()I", methodCache: &RenderingHints_Key.intKey_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private java.lang.String java.awt.RenderingHints$Key.getIdentity()

    /// private static synchronized void java.awt.RenderingHints$Key.recordIdentity(java.awt.RenderingHints$Key)

}
