
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:34:50 GMT 2016 ///

/// class java.awt.JobAttributes ///

open class JobAttributes: java_lang.JavaObject, java_lang.Cloneable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.JobAttributes", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JobAttributesJNIClass: jclass?

    /// private int java.awt.JobAttributes.copies

    /// private java.awt.JobAttributes$DefaultSelectionType java.awt.JobAttributes.defaultSelection

    /// private java.awt.JobAttributes$DestinationType java.awt.JobAttributes.destination

    /// private java.awt.JobAttributes$DialogType java.awt.JobAttributes.dialog

    /// private java.lang.String java.awt.JobAttributes.fileName

    /// private int java.awt.JobAttributes.fromPage

    /// private int java.awt.JobAttributes.maxPage

    /// private int java.awt.JobAttributes.minPage

    /// private java.awt.JobAttributes$MultipleDocumentHandlingType java.awt.JobAttributes.multipleDocumentHandling

    /// private int[][] java.awt.JobAttributes.pageRanges

    /// private int java.awt.JobAttributes.prFirst

    /// private int java.awt.JobAttributes.prLast

    /// private java.lang.String java.awt.JobAttributes.printer

    /// private java.awt.JobAttributes$SidesType java.awt.JobAttributes.sides

    /// private int java.awt.JobAttributes.toPage

    /// public java.awt.JobAttributes(java.awt.JobAttributes)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: JobAttributes? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/JobAttributes", classCache: &JobAttributes.JobAttributesJNIClass, methodSig: "(Ljava/awt/JobAttributes;)V", methodCache: &JobAttributes.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: JobAttributes? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.JobAttributes(int,java.awt.JobAttributes$DefaultSelectionType,java.awt.JobAttributes$DestinationType,java.awt.JobAttributes$DialogType,java.lang.String,int,int,java.awt.JobAttributes$MultipleDocumentHandlingType,int[][],java.lang.String,java.awt.JobAttributes$SidesType)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int, arg1: JobAttributes_DefaultSelectionType?, arg2: JobAttributes_DestinationType?, arg3: JobAttributes_DialogType?, arg4: String?, arg5: Int, arg6: Int, arg7: JobAttributes_MultipleDocumentHandlingType?, arg8: [[Int32]]?, arg9: String?, arg10: JobAttributes_SidesType? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 11 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        __args[8] = JNIType.encode( value: arg8, locals: &__locals )
        __args[9] = JNIType.encode( value: arg9, locals: &__locals )
        __args[10] = JNIType.encode( value: arg10, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/JobAttributes", classCache: &JobAttributes.JobAttributesJNIClass, methodSig: "(ILjava/awt/JobAttributes$DefaultSelectionType;Ljava/awt/JobAttributes$DestinationType;Ljava/awt/JobAttributes$DialogType;Ljava/lang/String;IILjava/awt/JobAttributes$MultipleDocumentHandlingType;[[ILjava/lang/String;Ljava/awt/JobAttributes$SidesType;)V", methodCache: &JobAttributes.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: JobAttributes_DefaultSelectionType?, _ _arg2: JobAttributes_DestinationType?, _ _arg3: JobAttributes_DialogType?, _ _arg4: String?, _ _arg5: Int, _ _arg6: Int, _ _arg7: JobAttributes_MultipleDocumentHandlingType?, _ _arg8: [[Int32]]?, _ _arg9: String?, _ _arg10: JobAttributes_SidesType? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7, arg8: _arg8, arg9: _arg9, arg10: _arg10 )
    }

    /// public java.awt.JobAttributes()

    private static var new_MethodID_3: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/JobAttributes", classCache: &JobAttributes.JobAttributesJNIClass, methodSig: "()V", methodCache: &JobAttributes.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.awt.JobAttributes.equals(java.lang.Object)

    /// public java.lang.String java.awt.JobAttributes.toString()

    /// public int java.awt.JobAttributes.hashCode()

    /// public java.lang.Object java.awt.JobAttributes.clone()

    private static var clone_MethodID_4: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &JobAttributes.clone_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public void java.awt.JobAttributes.set(java.awt.JobAttributes)

    private static var set_MethodID_5: jmethodID?

    open func set( arg0: JobAttributes? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "set", methodSig: "(Ljava/awt/JobAttributes;)V", methodCache: &JobAttributes.set_MethodID_5, args: &__args, locals: &__locals )
    }

    open func set( _ _arg0: JobAttributes? ) {
        set( arg0: _arg0 )
    }

    /// public java.lang.String java.awt.JobAttributes.getFileName()

    private static var getFileName_MethodID_6: jmethodID?

    open func getFileName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFileName", methodSig: "()Ljava/lang/String;", methodCache: &JobAttributes.getFileName_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public int java.awt.JobAttributes.getCopies()

    private static var getCopies_MethodID_7: jmethodID?

    open func getCopies() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getCopies", methodSig: "()I", methodCache: &JobAttributes.getCopies_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.JobAttributes.setCopies(int)

    private static var setCopies_MethodID_8: jmethodID?

    open func setCopies( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCopies", methodSig: "(I)V", methodCache: &JobAttributes.setCopies_MethodID_8, args: &__args, locals: &__locals )
    }

    open func setCopies( _ _arg0: Int ) {
        setCopies( arg0: _arg0 )
    }

    /// public void java.awt.JobAttributes.setCopiesToDefault()

    private static var setCopiesToDefault_MethodID_9: jmethodID?

    open func setCopiesToDefault() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCopiesToDefault", methodSig: "()V", methodCache: &JobAttributes.setCopiesToDefault_MethodID_9, args: &__args, locals: &__locals )
    }


    /// public java.awt.JobAttributes$DefaultSelectionType java.awt.JobAttributes.getDefaultSelection()

    private static var getDefaultSelection_MethodID_10: jmethodID?

    open func getDefaultSelection() -> JobAttributes_DefaultSelectionType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultSelection", methodSig: "()Ljava/awt/JobAttributes$DefaultSelectionType;", methodCache: &JobAttributes.getDefaultSelection_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JobAttributes_DefaultSelectionType( javaObject: __return ) : nil
    }


    /// public void java.awt.JobAttributes.setDefaultSelection(java.awt.JobAttributes$DefaultSelectionType)

    private static var setDefaultSelection_MethodID_11: jmethodID?

    open func setDefaultSelection( arg0: JobAttributes_DefaultSelectionType? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDefaultSelection", methodSig: "(Ljava/awt/JobAttributes$DefaultSelectionType;)V", methodCache: &JobAttributes.setDefaultSelection_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setDefaultSelection( _ _arg0: JobAttributes_DefaultSelectionType? ) {
        setDefaultSelection( arg0: _arg0 )
    }

    /// public java.awt.JobAttributes$DestinationType java.awt.JobAttributes.getDestination()

    private static var getDestination_MethodID_12: jmethodID?

    open func getDestination() -> JobAttributes_DestinationType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDestination", methodSig: "()Ljava/awt/JobAttributes$DestinationType;", methodCache: &JobAttributes.getDestination_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JobAttributes_DestinationType( javaObject: __return ) : nil
    }


    /// public void java.awt.JobAttributes.setDestination(java.awt.JobAttributes$DestinationType)

    private static var setDestination_MethodID_13: jmethodID?

    open func setDestination( arg0: JobAttributes_DestinationType? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDestination", methodSig: "(Ljava/awt/JobAttributes$DestinationType;)V", methodCache: &JobAttributes.setDestination_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setDestination( _ _arg0: JobAttributes_DestinationType? ) {
        setDestination( arg0: _arg0 )
    }

    /// public java.awt.JobAttributes$DialogType java.awt.JobAttributes.getDialog()

    private static var getDialog_MethodID_14: jmethodID?

    open func getDialog() -> JobAttributes_DialogType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDialog", methodSig: "()Ljava/awt/JobAttributes$DialogType;", methodCache: &JobAttributes.getDialog_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JobAttributes_DialogType( javaObject: __return ) : nil
    }


    /// public void java.awt.JobAttributes.setDialog(java.awt.JobAttributes$DialogType)

    private static var setDialog_MethodID_15: jmethodID?

    open func setDialog( arg0: JobAttributes_DialogType? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDialog", methodSig: "(Ljava/awt/JobAttributes$DialogType;)V", methodCache: &JobAttributes.setDialog_MethodID_15, args: &__args, locals: &__locals )
    }

    open func setDialog( _ _arg0: JobAttributes_DialogType? ) {
        setDialog( arg0: _arg0 )
    }

    /// public void java.awt.JobAttributes.setFileName(java.lang.String)

    private static var setFileName_MethodID_16: jmethodID?

    open func setFileName( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFileName", methodSig: "(Ljava/lang/String;)V", methodCache: &JobAttributes.setFileName_MethodID_16, args: &__args, locals: &__locals )
    }

    open func setFileName( _ _arg0: String? ) {
        setFileName( arg0: _arg0 )
    }

    /// public int java.awt.JobAttributes.getFromPage()

    private static var getFromPage_MethodID_17: jmethodID?

    open func getFromPage() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getFromPage", methodSig: "()I", methodCache: &JobAttributes.getFromPage_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.JobAttributes.setFromPage(int)

    private static var setFromPage_MethodID_18: jmethodID?

    open func setFromPage( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFromPage", methodSig: "(I)V", methodCache: &JobAttributes.setFromPage_MethodID_18, args: &__args, locals: &__locals )
    }

    open func setFromPage( _ _arg0: Int ) {
        setFromPage( arg0: _arg0 )
    }

    /// public int java.awt.JobAttributes.getMaxPage()

    private static var getMaxPage_MethodID_19: jmethodID?

    open func getMaxPage() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaxPage", methodSig: "()I", methodCache: &JobAttributes.getMaxPage_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.JobAttributes.setMaxPage(int)

    private static var setMaxPage_MethodID_20: jmethodID?

    open func setMaxPage( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaxPage", methodSig: "(I)V", methodCache: &JobAttributes.setMaxPage_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setMaxPage( _ _arg0: Int ) {
        setMaxPage( arg0: _arg0 )
    }

    /// public int java.awt.JobAttributes.getMinPage()

    private static var getMinPage_MethodID_21: jmethodID?

    open func getMinPage() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMinPage", methodSig: "()I", methodCache: &JobAttributes.getMinPage_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.JobAttributes.setMinPage(int)

    private static var setMinPage_MethodID_22: jmethodID?

    open func setMinPage( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMinPage", methodSig: "(I)V", methodCache: &JobAttributes.setMinPage_MethodID_22, args: &__args, locals: &__locals )
    }

    open func setMinPage( _ _arg0: Int ) {
        setMinPage( arg0: _arg0 )
    }

    /// public java.awt.JobAttributes$MultipleDocumentHandlingType java.awt.JobAttributes.getMultipleDocumentHandling()

    private static var getMultipleDocumentHandling_MethodID_23: jmethodID?

    open func getMultipleDocumentHandling() -> JobAttributes_MultipleDocumentHandlingType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMultipleDocumentHandling", methodSig: "()Ljava/awt/JobAttributes$MultipleDocumentHandlingType;", methodCache: &JobAttributes.getMultipleDocumentHandling_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JobAttributes_MultipleDocumentHandlingType( javaObject: __return ) : nil
    }


    /// public void java.awt.JobAttributes.setMultipleDocumentHandling(java.awt.JobAttributes$MultipleDocumentHandlingType)

    private static var setMultipleDocumentHandling_MethodID_24: jmethodID?

    open func setMultipleDocumentHandling( arg0: JobAttributes_MultipleDocumentHandlingType? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMultipleDocumentHandling", methodSig: "(Ljava/awt/JobAttributes$MultipleDocumentHandlingType;)V", methodCache: &JobAttributes.setMultipleDocumentHandling_MethodID_24, args: &__args, locals: &__locals )
    }

    open func setMultipleDocumentHandling( _ _arg0: JobAttributes_MultipleDocumentHandlingType? ) {
        setMultipleDocumentHandling( arg0: _arg0 )
    }

    /// public void java.awt.JobAttributes.setMultipleDocumentHandlingToDefault()

    private static var setMultipleDocumentHandlingToDefault_MethodID_25: jmethodID?

    open func setMultipleDocumentHandlingToDefault() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMultipleDocumentHandlingToDefault", methodSig: "()V", methodCache: &JobAttributes.setMultipleDocumentHandlingToDefault_MethodID_25, args: &__args, locals: &__locals )
    }


    /// public int[][] java.awt.JobAttributes.getPageRanges()

    private static var getPageRanges_MethodID_26: jmethodID?

    open func getPageRanges() -> [[Int32]]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPageRanges", methodSig: "()[[I", methodCache: &JobAttributes.getPageRanges_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: [[Int32]](), from: __return )
    }


    /// public void java.awt.JobAttributes.setPageRanges(int[][])

    private static var setPageRanges_MethodID_27: jmethodID?

    open func setPageRanges( arg0: [[Int32]]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPageRanges", methodSig: "([[I)V", methodCache: &JobAttributes.setPageRanges_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setPageRanges( _ _arg0: [[Int32]]? ) {
        setPageRanges( arg0: _arg0 )
    }

    /// public java.lang.String java.awt.JobAttributes.getPrinter()

    private static var getPrinter_MethodID_28: jmethodID?

    open func getPrinter() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPrinter", methodSig: "()Ljava/lang/String;", methodCache: &JobAttributes.getPrinter_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public void java.awt.JobAttributes.setPrinter(java.lang.String)

    private static var setPrinter_MethodID_29: jmethodID?

    open func setPrinter( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPrinter", methodSig: "(Ljava/lang/String;)V", methodCache: &JobAttributes.setPrinter_MethodID_29, args: &__args, locals: &__locals )
    }

    open func setPrinter( _ _arg0: String? ) {
        setPrinter( arg0: _arg0 )
    }

    /// public java.awt.JobAttributes$SidesType java.awt.JobAttributes.getSides()

    private static var getSides_MethodID_30: jmethodID?

    open func getSides() -> JobAttributes_SidesType! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSides", methodSig: "()Ljava/awt/JobAttributes$SidesType;", methodCache: &JobAttributes.getSides_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JobAttributes_SidesType( javaObject: __return ) : nil
    }


    /// public void java.awt.JobAttributes.setSides(java.awt.JobAttributes$SidesType)

    private static var setSides_MethodID_31: jmethodID?

    open func setSides( arg0: JobAttributes_SidesType? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSides", methodSig: "(Ljava/awt/JobAttributes$SidesType;)V", methodCache: &JobAttributes.setSides_MethodID_31, args: &__args, locals: &__locals )
    }

    open func setSides( _ _arg0: JobAttributes_SidesType? ) {
        setSides( arg0: _arg0 )
    }

    /// public void java.awt.JobAttributes.setSidesToDefault()

    private static var setSidesToDefault_MethodID_32: jmethodID?

    open func setSidesToDefault() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSidesToDefault", methodSig: "()V", methodCache: &JobAttributes.setSidesToDefault_MethodID_32, args: &__args, locals: &__locals )
    }


    /// public int java.awt.JobAttributes.getToPage()

    private static var getToPage_MethodID_33: jmethodID?

    open func getToPage() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getToPage", methodSig: "()I", methodCache: &JobAttributes.getToPage_MethodID_33, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.JobAttributes.setToPage(int)

    private static var setToPage_MethodID_34: jmethodID?

    open func setToPage( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToPage", methodSig: "(I)V", methodCache: &JobAttributes.setToPage_MethodID_34, args: &__args, locals: &__locals )
    }

    open func setToPage( _ _arg0: Int ) {
        setToPage( arg0: _arg0 )
    }

}
