
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.peer.ScrollbarPeer ///

public protocol ScrollbarPeer: ComponentPeer {

    /// public abstract void java.awt.peer.ScrollbarPeer.setLineIncrement(int)

    func setLineIncrement( l: Int )

    /// public abstract void java.awt.peer.ScrollbarPeer.setPageIncrement(int)

    func setPageIncrement( l: Int )

    /// public abstract void java.awt.peer.ScrollbarPeer.setValues(int,int,int,int)

    func setValues( value: Int, visible: Int, minimum: Int, maximum: Int )

}


open class ScrollbarPeerForward: ComponentPeerForward, ScrollbarPeer {

    private static var ScrollbarPeerJNIClass: jclass?

    /// public abstract void java.awt.peer.ScrollbarPeer.setLineIncrement(int)

    private static var setLineIncrement_MethodID_4: jmethodID?

    open func setLineIncrement( l: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLineIncrement", methodSig: "(I)V", methodCache: &ScrollbarPeerForward.setLineIncrement_MethodID_4, args: &__args, locals: &__locals )
    }

    open func setLineIncrement( _ _l: Int ) {
        setLineIncrement( l: _l )
    }

    /// public abstract void java.awt.peer.ScrollbarPeer.setPageIncrement(int)

    private static var setPageIncrement_MethodID_5: jmethodID?

    open func setPageIncrement( l: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPageIncrement", methodSig: "(I)V", methodCache: &ScrollbarPeerForward.setPageIncrement_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setPageIncrement( _ _l: Int ) {
        setPageIncrement( l: _l )
    }

    /// public abstract void java.awt.peer.ScrollbarPeer.setValues(int,int,int,int)

    private static var setValues_MethodID_6: jmethodID?

    open func setValues( value: Int, visible: Int, minimum: Int, maximum: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        __args[1] = JNIType.toJava( value: visible, locals: &__locals )
        __args[2] = JNIType.toJava( value: minimum, locals: &__locals )
        __args[3] = JNIType.toJava( value: maximum, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setValues", methodSig: "(IIII)V", methodCache: &ScrollbarPeerForward.setValues_MethodID_6, args: &__args, locals: &__locals )
    }

    open func setValues( _ _value: Int, _ _visible: Int, _ _minimum: Int, _ _maximum: Int ) {
        setValues( value: _value, visible: _visible, minimum: _minimum, maximum: _maximum )
    }

    /// public abstract void java.awt.peer.ComponentPeer.print(java.awt.Graphics)

    private static var print_MethodID_7: jmethodID?

    override open func print( g: Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "print", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &ScrollbarPeerForward.print_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func print( _ _g: Graphics? ) {
        print( g: _g )
    }

    /// public abstract void java.awt.peer.ComponentPeer.flip(int,int,int,int,java.awt.BufferCapabilities$FlipContents)

    private static var flip_MethodID_8: jmethodID?

    override open func flip( x1: Int, y1: Int, x2: Int, y2: Int, flipAction: BufferCapabilities_FlipContents? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: x2, locals: &__locals )
        __args[3] = JNIType.toJava( value: y2, locals: &__locals )
        __args[4] = JNIType.toJava( value: flipAction, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flip", methodSig: "(IIIILjava/awt/BufferCapabilities$FlipContents;)V", methodCache: &ScrollbarPeerForward.flip_MethodID_8, args: &__args, locals: &__locals )
    }

    override open func flip( _ _x1: Int, _ _y1: Int, _ _x2: Int, _ _y2: Int, _ _flipAction: BufferCapabilities_FlipContents? ) {
        flip( x1: _x1, y1: _y1, x2: _x2, y2: _y2, flipAction: _flipAction )
    }

    /// public abstract void java.awt.peer.ComponentPeer.handleEvent(java.awt.AWTEvent)

    private static var handleEvent_MethodID_9: jmethodID?

    override open func handleEvent( e: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "handleEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &ScrollbarPeerForward.handleEvent_MethodID_9, args: &__args, locals: &__locals )
    }

    override open func handleEvent( _ _e: AWTEvent? ) {
        handleEvent( e: _e )
    }

    /// public abstract java.awt.image.ColorModel java.awt.peer.ComponentPeer.getColorModel()

    private static var getColorModel_MethodID_10: jmethodID?

    override open func getColorModel() -> ColorModel! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColorModel", methodSig: "()Ljava/awt/image/ColorModel;", methodCache: &ScrollbarPeerForward.getColorModel_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ColorModel( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Point java.awt.peer.ComponentPeer.getLocationOnScreen()

    private static var getLocationOnScreen_MethodID_11: jmethodID?

    override open func getLocationOnScreen() -> Point! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocationOnScreen", methodSig: "()Ljava/awt/Point;", methodCache: &ScrollbarPeerForward.getLocationOnScreen_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(int,int)

    private static var createImage_MethodID_12: jmethodID?

    override open func createImage( width: Int, height: Int ) -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: width, locals: &__locals )
        __args[1] = JNIType.toJava( value: height, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createImage", methodSig: "(II)Ljava/awt/Image;", methodCache: &ScrollbarPeerForward.createImage_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    override open func createImage( _ _width: Int, _ _height: Int ) -> Image! {
        return createImage( width: _width, height: _height )
    }

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(java.awt.image.ImageProducer)

    private static var createImage_MethodID_13: jmethodID?

    override open func createImage( producer: ImageProducer? ) -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: producer, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createImage", methodSig: "(Ljava/awt/image/ImageProducer;)Ljava/awt/Image;", methodCache: &ScrollbarPeerForward.createImage_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    override open func createImage( _ _producer: ImageProducer? ) -> Image! {
        return createImage( producer: _producer )
    }

    /// public abstract java.awt.image.VolatileImage java.awt.peer.ComponentPeer.createVolatileImage(int,int)

    private static var createVolatileImage_MethodID_14: jmethodID?

    override open func createVolatileImage( width: Int, height: Int ) -> VolatileImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: width, locals: &__locals )
        __args[1] = JNIType.toJava( value: height, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createVolatileImage", methodSig: "(II)Ljava/awt/image/VolatileImage;", methodCache: &ScrollbarPeerForward.createVolatileImage_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? VolatileImage( javaObject: __return ) : nil
    }

    override open func createVolatileImage( _ _width: Int, _ _height: Int ) -> VolatileImage! {
        return createVolatileImage( width: _width, height: _height )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    private static var prepareImage_MethodID_15: jmethodID?

    override open func prepareImage( img: Image?, w: Int, h: Int, o: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: img, locals: &__locals )
        __args[1] = JNIType.toJava( value: w, locals: &__locals )
        __args[2] = JNIType.toJava( value: h, locals: &__locals )
        __args[3] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "prepareImage", methodSig: "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z", methodCache: &ScrollbarPeerForward.prepareImage_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func prepareImage( _ _img: Image?, _ _w: Int, _ _h: Int, _ _o: ImageObserver? ) -> Bool {
        return prepareImage( img: _img, w: _w, h: _h, o: _o )
    }

    /// public abstract int java.awt.peer.ComponentPeer.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    private static var checkImage_MethodID_16: jmethodID?

    override open func checkImage( img: Image?, w: Int, h: Int, o: ImageObserver? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: img, locals: &__locals )
        __args[1] = JNIType.toJava( value: w, locals: &__locals )
        __args[2] = JNIType.toJava( value: h, locals: &__locals )
        __args[3] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "checkImage", methodSig: "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)I", methodCache: &ScrollbarPeerForward.checkImage_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    override open func checkImage( _ _img: Image?, _ _w: Int, _ _h: Int, _ _o: ImageObserver? ) -> Int {
        return checkImage( img: _img, w: _w, h: _h, o: _o )
    }

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.getBackBuffer()

    private static var getBackBuffer_MethodID_17: jmethodID?

    override open func getBackBuffer() -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBackBuffer", methodSig: "()Ljava/awt/Image;", methodCache: &ScrollbarPeerForward.getBackBuffer_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.handlesWheelScrolling()

    private static var handlesWheelScrolling_MethodID_18: jmethodID?

    override open func handlesWheelScrolling() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "handlesWheelScrolling", methodSig: "()Z", methodCache: &ScrollbarPeerForward.handlesWheelScrolling_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.destroyBuffers()

    private static var destroyBuffers_MethodID_19: jmethodID?

    override open func destroyBuffers() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "destroyBuffers", methodSig: "()V", methodCache: &ScrollbarPeerForward.destroyBuffers_MethodID_19, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.applyShape(sun.java2d.pipe.Region)

    private static var applyShape_MethodID_20: jmethodID?

    override open func applyShape( shape: /* sun.java2d.pipe.Region */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: shape, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applyShape", methodSig: "(Lsun/java2d/pipe/Region;)V", methodCache: &ScrollbarPeerForward.applyShape_MethodID_20, args: &__args, locals: &__locals )
    }

    override open func applyShape( _ _shape: /* sun.java2d.pipe.Region */ UnclassedObject? ) {
        applyShape( shape: _shape )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setZOrder(java.awt.peer.ComponentPeer)

    private static var setZOrder_MethodID_21: jmethodID?

    override open func setZOrder( above: ComponentPeer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: above, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setZOrder", methodSig: "(Ljava/awt/peer/ComponentPeer;)V", methodCache: &ScrollbarPeerForward.setZOrder_MethodID_21, args: &__args, locals: &__locals )
    }

    override open func setZOrder( _ _above: ComponentPeer? ) {
        setZOrder( above: _above )
    }

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getPreferredSize()

    private static var getPreferredSize_MethodID_22: jmethodID?

    override open func getPreferredSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &ScrollbarPeerForward.getPreferredSize_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.setBackground(java.awt.Color)

    private static var setBackground_MethodID_23: jmethodID?

    override open func setBackground( c: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &ScrollbarPeerForward.setBackground_MethodID_23, args: &__args, locals: &__locals )
    }

    override open func setBackground( _ _c: Color? ) {
        setBackground( c: _c )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setForeground(java.awt.Color)

    private static var setForeground_MethodID_24: jmethodID?

    override open func setForeground( c: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setForeground", methodSig: "(Ljava/awt/Color;)V", methodCache: &ScrollbarPeerForward.setForeground_MethodID_24, args: &__args, locals: &__locals )
    }

    override open func setForeground( _ _c: Color? ) {
        setForeground( c: _c )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setFont(java.awt.Font)

    private static var setFont_MethodID_25: jmethodID?

    override open func setFont( f: Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: f, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &ScrollbarPeerForward.setFont_MethodID_25, args: &__args, locals: &__locals )
    }

    override open func setFont( _ _f: Font? ) {
        setFont( f: _f )
    }

    /// public abstract void java.awt.peer.ComponentPeer.paint(java.awt.Graphics)

    private static var paint_MethodID_26: jmethodID?

    override open func paint( g: Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &ScrollbarPeerForward.paint_MethodID_26, args: &__args, locals: &__locals )
    }

    override open func paint( _ _g: Graphics? ) {
        paint( g: _g )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.isObscured()

    private static var isObscured_MethodID_27: jmethodID?

    override open func isObscured() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isObscured", methodSig: "()Z", methodCache: &ScrollbarPeerForward.isObscured_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.canDetermineObscurity()

    private static var canDetermineObscurity_MethodID_28: jmethodID?

    override open func canDetermineObscurity() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "canDetermineObscurity", methodSig: "()Z", methodCache: &ScrollbarPeerForward.canDetermineObscurity_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.coalescePaintEvent(java.awt.event.PaintEvent)

    private static var coalescePaintEvent_MethodID_29: jmethodID?

    override open func coalescePaintEvent( e: PaintEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "coalescePaintEvent", methodSig: "(Ljava/awt/event/PaintEvent;)V", methodCache: &ScrollbarPeerForward.coalescePaintEvent_MethodID_29, args: &__args, locals: &__locals )
    }

    override open func coalescePaintEvent( _ _e: PaintEvent? ) {
        coalescePaintEvent( e: _e )
    }

    /// public abstract void java.awt.peer.ComponentPeer.createBuffers(int,java.awt.BufferCapabilities) throws java.awt.AWTException

    private static var createBuffers_MethodID_30: jmethodID?

    override open func createBuffers( numBuffers: Int, caps: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: numBuffers, locals: &__locals )
        __args[1] = JNIType.toJava( value: caps, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createBuffers", methodSig: "(ILjava/awt/BufferCapabilities;)V", methodCache: &ScrollbarPeerForward.createBuffers_MethodID_30, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw AWTException( javaObject: throwable )
        }
    }

    override open func createBuffers( _ _numBuffers: Int, _ _caps: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        try createBuffers( numBuffers: _numBuffers, caps: _caps )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.requestFocus(java.awt.Component,boolean,boolean,long,sun.awt.CausedFocusEvent$Cause)

    private static var requestFocus_MethodID_31: jmethodID?

    override open func requestFocus( lightweightChild: Component?, temporary: Bool, focusedWindowChangeAllowed: Bool, time: Int64, cause: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: lightweightChild, locals: &__locals )
        __args[1] = JNIType.toJava( value: temporary, locals: &__locals )
        __args[2] = JNIType.toJava( value: focusedWindowChangeAllowed, locals: &__locals )
        __args[3] = JNIType.toJava( value: time, locals: &__locals )
        __args[4] = JNIType.toJava( value: cause, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestFocus", methodSig: "(Ljava/awt/Component;ZZJLsun/awt/CausedFocusEvent$Cause;)Z", methodCache: &ScrollbarPeerForward.requestFocus_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func requestFocus( _ _lightweightChild: Component?, _ _temporary: Bool, _ _focusedWindowChangeAllowed: Bool, _ _time: Int64, _ _cause: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool {
        return requestFocus( lightweightChild: _lightweightChild, temporary: _temporary, focusedWindowChangeAllowed: _focusedWindowChangeAllowed, time: _time, cause: _cause )
    }

    /// public abstract java.awt.FontMetrics java.awt.peer.ComponentPeer.getFontMetrics(java.awt.Font)

    private static var getFontMetrics_MethodID_32: jmethodID?

    override open func getFontMetrics( font: Font? ) -> FontMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: font, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", methodCache: &ScrollbarPeerForward.getFontMetrics_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FontMetrics( javaObject: __return ) : nil
    }

    override open func getFontMetrics( _ _font: Font? ) -> FontMetrics! {
        return getFontMetrics( font: _font )
    }

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getMinimumSize()

    private static var getMinimumSize_MethodID_33: jmethodID?

    override open func getMinimumSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMinimumSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &ScrollbarPeerForward.getMinimumSize_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Graphics java.awt.peer.ComponentPeer.getGraphics()

    private static var getGraphics_MethodID_34: jmethodID?

    override open func getGraphics() -> Graphics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphics", methodSig: "()Ljava/awt/Graphics;", methodCache: &ScrollbarPeerForward.getGraphics_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Graphics( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.setVisible(boolean)

    private static var setVisible_MethodID_35: jmethodID?

    override open func setVisible( v: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: v, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &ScrollbarPeerForward.setVisible_MethodID_35, args: &__args, locals: &__locals )
    }

    override open func setVisible( _ _v: Bool ) {
        setVisible( v: _v )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setEnabled(boolean)

    private static var setEnabled_MethodID_36: jmethodID?

    override open func setEnabled( e: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &ScrollbarPeerForward.setEnabled_MethodID_36, args: &__args, locals: &__locals )
    }

    override open func setEnabled( _ _e: Bool ) {
        setEnabled( e: _e )
    }

    /// public abstract void java.awt.peer.ComponentPeer.dispose()

    private static var dispose_MethodID_37: jmethodID?

    override open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &ScrollbarPeerForward.dispose_MethodID_37, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.setBounds(int,int,int,int,int)

    private static var setBounds_MethodID_38: jmethodID?

    override open func setBounds( x: Int, y: Int, width: Int, height: Int, op: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: width, locals: &__locals )
        __args[3] = JNIType.toJava( value: height, locals: &__locals )
        __args[4] = JNIType.toJava( value: op, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBounds", methodSig: "(IIIII)V", methodCache: &ScrollbarPeerForward.setBounds_MethodID_38, args: &__args, locals: &__locals )
    }

    override open func setBounds( _ _x: Int, _ _y: Int, _ _width: Int, _ _height: Int, _ _op: Int ) {
        setBounds( x: _x, y: _y, width: _width, height: _height, op: _op )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.updateGraphicsData(java.awt.GraphicsConfiguration)

    private static var updateGraphicsData_MethodID_39: jmethodID?

    override open func updateGraphicsData( gc: GraphicsConfiguration? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: gc, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "updateGraphicsData", methodSig: "(Ljava/awt/GraphicsConfiguration;)Z", methodCache: &ScrollbarPeerForward.updateGraphicsData_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func updateGraphicsData( _ _gc: GraphicsConfiguration? ) -> Bool {
        return updateGraphicsData( gc: _gc )
    }

    /// public abstract void java.awt.peer.ComponentPeer.layout()

    private static var layout_MethodID_40: jmethodID?

    override open func layout() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layout", methodSig: "()V", methodCache: &ScrollbarPeerForward.layout_MethodID_40, args: &__args, locals: &__locals )
    }


    /// public abstract java.awt.GraphicsConfiguration java.awt.peer.ComponentPeer.getGraphicsConfiguration()

    private static var getGraphicsConfiguration_MethodID_41: jmethodID?

    override open func getGraphicsConfiguration() -> GraphicsConfiguration! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphicsConfiguration", methodSig: "()Ljava/awt/GraphicsConfiguration;", methodCache: &ScrollbarPeerForward.getGraphicsConfiguration_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GraphicsConfiguration( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.updateCursorImmediately()

    private static var updateCursorImmediately_MethodID_42: jmethodID?

    override open func updateCursorImmediately() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateCursorImmediately", methodSig: "()V", methodCache: &ScrollbarPeerForward.updateCursorImmediately_MethodID_42, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.isFocusable()

    private static var isFocusable_MethodID_43: jmethodID?

    override open func isFocusable() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusable", methodSig: "()Z", methodCache: &ScrollbarPeerForward.isFocusable_MethodID_43, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.isReparentSupported()

    private static var isReparentSupported_MethodID_44: jmethodID?

    override open func isReparentSupported() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isReparentSupported", methodSig: "()Z", methodCache: &ScrollbarPeerForward.isReparentSupported_MethodID_44, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.reparent(java.awt.peer.ContainerPeer)

    private static var reparent_MethodID_45: jmethodID?

    override open func reparent( newContainer: ContainerPeer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: newContainer, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reparent", methodSig: "(Ljava/awt/peer/ContainerPeer;)V", methodCache: &ScrollbarPeerForward.reparent_MethodID_45, args: &__args, locals: &__locals )
    }

    override open func reparent( _ _newContainer: ContainerPeer? ) {
        reparent( newContainer: _newContainer )
    }

}


