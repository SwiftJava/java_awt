
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.Dialog$ModalExclusionType ///

public enum Dialog_ModalExclusionType: Int, JNIObjectProtocol, JNIObjectInit {

    case NO_EXCLUDE, APPLICATION_EXCLUDE, TOOLKIT_EXCLUDE

    static let enumConstants = try! JavaClass.forName("java.awt.Dialog$ModalExclusionType")
        .getEnumConstants()!.map { Dialog_ModalExclusionTypeForward( javaObject: $0.javaObject ) }

    public func underlier() -> Dialog_ModalExclusionTypeForward {
        return Dialog_ModalExclusionType.enumConstants[self.rawValue]
    }

    public func localJavaObject(_ locals: UnsafeMutablePointer<[jobject]>) -> jobject? {
        return underlier().localJavaObject( locals )
    }

    public init( javaObject: jobject? ) {
        self = Dialog_ModalExclusionType( rawValue: JavaEnum( javaObject: javaObject ).ordinal() )!
    }

    /// public static java.awt.Dialog$ModalExclusionType java.awt.Dialog$ModalExclusionType.valueOf(java.lang.String)

    private static var valueOf_MethodID_1: jmethodID?

    public static func valueOf( arg0: String? ) -> Dialog_ModalExclusionType! {
        return Dialog_ModalExclusionTypeForward.valueOf( arg0: arg0 )
    }
    public static func valueOf( _ _arg0: String? ) -> Dialog_ModalExclusionType! {
        return valueOf( arg0: _arg0 )
    }

    /// public static java.awt.Dialog$ModalExclusionType[] java.awt.Dialog$ModalExclusionType.values()

    private static var values_MethodID_2: jmethodID?

    public static func values() -> [Dialog_ModalExclusionType]! {
        return Dialog_ModalExclusionTypeForward.values( )
    }

}


open class Dialog_ModalExclusionTypeForward: JNIObjectForward {

    private static var Dialog_ModalExclusionTypeJNIClass: jclass?

    /// private static final java.awt.Dialog$ModalExclusionType[] java.awt.Dialog$ModalExclusionType.$VALUES

    /// public static final java.awt.Dialog$ModalExclusionType java.awt.Dialog$ModalExclusionType.APPLICATION_EXCLUDE

    private static var APPLICATION_EXCLUDE_FieldID: jfieldID?

    open static var APPLICATION_EXCLUDE: Dialog_ModalExclusionType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "APPLICATION_EXCLUDE", fieldType: "Ljava/awt/Dialog$ModalExclusionType;", fieldCache: &APPLICATION_EXCLUDE_FieldID, className: "java/awt/Dialog$ModalExclusionType", classCache: &Dialog_ModalExclusionTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Dialog_ModalExclusionType( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Dialog$ModalExclusionType java.awt.Dialog$ModalExclusionType.NO_EXCLUDE

    private static var NO_EXCLUDE_FieldID: jfieldID?

    open static var NO_EXCLUDE: Dialog_ModalExclusionType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "NO_EXCLUDE", fieldType: "Ljava/awt/Dialog$ModalExclusionType;", fieldCache: &NO_EXCLUDE_FieldID, className: "java/awt/Dialog$ModalExclusionType", classCache: &Dialog_ModalExclusionTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Dialog_ModalExclusionType( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Dialog$ModalExclusionType java.awt.Dialog$ModalExclusionType.TOOLKIT_EXCLUDE

    private static var TOOLKIT_EXCLUDE_FieldID: jfieldID?

    open static var TOOLKIT_EXCLUDE: Dialog_ModalExclusionType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TOOLKIT_EXCLUDE", fieldType: "Ljava/awt/Dialog$ModalExclusionType;", fieldCache: &TOOLKIT_EXCLUDE_FieldID, className: "java/awt/Dialog$ModalExclusionType", classCache: &Dialog_ModalExclusionTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Dialog_ModalExclusionType( javaObject: __value ) : nil
        }
    }

    /// public static java.awt.Dialog$ModalExclusionType java.awt.Dialog$ModalExclusionType.valueOf(java.lang.String)

    private static var valueOf_MethodID_3: jmethodID?

    open class func valueOf( arg0: String? ) -> Dialog_ModalExclusionType! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Dialog$ModalExclusionType", classCache: &Dialog_ModalExclusionTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/awt/Dialog$ModalExclusionType;", methodCache: &valueOf_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dialog_ModalExclusionType( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> Dialog_ModalExclusionType! {
        return valueOf( arg0: _arg0 )
    }

    /// public static java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String)

    private static var valueOf_MethodID_4: jmethodID?

    open class func valueOf( enumType: java_swift.JavaClass?, name: String? ) -> java_swift.JavaEnum! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: enumType, locals: &__locals )
        __args[1] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Dialog$ModalExclusionType", classCache: &Dialog_ModalExclusionTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", methodCache: &valueOf_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaEnum( javaObject: __return ) : nil
    }

    open class func valueOf( _ _enumType: java_swift.JavaClass?, _ _name: String? ) -> java_swift.JavaEnum! {
        return valueOf( enumType: _enumType, name: _name )
    }

    /// public static java.awt.Dialog$ModalExclusionType[] java.awt.Dialog$ModalExclusionType.values()

    private static var values_MethodID_5: jmethodID?

    open class func values() -> [Dialog_ModalExclusionType]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Dialog$ModalExclusionType", classCache: &Dialog_ModalExclusionTypeJNIClass, methodName: "values", methodSig: "()[Ljava/awt/Dialog$ModalExclusionType;", methodCache: &values_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Dialog_ModalExclusionType].self, from: __return )
    }


    /// public final int java.lang.Enum.compareTo(java.lang.Enum)

    // Skipping method: false true false false false 

    /// public int java.lang.Enum.compareTo(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final boolean java.lang.Enum.equals(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final native java.lang.Class java.lang.Object.getClass()

    // Skipping method: false true false false false 

    /// public final java.lang.Class java.lang.Enum.getDeclaringClass()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.hashCode()

    // Skipping method: false true false false false 

    /// public final java.lang.String java.lang.Enum.name()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notify()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notifyAll()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.ordinal()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.Enum.toString()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait() throws java.lang.InterruptedException

    // Skipping method: false true false false false 

}

