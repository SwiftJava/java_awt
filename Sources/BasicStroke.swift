
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:33 GMT 2016 ///

/// class java.awt.BasicStroke ///

open class BasicStroke: java_lang.JavaObject, Stroke {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.BasicStroke", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BasicStrokeJNIClass: jclass?

    /// public static final int java.awt.BasicStroke.JOIN_MITER

    private static var JOIN_MITER_FieldID: jfieldID?

    open static var JOIN_MITER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JOIN_MITER", fieldType: "I", fieldCache: &JOIN_MITER_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.BasicStroke.JOIN_ROUND

    private static var JOIN_ROUND_FieldID: jfieldID?

    open static var JOIN_ROUND: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JOIN_ROUND", fieldType: "I", fieldCache: &JOIN_ROUND_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.BasicStroke.JOIN_BEVEL

    private static var JOIN_BEVEL_FieldID: jfieldID?

    open static var JOIN_BEVEL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JOIN_BEVEL", fieldType: "I", fieldCache: &JOIN_BEVEL_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.BasicStroke.CAP_BUTT

    private static var CAP_BUTT_FieldID: jfieldID?

    open static var CAP_BUTT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CAP_BUTT", fieldType: "I", fieldCache: &CAP_BUTT_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.BasicStroke.CAP_ROUND

    private static var CAP_ROUND_FieldID: jfieldID?

    open static var CAP_ROUND: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CAP_ROUND", fieldType: "I", fieldCache: &CAP_ROUND_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.BasicStroke.CAP_SQUARE

    private static var CAP_SQUARE_FieldID: jfieldID?

    open static var CAP_SQUARE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CAP_SQUARE", fieldType: "I", fieldCache: &CAP_SQUARE_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// float java.awt.BasicStroke.width

    /// int java.awt.BasicStroke.join

    /// int java.awt.BasicStroke.cap

    /// float java.awt.BasicStroke.miterlimit

    /// float[] java.awt.BasicStroke.dash

    /// float java.awt.BasicStroke.dash_phase

    /// private static final int[] java.awt.BasicStroke.RasterizerCaps

    /// private static final int[] java.awt.BasicStroke.RasterizerCorners

    /// public java.awt.BasicStroke(float,int,int,float,float[],float)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Float, arg1: Int, arg2: Int, arg3: Float, arg4: [Float]?, arg5: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(FIIF[FF)V", methodCache: &BasicStroke.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Int, _ _arg2: Int, _ _arg3: Float, _ _arg4: [Float]?, _ _arg5: Float ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public java.awt.BasicStroke(float,int,int,float)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Float, arg1: Int, arg2: Int, arg3: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(FIIF)V", methodCache: &BasicStroke.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Int, _ _arg2: Int, _ _arg3: Float ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.BasicStroke(float,int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: Float, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(FII)V", methodCache: &BasicStroke.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Int, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.BasicStroke(float)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(F)V", methodCache: &BasicStroke.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.BasicStroke()

    private static var new_MethodID_5: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "()V", methodCache: &BasicStroke.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.awt.BasicStroke.equals(java.lang.Object)

    /// public int java.awt.BasicStroke.hashCode()

    /// public java.awt.Shape java.awt.BasicStroke.createStrokedShape(java.awt.Shape)

    private static var createStrokedShape_MethodID_6: jmethodID?

    open func createStrokedShape( arg0: Shape? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createStrokedShape", methodSig: "(Ljava/awt/Shape;)Ljava/awt/Shape;", methodCache: &BasicStroke.createStrokedShape_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func createStrokedShape( _ _arg0: Shape? ) -> Shape! {
        return createStrokedShape( arg0: _arg0 )
    }

    /// private void java.awt.BasicStroke.feedConsumer(sun.dc.path.PathConsumer,java.awt.geom.PathIterator)

    /// public float java.awt.BasicStroke.getLineWidth()

    private static var getLineWidth_MethodID_7: jmethodID?

    open func getLineWidth() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getLineWidth", methodSig: "()F", methodCache: &BasicStroke.getLineWidth_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public int java.awt.BasicStroke.getEndCap()

    private static var getEndCap_MethodID_8: jmethodID?

    open func getEndCap() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getEndCap", methodSig: "()I", methodCache: &BasicStroke.getEndCap_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.BasicStroke.getLineJoin()

    private static var getLineJoin_MethodID_9: jmethodID?

    open func getLineJoin() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getLineJoin", methodSig: "()I", methodCache: &BasicStroke.getLineJoin_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public float java.awt.BasicStroke.getMiterLimit()

    private static var getMiterLimit_MethodID_10: jmethodID?

    open func getMiterLimit() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getMiterLimit", methodSig: "()F", methodCache: &BasicStroke.getMiterLimit_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public float[] java.awt.BasicStroke.getDashArray()

    private static var getDashArray_MethodID_11: jmethodID?

    open func getDashArray() -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDashArray", methodSig: "()[F", methodCache: &BasicStroke.getDashArray_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }


    /// public float java.awt.BasicStroke.getDashPhase()

    private static var getDashPhase_MethodID_12: jmethodID?

    open func getDashPhase() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getDashPhase", methodSig: "()F", methodCache: &BasicStroke.getDashPhase_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


}
