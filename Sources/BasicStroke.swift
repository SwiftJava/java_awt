
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.BasicStroke ///

open class BasicStroke: java_swift.JavaObject, Stroke {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BasicStrokeJNIClass: jclass?

    /// public static final int java.awt.BasicStroke.CAP_BUTT

    private static var CAP_BUTT_FieldID: jfieldID?

    public static var CAP_BUTT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CAP_BUTT", fieldType: "I", fieldCache: &CAP_BUTT_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.BasicStroke.CAP_ROUND

    private static var CAP_ROUND_FieldID: jfieldID?

    public static var CAP_ROUND: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CAP_ROUND", fieldType: "I", fieldCache: &CAP_ROUND_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.BasicStroke.CAP_SQUARE

    private static var CAP_SQUARE_FieldID: jfieldID?

    public static var CAP_SQUARE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CAP_SQUARE", fieldType: "I", fieldCache: &CAP_SQUARE_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.BasicStroke.JOIN_BEVEL

    private static var JOIN_BEVEL_FieldID: jfieldID?

    public static var JOIN_BEVEL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JOIN_BEVEL", fieldType: "I", fieldCache: &JOIN_BEVEL_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.BasicStroke.JOIN_MITER

    private static var JOIN_MITER_FieldID: jfieldID?

    public static var JOIN_MITER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JOIN_MITER", fieldType: "I", fieldCache: &JOIN_MITER_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.BasicStroke.JOIN_ROUND

    private static var JOIN_ROUND_FieldID: jfieldID?

    public static var JOIN_ROUND: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "JOIN_ROUND", fieldType: "I", fieldCache: &JOIN_ROUND_FieldID, className: "java/awt/BasicStroke", classCache: &BasicStrokeJNIClass )
            return Int(__value)
        }
    }

    /// int java.awt.BasicStroke.cap

    // Skipping field: true false false false false false 

    /// float[] java.awt.BasicStroke.dash

    // Skipping field: true false false false false false 

    /// float java.awt.BasicStroke.dash_phase

    // Skipping field: true false false false false false 

    /// int java.awt.BasicStroke.join

    // Skipping field: true false false false false false 

    /// float java.awt.BasicStroke.miterlimit

    // Skipping field: true false false false false false 

    /// float java.awt.BasicStroke.width

    // Skipping field: true false false false false false 

    /// public java.awt.BasicStroke()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "()V", methodCache: &BasicStroke.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.BasicStroke(float)

    private static var new_MethodID_2: jmethodID?

    public convenience init( width: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: width )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(F)V", methodCache: &BasicStroke.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _width: Float ) {
        self.init( width: _width )
    }

    /// public java.awt.BasicStroke(float,int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( width: Float, cap: Int, join: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( f: width )
        __args[1] = jvalue( i: jint(cap) )
        __args[2] = jvalue( i: jint(join) )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(FII)V", methodCache: &BasicStroke.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _width: Float, _ _cap: Int, _ _join: Int ) {
        self.init( width: _width, cap: _cap, join: _join )
    }

    /// public java.awt.BasicStroke(float,int,int,float)

    private static var new_MethodID_4: jmethodID?

    public convenience init( width: Float, cap: Int, join: Int, miterlimit: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( f: width )
        __args[1] = jvalue( i: jint(cap) )
        __args[2] = jvalue( i: jint(join) )
        __args[3] = jvalue( f: miterlimit )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(FIIF)V", methodCache: &BasicStroke.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _width: Float, _ _cap: Int, _ _join: Int, _ _miterlimit: Float ) {
        self.init( width: _width, cap: _cap, join: _join, miterlimit: _miterlimit )
    }

    /// public java.awt.BasicStroke(float,int,int,float,float[],float)

    private static var new_MethodID_5: jmethodID?

    public convenience init( width: Float, cap: Int, join: Int, miterlimit: Float, dash: [Float]?, dash_phase: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = jvalue( f: width )
        __args[1] = jvalue( i: jint(cap) )
        __args[2] = jvalue( i: jint(join) )
        __args[3] = jvalue( f: miterlimit )
        __args[4] = JNIType.toJava( value: dash, locals: &__locals )
        __args[5] = jvalue( f: dash_phase )
        let __object = JNIMethod.NewObject( className: "java/awt/BasicStroke", classCache: &BasicStroke.BasicStrokeJNIClass, methodSig: "(FIIF[FF)V", methodCache: &BasicStroke.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _width: Float, _ _cap: Int, _ _join: Int, _ _miterlimit: Float, _ _dash: [Float]?, _ _dash_phase: Float ) {
        self.init( width: _width, cap: _cap, join: _join, miterlimit: _miterlimit, dash: _dash, dash_phase: _dash_phase )
    }

    /// public java.awt.Shape java.awt.BasicStroke.createStrokedShape(java.awt.Shape)

    private static var createStrokedShape_MethodID_6: jmethodID?

    open func createStrokedShape( p: Shape? ) -> Shape! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: p, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createStrokedShape", methodSig: "(Ljava/awt/Shape;)Ljava/awt/Shape;", methodCache: &BasicStroke.createStrokedShape_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func createStrokedShape( _ _p: Shape? ) -> Shape! {
        return createStrokedShape( p: _p )
    }

    /// public boolean java.awt.BasicStroke.equals(java.lang.Object)

    private static var equals_MethodID_7: jmethodID?

    open func equals( obj: java_swift.JavaObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: obj, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &BasicStroke.equals_MethodID_7, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func equals( _ _obj: java_swift.JavaObject? ) -> Bool {
        return equals( obj: _obj )
    }

    /// public float[] java.awt.BasicStroke.getDashArray()

    private static var getDashArray_MethodID_8: jmethodID?

    open func getDashArray() -> [Float]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDashArray", methodSig: "()[F", methodCache: &BasicStroke.getDashArray_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Float].self, from: __return )
    }


    /// public float java.awt.BasicStroke.getDashPhase()

    private static var getDashPhase_MethodID_9: jmethodID?

    open func getDashPhase() -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getDashPhase", methodSig: "()F", methodCache: &BasicStroke.getDashPhase_MethodID_9, args: &__args, locals: &__locals )
        return __return
    }


    /// public int java.awt.BasicStroke.getEndCap()

    private static var getEndCap_MethodID_10: jmethodID?

    open func getEndCap() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getEndCap", methodSig: "()I", methodCache: &BasicStroke.getEndCap_MethodID_10, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public int java.awt.BasicStroke.getLineJoin()

    private static var getLineJoin_MethodID_11: jmethodID?

    open func getLineJoin() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getLineJoin", methodSig: "()I", methodCache: &BasicStroke.getLineJoin_MethodID_11, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public float java.awt.BasicStroke.getLineWidth()

    private static var getLineWidth_MethodID_12: jmethodID?

    open func getLineWidth() -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getLineWidth", methodSig: "()F", methodCache: &BasicStroke.getLineWidth_MethodID_12, args: &__args, locals: &__locals )
        return __return
    }


    /// public float java.awt.BasicStroke.getMiterLimit()

    private static var getMiterLimit_MethodID_13: jmethodID?

    open func getMiterLimit() -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getMiterLimit", methodSig: "()F", methodCache: &BasicStroke.getMiterLimit_MethodID_13, args: &__args, locals: &__locals )
        return __return
    }


    /// public int java.awt.BasicStroke.hashCode()

    // Skipping method: false true false false false 

}

