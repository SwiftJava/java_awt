
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:24 GMT 2016 ///

/// class java.awt.geom.QuadCurve2D ///

open class QuadCurve2D: java_lang.JavaObject, Shape, java_lang.Cloneable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.QuadCurve2D", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var QuadCurve2DJNIClass: jclass?

    /// private static final int java.awt.geom.QuadCurve2D.BELOW

    /// private static final int java.awt.geom.QuadCurve2D.LOWEDGE

    /// private static final int java.awt.geom.QuadCurve2D.INSIDE

    /// private static final int java.awt.geom.QuadCurve2D.HIGHEDGE

    /// private static final int java.awt.geom.QuadCurve2D.ABOVE

    /// protected java.awt.geom.QuadCurve2D()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2D.QuadCurve2DJNIClass, methodSig: "()V", methodCache: &QuadCurve2D.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.lang.Object java.awt.geom.QuadCurve2D.clone()

    private static var clone_MethodID_2: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &QuadCurve2D.clone_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public boolean java.awt.geom.QuadCurve2D.contains(java.awt.geom.Point2D)

    private static var contains_MethodID_3: jmethodID?

    open func contains( arg0: Point2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/geom/Point2D;)Z", methodCache: &QuadCurve2D.contains_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Point2D? ) -> Bool {
        return contains( arg0: _arg0 )
    }

    /// public boolean java.awt.geom.QuadCurve2D.contains(java.awt.geom.Rectangle2D)

    private static var contains_MethodID_4: jmethodID?

    open func contains( arg0: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/geom/Rectangle2D;)Z", methodCache: &QuadCurve2D.contains_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Rectangle2D? ) -> Bool {
        return contains( arg0: _arg0 )
    }

    /// public boolean java.awt.geom.QuadCurve2D.contains(double,double,double,double)

    private static var contains_MethodID_5: jmethodID?

    open func contains( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(DDDD)Z", methodCache: &QuadCurve2D.contains_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public boolean java.awt.geom.QuadCurve2D.contains(double,double)

    private static var contains_MethodID_6: jmethodID?

    open func contains( arg0: Double, arg1: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(DD)Z", methodCache: &QuadCurve2D.contains_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Double, _ _arg1: Double ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.awt.geom.QuadCurve2D.intersects(java.awt.geom.Rectangle2D)

    private static var intersects_MethodID_7: jmethodID?

    open func intersects( arg0: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "intersects", methodSig: "(Ljava/awt/geom/Rectangle2D;)Z", methodCache: &QuadCurve2D.intersects_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func intersects( _ _arg0: Rectangle2D? ) -> Bool {
        return intersects( arg0: _arg0 )
    }

    /// public boolean java.awt.geom.QuadCurve2D.intersects(double,double,double,double)

    private static var intersects_MethodID_8: jmethodID?

    open func intersects( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "intersects", methodSig: "(DDDD)Z", methodCache: &QuadCurve2D.intersects_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func intersects( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) -> Bool {
        return intersects( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// private static int java.awt.geom.QuadCurve2D.getTag(double,double,double)

    /// public java.awt.Rectangle java.awt.geom.QuadCurve2D.getBounds()

    private static var getBounds_MethodID_9: jmethodID?

    open func getBounds() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &QuadCurve2D.getBounds_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


    /// public java.awt.geom.PathIterator java.awt.geom.QuadCurve2D.getPathIterator(java.awt.geom.AffineTransform,double)

    private static var getPathIterator_MethodID_10: jmethodID?

    open func getPathIterator( arg0: AffineTransform?, arg1: Double ) -> PathIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPathIterator", methodSig: "(Ljava/awt/geom/AffineTransform;D)Ljava/awt/geom/PathIterator;", methodCache: &QuadCurve2D.getPathIterator_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PathIteratorForward( javaObject: __return ) : nil
    }

    open func getPathIterator( _ _arg0: AffineTransform?, _ _arg1: Double ) -> PathIterator! {
        return getPathIterator( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.geom.PathIterator java.awt.geom.QuadCurve2D.getPathIterator(java.awt.geom.AffineTransform)

    private static var getPathIterator_MethodID_11: jmethodID?

    open func getPathIterator( arg0: AffineTransform? ) -> PathIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPathIterator", methodSig: "(Ljava/awt/geom/AffineTransform;)Ljava/awt/geom/PathIterator;", methodCache: &QuadCurve2D.getPathIterator_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PathIteratorForward( javaObject: __return ) : nil
    }

    open func getPathIterator( _ _arg0: AffineTransform? ) -> PathIterator! {
        return getPathIterator( arg0: _arg0 )
    }

    /// public abstract double java.awt.geom.QuadCurve2D.getX1()

    private static var getX1_MethodID_12: jmethodID?

    open func getX1() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getX1", methodSig: "()D", methodCache: &QuadCurve2D.getX1_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.QuadCurve2D.getY1()

    private static var getY1_MethodID_13: jmethodID?

    open func getY1() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getY1", methodSig: "()D", methodCache: &QuadCurve2D.getY1_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.QuadCurve2D.getX2()

    private static var getX2_MethodID_14: jmethodID?

    open func getX2() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getX2", methodSig: "()D", methodCache: &QuadCurve2D.getX2_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.QuadCurve2D.getY2()

    private static var getY2_MethodID_15: jmethodID?

    open func getY2() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getY2", methodSig: "()D", methodCache: &QuadCurve2D.getY2_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public static double java.awt.geom.QuadCurve2D.getFlatness(double,double,double,double,double,double)

    private static var getFlatness_MethodID_16: jmethodID?

    open class func getFlatness( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "getFlatness", methodSig: "(DDDDDD)D", methodCache: &getFlatness_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open class func getFlatness( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double ) -> Double {
        return getFlatness( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public double java.awt.geom.QuadCurve2D.getFlatness()

    private static var getFlatness_MethodID_17: jmethodID?

    open func getFlatness() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getFlatness", methodSig: "()D", methodCache: &QuadCurve2D.getFlatness_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public static double java.awt.geom.QuadCurve2D.getFlatness(double[],int)

    private static var getFlatness_MethodID_18: jmethodID?

    open class func getFlatness( arg0: [Double]?, arg1: Int ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "getFlatness", methodSig: "([DI)D", methodCache: &getFlatness_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open class func getFlatness( _ _arg0: [Double]?, _ _arg1: Int ) -> Double {
        return getFlatness( arg0: _arg0, arg1: _arg1 )
    }

    /// public static double java.awt.geom.QuadCurve2D.getFlatnessSq(double,double,double,double,double,double)

    private static var getFlatnessSq_MethodID_19: jmethodID?

    open class func getFlatnessSq( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "getFlatnessSq", methodSig: "(DDDDDD)D", methodCache: &getFlatnessSq_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open class func getFlatnessSq( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double ) -> Double {
        return getFlatnessSq( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public static double java.awt.geom.QuadCurve2D.getFlatnessSq(double[],int)

    private static var getFlatnessSq_MethodID_20: jmethodID?

    open class func getFlatnessSq( arg0: [Double]?, arg1: Int ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "getFlatnessSq", methodSig: "([DI)D", methodCache: &getFlatnessSq_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }

    open class func getFlatnessSq( _ _arg0: [Double]?, _ _arg1: Int ) -> Double {
        return getFlatnessSq( arg0: _arg0, arg1: _arg1 )
    }

    /// public double java.awt.geom.QuadCurve2D.getFlatnessSq()

    private static var getFlatnessSq_MethodID_21: jmethodID?

    open func getFlatnessSq() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getFlatnessSq", methodSig: "()D", methodCache: &QuadCurve2D.getFlatnessSq_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public static void java.awt.geom.QuadCurve2D.subdivide(java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D)

    private static var subdivide_MethodID_22: jmethodID?

    open class func subdivide( arg0: QuadCurve2D?, arg1: QuadCurve2D?, arg2: QuadCurve2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "subdivide", methodSig: "(Ljava/awt/geom/QuadCurve2D;Ljava/awt/geom/QuadCurve2D;Ljava/awt/geom/QuadCurve2D;)V", methodCache: &subdivide_MethodID_22, args: &__args, locals: &__locals )
    }

    open class func subdivide( _ _arg0: QuadCurve2D?, _ _arg1: QuadCurve2D?, _ _arg2: QuadCurve2D? ) {
        subdivide( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.geom.QuadCurve2D.subdivide(java.awt.geom.QuadCurve2D,java.awt.geom.QuadCurve2D)

    private static var subdivide_MethodID_23: jmethodID?

    open func subdivide( arg0: QuadCurve2D?, arg1: QuadCurve2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "subdivide", methodSig: "(Ljava/awt/geom/QuadCurve2D;Ljava/awt/geom/QuadCurve2D;)V", methodCache: &QuadCurve2D.subdivide_MethodID_23, args: &__args, locals: &__locals )
    }

    open func subdivide( _ _arg0: QuadCurve2D?, _ _arg1: QuadCurve2D? ) {
        subdivide( arg0: _arg0, arg1: _arg1 )
    }

    /// public static void java.awt.geom.QuadCurve2D.subdivide(double[],int,double[],int,double[],int)

    private static var subdivide_MethodID_24: jmethodID?

    open class func subdivide( arg0: [Double]?, arg1: Int, arg2: [Double]?, arg3: Int, arg4: [Double]?, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "subdivide", methodSig: "([DI[DI[DI)V", methodCache: &subdivide_MethodID_24, args: &__args, locals: &__locals )
    }

    open class func subdivide( _ _arg0: [Double]?, _ _arg1: Int, _ _arg2: [Double]?, _ _arg3: Int, _ _arg4: [Double]?, _ _arg5: Int ) {
        subdivide( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public abstract java.awt.geom.Point2D java.awt.geom.QuadCurve2D.getP1()

    private static var getP1_MethodID_25: jmethodID?

    open func getP1() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getP1", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &QuadCurve2D.getP1_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public abstract java.awt.geom.Point2D java.awt.geom.QuadCurve2D.getP2()

    private static var getP2_MethodID_26: jmethodID?

    open func getP2() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getP2", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &QuadCurve2D.getP2_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public abstract double java.awt.geom.QuadCurve2D.getCtrlX()

    private static var getCtrlX_MethodID_27: jmethodID?

    open func getCtrlX() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getCtrlX", methodSig: "()D", methodCache: &QuadCurve2D.getCtrlX_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.QuadCurve2D.getCtrlY()

    private static var getCtrlY_MethodID_28: jmethodID?

    open func getCtrlY() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getCtrlY", methodSig: "()D", methodCache: &QuadCurve2D.getCtrlY_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: Double(), from: __return )
    }


    /// public abstract java.awt.geom.Point2D java.awt.geom.QuadCurve2D.getCtrlPt()

    private static var getCtrlPt_MethodID_29: jmethodID?

    open func getCtrlPt() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCtrlPt", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &QuadCurve2D.getCtrlPt_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public void java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)

    private static var setCurve_MethodID_30: jmethodID?

    open func setCurve( arg0: Point2D?, arg1: Point2D?, arg2: Point2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)V", methodCache: &QuadCurve2D.setCurve_MethodID_30, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _arg0: Point2D?, _ _arg1: Point2D?, _ _arg2: Point2D? ) {
        setCurve( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.Point2D[],int)

    private static var setCurve_MethodID_31: jmethodID?

    open func setCurve( arg0: [Point2D]?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "([Ljava/awt/geom/Point2D;I)V", methodCache: &QuadCurve2D.setCurve_MethodID_31, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _arg0: [Point2D]?, _ _arg1: Int ) {
        setCurve( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.geom.QuadCurve2D.setCurve(java.awt.geom.QuadCurve2D)

    private static var setCurve_MethodID_32: jmethodID?

    open func setCurve( arg0: QuadCurve2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "(Ljava/awt/geom/QuadCurve2D;)V", methodCache: &QuadCurve2D.setCurve_MethodID_32, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _arg0: QuadCurve2D? ) {
        setCurve( arg0: _arg0 )
    }

    /// public void java.awt.geom.QuadCurve2D.setCurve(double[],int)

    private static var setCurve_MethodID_33: jmethodID?

    open func setCurve( arg0: [Double]?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "([DI)V", methodCache: &QuadCurve2D.setCurve_MethodID_33, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _arg0: [Double]?, _ _arg1: Int ) {
        setCurve( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.geom.QuadCurve2D.setCurve(double,double,double,double,double,double)

    private static var setCurve_MethodID_34: jmethodID?

    open func setCurve( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "(DDDDDD)V", methodCache: &QuadCurve2D.setCurve_MethodID_34, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double ) {
        setCurve( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public static int java.awt.geom.QuadCurve2D.solveQuadratic(double[],double[])

    private static var solveQuadratic_MethodID_35: jmethodID?

    open class func solveQuadratic( arg0: [Double]?, arg1: [Double]? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "solveQuadratic", methodSig: "([D[D)I", methodCache: &solveQuadratic_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func solveQuadratic( _ _arg0: [Double]?, _ _arg1: [Double]? ) -> Int {
        return solveQuadratic( arg0: _arg0, arg1: _arg1 )
    }

    /// public static int java.awt.geom.QuadCurve2D.solveQuadratic(double[])

    private static var solveQuadratic_MethodID_36: jmethodID?

    open class func solveQuadratic( arg0: [Double]? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/awt/geom/QuadCurve2D", classCache: &QuadCurve2DJNIClass, methodName: "solveQuadratic", methodSig: "([D)I", methodCache: &solveQuadratic_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func solveQuadratic( _ _arg0: [Double]? ) -> Int {
        return solveQuadratic( arg0: _arg0 )
    }

    /// private static void java.awt.geom.QuadCurve2D.fillEqn(double[],double,double,double,double)

    /// private static int java.awt.geom.QuadCurve2D.evalQuadratic(double[],int,boolean,boolean,double[],double,double,double)

    /// private static boolean java.awt.geom.QuadCurve2D.inwards(int,int,int)

    /// In declared protocol but not defined.. ///

    /// public abstract java.awt.geom.Rectangle2D java.awt.Shape.getBounds2D()

    private static var getBounds2D_MethodID_37: jmethodID?

    open func getBounds2D() -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds2D", methodSig: "()Ljava/awt/geom/Rectangle2D;", methodCache: &QuadCurve2D.getBounds2D_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }


}
