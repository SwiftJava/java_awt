
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.geom.CubicCurve2D ///

open class CubicCurve2D: java_swift.JavaObject, Shape, java_lang.Cloneable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.CubicCurve2D", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CubicCurve2DJNIClass: jclass?

    /// protected java.awt.geom.CubicCurve2D()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2D.CubicCurve2DJNIClass, methodSig: "()V", methodCache: &CubicCurve2D.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.lang.Object java.awt.geom.CubicCurve2D.clone()

    private static var clone_MethodID_2: jmethodID?

    override open func clone() -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &CubicCurve2D.clone_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public boolean java.awt.geom.CubicCurve2D.contains(java.awt.geom.Rectangle2D)

    private static var contains_MethodID_3: jmethodID?

    open func contains( r: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: r != nil ? r! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/geom/Rectangle2D;)Z", methodCache: &CubicCurve2D.contains_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func contains( _ _r: Rectangle2D? ) -> Bool {
        return contains( r: _r )
    }

    /// public boolean java.awt.geom.CubicCurve2D.contains(java.awt.geom.Point2D)

    private static var contains_MethodID_4: jmethodID?

    open func contains( p: Point2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: p != nil ? p! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/geom/Point2D;)Z", methodCache: &CubicCurve2D.contains_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func contains( _ _p: Point2D? ) -> Bool {
        return contains( p: _p )
    }

    /// public boolean java.awt.geom.CubicCurve2D.contains(double,double)

    private static var contains_MethodID_5: jmethodID?

    open func contains( x: Double, y: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(DD)Z", methodCache: &CubicCurve2D.contains_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func contains( _ _x: Double, _ _y: Double ) -> Bool {
        return contains( x: _x, y: _y )
    }

    /// public boolean java.awt.geom.CubicCurve2D.contains(double,double,double,double)

    private static var contains_MethodID_6: jmethodID?

    open func contains( x: Double, y: Double, w: Double, h: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(DDDD)Z", methodCache: &CubicCurve2D.contains_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func contains( _ _x: Double, _ _y: Double, _ _w: Double, _ _h: Double ) -> Bool {
        return contains( x: _x, y: _y, w: _w, h: _h )
    }

    /// public boolean java.awt.geom.CubicCurve2D.intersects(double,double,double,double)

    private static var intersects_MethodID_7: jmethodID?

    open func intersects( x: Double, y: Double, w: Double, h: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "intersects", methodSig: "(DDDD)Z", methodCache: &CubicCurve2D.intersects_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func intersects( _ _x: Double, _ _y: Double, _ _w: Double, _ _h: Double ) -> Bool {
        return intersects( x: _x, y: _y, w: _w, h: _h )
    }

    /// public boolean java.awt.geom.CubicCurve2D.intersects(java.awt.geom.Rectangle2D)

    private static var intersects_MethodID_8: jmethodID?

    open func intersects( r: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: r != nil ? r! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "intersects", methodSig: "(Ljava/awt/geom/Rectangle2D;)Z", methodCache: &CubicCurve2D.intersects_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func intersects( _ _r: Rectangle2D? ) -> Bool {
        return intersects( r: _r )
    }

    /// public abstract double java.awt.geom.CubicCurve2D.getX1()

    private static var getX1_MethodID_9: jmethodID?

    open func getX1() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getX1", methodSig: "()D", methodCache: &CubicCurve2D.getX1_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.CubicCurve2D.getY1()

    private static var getY1_MethodID_10: jmethodID?

    open func getY1() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getY1", methodSig: "()D", methodCache: &CubicCurve2D.getY1_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.CubicCurve2D.getX2()

    private static var getX2_MethodID_11: jmethodID?

    open func getX2() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getX2", methodSig: "()D", methodCache: &CubicCurve2D.getX2_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.CubicCurve2D.getY2()

    private static var getY2_MethodID_12: jmethodID?

    open func getY2() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getY2", methodSig: "()D", methodCache: &CubicCurve2D.getY2_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public java.awt.Rectangle java.awt.geom.CubicCurve2D.getBounds()

    private static var getBounds_MethodID_13: jmethodID?

    open func getBounds() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &CubicCurve2D.getBounds_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


    /// public java.awt.geom.PathIterator java.awt.geom.CubicCurve2D.getPathIterator(java.awt.geom.AffineTransform)

    private static var getPathIterator_MethodID_14: jmethodID?

    open func getPathIterator( at: AffineTransform? ) -> PathIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: at != nil ? at! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPathIterator", methodSig: "(Ljava/awt/geom/AffineTransform;)Ljava/awt/geom/PathIterator;", methodCache: &CubicCurve2D.getPathIterator_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PathIteratorForward( javaObject: __return ) : nil
    }

    open func getPathIterator( _ _at: AffineTransform? ) -> PathIterator! {
        return getPathIterator( at: _at )
    }

    /// public java.awt.geom.PathIterator java.awt.geom.CubicCurve2D.getPathIterator(java.awt.geom.AffineTransform,double)

    private static var getPathIterator_MethodID_15: jmethodID?

    open func getPathIterator( at: AffineTransform?, flatness: Double ) -> PathIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: at != nil ? at! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: flatness, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPathIterator", methodSig: "(Ljava/awt/geom/AffineTransform;D)Ljava/awt/geom/PathIterator;", methodCache: &CubicCurve2D.getPathIterator_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PathIteratorForward( javaObject: __return ) : nil
    }

    open func getPathIterator( _ _at: AffineTransform?, _ _flatness: Double ) -> PathIterator! {
        return getPathIterator( at: _at, flatness: _flatness )
    }

    /// private static double java.awt.geom.CubicCurve2D.getRootUpperBound(double[])

    /// private int java.awt.geom.CubicCurve2D.rectCrossings(double,double,double,double)

    /// public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getP1()

    private static var getP1_MethodID_16: jmethodID?

    open func getP1() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getP1", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &CubicCurve2D.getP1_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public abstract double java.awt.geom.CubicCurve2D.getCtrlX1()

    private static var getCtrlX1_MethodID_17: jmethodID?

    open func getCtrlX1() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getCtrlX1", methodSig: "()D", methodCache: &CubicCurve2D.getCtrlX1_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.CubicCurve2D.getCtrlY1()

    private static var getCtrlY1_MethodID_18: jmethodID?

    open func getCtrlY1() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getCtrlY1", methodSig: "()D", methodCache: &CubicCurve2D.getCtrlY1_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getCtrlP1()

    private static var getCtrlP1_MethodID_19: jmethodID?

    open func getCtrlP1() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCtrlP1", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &CubicCurve2D.getCtrlP1_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public abstract double java.awt.geom.CubicCurve2D.getCtrlX2()

    private static var getCtrlX2_MethodID_20: jmethodID?

    open func getCtrlX2() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getCtrlX2", methodSig: "()D", methodCache: &CubicCurve2D.getCtrlX2_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract double java.awt.geom.CubicCurve2D.getCtrlY2()

    private static var getCtrlY2_MethodID_21: jmethodID?

    open func getCtrlY2() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getCtrlY2", methodSig: "()D", methodCache: &CubicCurve2D.getCtrlY2_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getCtrlP2()

    private static var getCtrlP2_MethodID_22: jmethodID?

    open func getCtrlP2() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCtrlP2", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &CubicCurve2D.getCtrlP2_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public abstract java.awt.geom.Point2D java.awt.geom.CubicCurve2D.getP2()

    private static var getP2_MethodID_23: jmethodID?

    open func getP2() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getP2", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &CubicCurve2D.getP2_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.geom.CubicCurve2D.setCurve(double,double,double,double,double,double,double,double)

    private static var setCurve_MethodID_24: jmethodID?

    open func setCurve( x1: Double, y1: Double, ctrlx1: Double, ctrly1: Double, ctrlx2: Double, ctrly2: Double, x2: Double, y2: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: ctrlx1, locals: &__locals )
        __args[3] = JNIType.toJava( value: ctrly1, locals: &__locals )
        __args[4] = JNIType.toJava( value: ctrlx2, locals: &__locals )
        __args[5] = JNIType.toJava( value: ctrly2, locals: &__locals )
        __args[6] = JNIType.toJava( value: x2, locals: &__locals )
        __args[7] = JNIType.toJava( value: y2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "(DDDDDDDD)V", methodCache: &CubicCurve2D.setCurve_MethodID_24, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _x1: Double, _ _y1: Double, _ _ctrlx1: Double, _ _ctrly1: Double, _ _ctrlx2: Double, _ _ctrly2: Double, _ _x2: Double, _ _y2: Double ) {
        setCurve( x1: _x1, y1: _y1, ctrlx1: _ctrlx1, ctrly1: _ctrly1, ctrlx2: _ctrlx2, ctrly2: _ctrly2, x2: _x2, y2: _y2 )
    }

    /// public void java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D,java.awt.geom.Point2D)

    private static var setCurve_MethodID_25: jmethodID?

    open func setCurve( p1: Point2D?, cp1: Point2D?, cp2: Point2D?, p2: Point2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: p1 != nil ? p1! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: cp1 != nil ? cp1! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: cp2 != nil ? cp2! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: p2 != nil ? p2! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "(Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;Ljava/awt/geom/Point2D;)V", methodCache: &CubicCurve2D.setCurve_MethodID_25, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _p1: Point2D?, _ _cp1: Point2D?, _ _cp2: Point2D?, _ _p2: Point2D? ) {
        setCurve( p1: _p1, cp1: _cp1, cp2: _cp2, p2: _p2 )
    }

    /// public void java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.CubicCurve2D)

    private static var setCurve_MethodID_26: jmethodID?

    open func setCurve( c: CubicCurve2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "(Ljava/awt/geom/CubicCurve2D;)V", methodCache: &CubicCurve2D.setCurve_MethodID_26, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _c: CubicCurve2D? ) {
        setCurve( c: _c )
    }

    /// public void java.awt.geom.CubicCurve2D.setCurve(java.awt.geom.Point2D[],int)

    private static var setCurve_MethodID_27: jmethodID?

    open func setCurve( pts: [Point2D]?, offset: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: pts, locals: &__locals )
        __args[1] = JNIType.toJava( value: offset, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "([Ljava/awt/geom/Point2D;I)V", methodCache: &CubicCurve2D.setCurve_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _pts: [Point2D]?, _ _offset: Int ) {
        setCurve( pts: _pts, offset: _offset )
    }

    /// public void java.awt.geom.CubicCurve2D.setCurve(double[],int)

    private static var setCurve_MethodID_28: jmethodID?

    open func setCurve( coords: [Double]?, offset: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: coords, locals: &__locals )
        __args[1] = JNIType.toJava( value: offset, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCurve", methodSig: "([DI)V", methodCache: &CubicCurve2D.setCurve_MethodID_28, args: &__args, locals: &__locals )
    }

    open func setCurve( _ _coords: [Double]?, _ _offset: Int ) {
        setCurve( coords: _coords, offset: _offset )
    }

    /// public static double java.awt.geom.CubicCurve2D.getFlatnessSq(double[],int)

    private static var getFlatnessSq_MethodID_29: jmethodID?

    open class func getFlatnessSq( coords: [Double]?, offset: Int ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: coords, locals: &__locals )
        __args[1] = JNIType.toJava( value: offset, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "getFlatnessSq", methodSig: "([DI)D", methodCache: &getFlatnessSq_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open class func getFlatnessSq( _ _coords: [Double]?, _ _offset: Int ) -> Double {
        return getFlatnessSq( coords: _coords, offset: _offset )
    }

    /// public static double java.awt.geom.CubicCurve2D.getFlatnessSq(double,double,double,double,double,double,double,double)

    private static var getFlatnessSq_MethodID_30: jmethodID?

    open class func getFlatnessSq( x1: Double, y1: Double, ctrlx1: Double, ctrly1: Double, ctrlx2: Double, ctrly2: Double, x2: Double, y2: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: ctrlx1, locals: &__locals )
        __args[3] = JNIType.toJava( value: ctrly1, locals: &__locals )
        __args[4] = JNIType.toJava( value: ctrlx2, locals: &__locals )
        __args[5] = JNIType.toJava( value: ctrly2, locals: &__locals )
        __args[6] = JNIType.toJava( value: x2, locals: &__locals )
        __args[7] = JNIType.toJava( value: y2, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "getFlatnessSq", methodSig: "(DDDDDDDD)D", methodCache: &getFlatnessSq_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open class func getFlatnessSq( _ _x1: Double, _ _y1: Double, _ _ctrlx1: Double, _ _ctrly1: Double, _ _ctrlx2: Double, _ _ctrly2: Double, _ _x2: Double, _ _y2: Double ) -> Double {
        return getFlatnessSq( x1: _x1, y1: _y1, ctrlx1: _ctrlx1, ctrly1: _ctrly1, ctrlx2: _ctrlx2, ctrly2: _ctrly2, x2: _x2, y2: _y2 )
    }

    /// public double java.awt.geom.CubicCurve2D.getFlatnessSq()

    private static var getFlatnessSq_MethodID_31: jmethodID?

    open func getFlatnessSq() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getFlatnessSq", methodSig: "()D", methodCache: &CubicCurve2D.getFlatnessSq_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public static double java.awt.geom.CubicCurve2D.getFlatness(double,double,double,double,double,double,double,double)

    private static var getFlatness_MethodID_32: jmethodID?

    open class func getFlatness( x1: Double, y1: Double, ctrlx1: Double, ctrly1: Double, ctrlx2: Double, ctrly2: Double, x2: Double, y2: Double ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: ctrlx1, locals: &__locals )
        __args[3] = JNIType.toJava( value: ctrly1, locals: &__locals )
        __args[4] = JNIType.toJava( value: ctrlx2, locals: &__locals )
        __args[5] = JNIType.toJava( value: ctrly2, locals: &__locals )
        __args[6] = JNIType.toJava( value: x2, locals: &__locals )
        __args[7] = JNIType.toJava( value: y2, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "getFlatness", methodSig: "(DDDDDDDD)D", methodCache: &getFlatness_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open class func getFlatness( _ _x1: Double, _ _y1: Double, _ _ctrlx1: Double, _ _ctrly1: Double, _ _ctrlx2: Double, _ _ctrly2: Double, _ _x2: Double, _ _y2: Double ) -> Double {
        return getFlatness( x1: _x1, y1: _y1, ctrlx1: _ctrlx1, ctrly1: _ctrly1, ctrlx2: _ctrlx2, ctrly2: _ctrly2, x2: _x2, y2: _y2 )
    }

    /// public double java.awt.geom.CubicCurve2D.getFlatness()

    private static var getFlatness_MethodID_33: jmethodID?

    open func getFlatness() -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getFlatness", methodSig: "()D", methodCache: &CubicCurve2D.getFlatness_MethodID_33, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }


    /// public static double java.awt.geom.CubicCurve2D.getFlatness(double[],int)

    private static var getFlatness_MethodID_34: jmethodID?

    open class func getFlatness( coords: [Double]?, offset: Int ) -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: coords, locals: &__locals )
        __args[1] = JNIType.toJava( value: offset, locals: &__locals )
        let __return = JNIMethod.CallStaticDoubleMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "getFlatness", methodSig: "([DI)D", methodCache: &getFlatness_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Double(), from: __return )
    }

    open class func getFlatness( _ _coords: [Double]?, _ _offset: Int ) -> Double {
        return getFlatness( coords: _coords, offset: _offset )
    }

    /// public static void java.awt.geom.CubicCurve2D.subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)

    private static var subdivide_MethodID_35: jmethodID?

    open class func subdivide( src: CubicCurve2D?, left: CubicCurve2D?, right: CubicCurve2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: src != nil ? src! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: left != nil ? left! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: right != nil ? right! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "subdivide", methodSig: "(Ljava/awt/geom/CubicCurve2D;Ljava/awt/geom/CubicCurve2D;Ljava/awt/geom/CubicCurve2D;)V", methodCache: &subdivide_MethodID_35, args: &__args, locals: &__locals )
    }

    open class func subdivide( _ _src: CubicCurve2D?, _ _left: CubicCurve2D?, _ _right: CubicCurve2D? ) {
        subdivide( src: _src, left: _left, right: _right )
    }

    /// public void java.awt.geom.CubicCurve2D.subdivide(java.awt.geom.CubicCurve2D,java.awt.geom.CubicCurve2D)

    private static var subdivide_MethodID_36: jmethodID?

    open func subdivide( left: CubicCurve2D?, right: CubicCurve2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: left != nil ? left! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: right != nil ? right! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "subdivide", methodSig: "(Ljava/awt/geom/CubicCurve2D;Ljava/awt/geom/CubicCurve2D;)V", methodCache: &CubicCurve2D.subdivide_MethodID_36, args: &__args, locals: &__locals )
    }

    open func subdivide( _ _left: CubicCurve2D?, _ _right: CubicCurve2D? ) {
        subdivide( left: _left, right: _right )
    }

    /// public static void java.awt.geom.CubicCurve2D.subdivide(double[],int,double[],int,double[],int)

    private static var subdivide_MethodID_37: jmethodID?

    open class func subdivide( src: [Double]?, srcoff: Int, left: [Double]?, leftoff: Int, right: [Double]?, rightoff: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: src, locals: &__locals )
        __args[1] = JNIType.toJava( value: srcoff, locals: &__locals )
        __args[2] = JNIType.toJava( value: left, locals: &__locals )
        __args[3] = JNIType.toJava( value: leftoff, locals: &__locals )
        __args[4] = JNIType.toJava( value: right, locals: &__locals )
        __args[5] = JNIType.toJava( value: rightoff, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "subdivide", methodSig: "([DI[DI[DI)V", methodCache: &subdivide_MethodID_37, args: &__args, locals: &__locals )
    }

    open class func subdivide( _ _src: [Double]?, _ _srcoff: Int, _ _left: [Double]?, _ _leftoff: Int, _ _right: [Double]?, _ _rightoff: Int ) {
        subdivide( src: _src, srcoff: _srcoff, left: _left, leftoff: _leftoff, right: _right, rightoff: _rightoff )
    }

    /// public static int java.awt.geom.CubicCurve2D.solveCubic(double[],double[])

    private static var solveCubic_MethodID_38: jmethodID?

    open class func solveCubic( eqn: [Double]?, res: [Double]? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: eqn, locals: &__locals )
        __args[1] = JNIType.toJava( value: res, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "solveCubic", methodSig: "([D[D)I", methodCache: &solveCubic_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open class func solveCubic( _ _eqn: [Double]?, _ _res: [Double]? ) -> Int {
        return solveCubic( eqn: _eqn, res: _res )
    }

    /// public static int java.awt.geom.CubicCurve2D.solveCubic(double[])

    private static var solveCubic_MethodID_39: jmethodID?

    open class func solveCubic( eqn: [Double]? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: eqn, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/awt/geom/CubicCurve2D", classCache: &CubicCurve2DJNIClass, methodName: "solveCubic", methodSig: "([D)I", methodCache: &solveCubic_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    open class func solveCubic( _ _eqn: [Double]? ) -> Int {
        return solveCubic( eqn: _eqn )
    }

    /// private static int java.awt.geom.CubicCurve2D.fixRoots(double[],double[],int)

    /// private static double java.awt.geom.CubicCurve2D.refineRootWithHint(double[],double,double,double)

    /// private static double java.awt.geom.CubicCurve2D.bisectRootWithHint(double[],double,double,double)

    /// private static double java.awt.geom.CubicCurve2D.bisectRoot(double[],double,double)

    /// private static boolean java.awt.geom.CubicCurve2D.inInterval(double,double,double)

    /// private static boolean java.awt.geom.CubicCurve2D.within(double,double,double)

    /// private static boolean java.awt.geom.CubicCurve2D.iszero(double,double)

    /// private static boolean java.awt.geom.CubicCurve2D.oppositeSigns(double,double)

    /// private static double java.awt.geom.CubicCurve2D.solveEqn(double[],int,double)

    /// In declared protocol but not defined.. ///

    /// public abstract java.awt.geom.Rectangle2D java.awt.Shape.getBounds2D()

    private static var getBounds2D_MethodID_40: jmethodID?

    open func getBounds2D() -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds2D", methodSig: "()Ljava/awt/geom/Rectangle2D;", methodCache: &CubicCurve2D.getBounds2D_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }


}

