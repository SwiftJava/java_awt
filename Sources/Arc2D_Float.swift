
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.geom.Arc2D$Float ///

open class Arc2D_Float: Arc2D, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.Arc2D$Float", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Arc2D_FloatJNIClass: jclass?

    /// public float java.awt.geom.Arc2D$Float.x

    private static var x_FieldID: jfieldID?

    open var x: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "x", fieldType: "F", fieldCache: &Arc2D_Float.x_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "x", fieldType: "F", fieldCache: &Arc2D_Float.x_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.Arc2D$Float.y

    private static var y_FieldID: jfieldID?

    open var y: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "y", fieldType: "F", fieldCache: &Arc2D_Float.y_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "y", fieldType: "F", fieldCache: &Arc2D_Float.y_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.Arc2D$Float.width

    private static var width_FieldID: jfieldID?

    open var width: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "width", fieldType: "F", fieldCache: &Arc2D_Float.width_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "width", fieldType: "F", fieldCache: &Arc2D_Float.width_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.Arc2D$Float.height

    private static var height_FieldID: jfieldID?

    open var height: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "height", fieldType: "F", fieldCache: &Arc2D_Float.height_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "height", fieldType: "F", fieldCache: &Arc2D_Float.height_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.Arc2D$Float.start

    private static var start_FieldID: jfieldID?

    open var start: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "start", fieldType: "F", fieldCache: &Arc2D_Float.start_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "start", fieldType: "F", fieldCache: &Arc2D_Float.start_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// public float java.awt.geom.Arc2D$Float.extent

    private static var extent_FieldID: jfieldID?

    open var extent: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "extent", fieldType: "F", fieldCache: &Arc2D_Float.extent_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "extent", fieldType: "F", fieldCache: &Arc2D_Float.extent_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// private static final long java.awt.geom.Arc2D$Float.serialVersionUID

    /// public static final int java.awt.geom.Arc2D.OPEN

    /// public static final int java.awt.geom.Arc2D.CHORD

    /// public static final int java.awt.geom.Arc2D.PIE

    /// private int java.awt.geom.Arc2D.type

    /// public java.awt.geom.Arc2D$Float(java.awt.geom.Rectangle2D,float,float,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( ellipseBounds: Rectangle2D?, start: Float, extent: Float, type: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: ellipseBounds, locals: &__locals )
        __args[1] = JNIType.toJava( value: start, locals: &__locals )
        __args[2] = JNIType.toJava( value: extent, locals: &__locals )
        __args[3] = JNIType.toJava( value: type, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Arc2D$Float", classCache: &Arc2D_Float.Arc2D_FloatJNIClass, methodSig: "(Ljava/awt/geom/Rectangle2D;FFI)V", methodCache: &Arc2D_Float.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _ellipseBounds: Rectangle2D?, _ _start: Float, _ _extent: Float, _ _type: Int ) {
        self.init( ellipseBounds: _ellipseBounds, start: _start, extent: _extent, type: _type )
    }

    /// public java.awt.geom.Arc2D$Float(float,float,float,float,float,float,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( x: Float, y: Float, w: Float, h: Float, start: Float, extent: Float, type: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        __args[4] = JNIType.toJava( value: start, locals: &__locals )
        __args[5] = JNIType.toJava( value: extent, locals: &__locals )
        __args[6] = JNIType.toJava( value: type, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Arc2D$Float", classCache: &Arc2D_Float.Arc2D_FloatJNIClass, methodSig: "(FFFFFFI)V", methodCache: &Arc2D_Float.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _x: Float, _ _y: Float, _ _w: Float, _ _h: Float, _ _start: Float, _ _extent: Float, _ _type: Int ) {
        self.init( x: _x, y: _y, w: _w, h: _h, start: _start, extent: _extent, type: _type )
    }

    /// public java.awt.geom.Arc2D$Float(int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( type: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Arc2D$Float", classCache: &Arc2D_Float.Arc2D_FloatJNIClass, methodSig: "(I)V", methodCache: &Arc2D_Float.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _type: Int ) {
        self.init( type: _type )
    }

    /// public java.awt.geom.Arc2D$Float()

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Arc2D$Float", classCache: &Arc2D_Float.Arc2D_FloatJNIClass, methodSig: "()V", methodCache: &Arc2D_Float.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public boolean java.awt.geom.Arc2D$Float.isEmpty()

    /// private void java.awt.geom.Arc2D$Float.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// private void java.awt.geom.Arc2D$Float.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public double java.awt.geom.Arc2D$Float.getX()

    /// public double java.awt.geom.Arc2D$Float.getY()

    /// public double java.awt.geom.Arc2D$Float.getWidth()

    /// public double java.awt.geom.Arc2D$Float.getHeight()

    /// public double java.awt.geom.Arc2D$Float.getAngleStart()

    /// public double java.awt.geom.Arc2D$Float.getAngleExtent()

    /// public void java.awt.geom.Arc2D$Float.setArc(double,double,double,double,double,double,int)

    /// public void java.awt.geom.Arc2D$Float.setAngleStart(double)

    /// public void java.awt.geom.Arc2D$Float.setAngleExtent(double)

    /// protected java.awt.geom.Rectangle2D java.awt.geom.Arc2D$Float.makeBounds(double,double,double,double)

    private static var makeBounds_MethodID_5: jmethodID?

    override open func makeBounds( x: Double, y: Double, w: Double, h: Double ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        __args[2] = JNIType.toJava( value: w, locals: &__locals )
        __args[3] = JNIType.toJava( value: h, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "makeBounds", methodSig: "(DDDD)Ljava/awt/geom/Rectangle2D;", methodCache: &Arc2D_Float.makeBounds_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    override open func makeBounds( _ _x: Double, _ _y: Double, _ _w: Double, _ _h: Double ) -> Rectangle2D! {
        return makeBounds( x: _x, y: _y, w: _w, h: _h )
    }

}

