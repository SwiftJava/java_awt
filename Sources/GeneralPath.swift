
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.geom.GeneralPath ///

open class GeneralPath: Path2D_Float {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var GeneralPathJNIClass: jclass?

    /// private static final long java.awt.geom.GeneralPath.serialVersionUID

    /// static final boolean java.awt.geom.Path2D$Float.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// private static final long java.awt.geom.Path2D$Float.serialVersionUID

    /// transient float[] java.awt.geom.Path2D$Float.floatCoords

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.geom.Path2D.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// static final int java.awt.geom.Path2D.EXPAND_MAX

    // Skipping field: true false false false false false 

    /// static final int java.awt.geom.Path2D.EXPAND_MAX_COORDS

    // Skipping field: true false false false false false 

    /// static final int java.awt.geom.Path2D.EXPAND_MIN

    // Skipping field: true false false false false false 

    /// static final int java.awt.geom.Path2D.INIT_SIZE

    // Skipping field: true false false false false false 

    /// private static final byte java.awt.geom.Path2D.SEG_CLOSE

    /// private static final byte java.awt.geom.Path2D.SEG_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SEG_LINETO

    /// private static final byte java.awt.geom.Path2D.SEG_MOVETO

    /// private static final byte java.awt.geom.Path2D.SEG_QUADTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_PATH_END

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_CLOSE

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_LINETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_MOVETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_QUADTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_LINETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_MOVETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_QUADTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_STORAGE_DBL_ARRAY

    /// private static final byte java.awt.geom.Path2D.SERIAL_STORAGE_FLT_ARRAY

    /// public static final int java.awt.geom.Path2D.WIND_EVEN_ODD

    // Skipping field: false true false false false false 

    /// public static final int java.awt.geom.Path2D.WIND_NON_ZERO

    // Skipping field: false true false false false false 

    /// transient int java.awt.geom.Path2D.numCoords

    // Skipping field: true false false false false false 

    /// transient int java.awt.geom.Path2D.numTypes

    // Skipping field: true false false false false false 

    /// transient byte[] java.awt.geom.Path2D.pointTypes

    // Skipping field: true false false false false false 

    /// transient int java.awt.geom.Path2D.windingRule

    // Skipping field: true false false false false false 

    /// public java.awt.geom.GeneralPath()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/GeneralPath", classCache: &GeneralPath.GeneralPathJNIClass, methodSig: "()V", methodCache: &GeneralPath.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.geom.GeneralPath(int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( rule: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(rule) )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/GeneralPath", classCache: &GeneralPath.GeneralPathJNIClass, methodSig: "(I)V", methodCache: &GeneralPath.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _rule: Int ) {
        self.init( rule: _rule )
    }

    /// public java.awt.geom.GeneralPath(int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( rule: Int, initialCapacity: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(rule) )
        __args[1] = jvalue( i: jint(initialCapacity) )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/GeneralPath", classCache: &GeneralPath.GeneralPathJNIClass, methodSig: "(II)V", methodCache: &GeneralPath.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _rule: Int, _ _initialCapacity: Int ) {
        self.init( rule: _rule, initialCapacity: _initialCapacity )
    }

    /// java.awt.geom.GeneralPath(int,byte[],int,float[],int)

    // Skipping init: true false false 

    /// public java.awt.geom.GeneralPath(java.awt.Shape)

    private static var new_MethodID_4: jmethodID?

    public convenience init( s: Shape? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/GeneralPath", classCache: &GeneralPath.GeneralPathJNIClass, methodSig: "(Ljava/awt/Shape;)V", methodCache: &GeneralPath.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _s: Shape? ) {
        self.init( s: _s )
    }

}

