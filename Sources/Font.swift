
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:59 GMT 2016 ///

/// class java.awt.Font ///

open class Font: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.Font", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FontJNIClass: jclass?

    /// private java.util.Hashtable java.awt.Font.fRequestedAttributes

    /// public static final java.lang.String java.awt.Font.DIALOG

    private static var DIALOG_FieldID: jfieldID?

    open static var DIALOG: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DIALOG", fieldType: "Ljava/lang/String;", fieldCache: &DIALOG_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: String(), from: __value )
        }
    }

    /// public static final java.lang.String java.awt.Font.DIALOG_INPUT

    private static var DIALOG_INPUT_FieldID: jfieldID?

    open static var DIALOG_INPUT: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DIALOG_INPUT", fieldType: "Ljava/lang/String;", fieldCache: &DIALOG_INPUT_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: String(), from: __value )
        }
    }

    /// public static final java.lang.String java.awt.Font.SANS_SERIF

    private static var SANS_SERIF_FieldID: jfieldID?

    open static var SANS_SERIF: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SANS_SERIF", fieldType: "Ljava/lang/String;", fieldCache: &SANS_SERIF_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: String(), from: __value )
        }
    }

    /// public static final java.lang.String java.awt.Font.SERIF

    private static var SERIF_FieldID: jfieldID?

    open static var SERIF: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SERIF", fieldType: "Ljava/lang/String;", fieldCache: &SERIF_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: String(), from: __value )
        }
    }

    /// public static final java.lang.String java.awt.Font.MONOSPACED

    private static var MONOSPACED_FieldID: jfieldID?

    open static var MONOSPACED: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "MONOSPACED", fieldType: "Ljava/lang/String;", fieldCache: &MONOSPACED_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: String(), from: __value )
        }
    }

    /// public static final int java.awt.Font.PLAIN

    private static var PLAIN_FieldID: jfieldID?

    open static var PLAIN: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PLAIN", fieldType: "I", fieldCache: &PLAIN_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.BOLD

    private static var BOLD_FieldID: jfieldID?

    open static var BOLD: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BOLD", fieldType: "I", fieldCache: &BOLD_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.ITALIC

    private static var ITALIC_FieldID: jfieldID?

    open static var ITALIC: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ITALIC", fieldType: "I", fieldCache: &ITALIC_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.ROMAN_BASELINE

    private static var ROMAN_BASELINE_FieldID: jfieldID?

    open static var ROMAN_BASELINE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ROMAN_BASELINE", fieldType: "I", fieldCache: &ROMAN_BASELINE_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.CENTER_BASELINE

    private static var CENTER_BASELINE_FieldID: jfieldID?

    open static var CENTER_BASELINE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CENTER_BASELINE", fieldType: "I", fieldCache: &CENTER_BASELINE_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.HANGING_BASELINE

    private static var HANGING_BASELINE_FieldID: jfieldID?

    open static var HANGING_BASELINE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HANGING_BASELINE", fieldType: "I", fieldCache: &HANGING_BASELINE_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.TRUETYPE_FONT

    private static var TRUETYPE_FONT_FieldID: jfieldID?

    open static var TRUETYPE_FONT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TRUETYPE_FONT", fieldType: "I", fieldCache: &TRUETYPE_FONT_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.TYPE1_FONT

    private static var TYPE1_FONT_FieldID: jfieldID?

    open static var TYPE1_FONT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TYPE1_FONT", fieldType: "I", fieldCache: &TYPE1_FONT_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// protected java.lang.String java.awt.Font.name

    private static var name_FieldID: jfieldID?

    open var name: String! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "name", fieldType: "Ljava/lang/String;", fieldCache: &Font.name_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: String(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "name", fieldType: "Ljava/lang/String;", fieldCache: &Font.name_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int java.awt.Font.style

    private static var style_FieldID: jfieldID?

    open var style: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "style", fieldType: "I", fieldCache: &Font.style_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "style", fieldType: "I", fieldCache: &Font.style_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.Font.size

    private static var size_FieldID: jfieldID?

    open var size: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "size", fieldType: "I", fieldCache: &Font.size_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "size", fieldType: "I", fieldCache: &Font.size_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected float java.awt.Font.pointSize

    private static var pointSize_FieldID: jfieldID?

    open var pointSize: Float {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetFloatField( fieldName: "pointSize", fieldType: "F", fieldCache: &Font.pointSize_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Float(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetFloatField( fieldName: "pointSize", fieldType: "F", fieldCache: &Font.pointSize_FieldID, object: javaObject, value: __value.f, locals: &__locals )
        }
    }

    /// private transient java.awt.peer.FontPeer java.awt.Font.peer

    /// private transient long java.awt.Font.pData

    /// private transient sun.font.Font2DHandle java.awt.Font.font2DHandle

    /// private transient sun.font.AttributeValues java.awt.Font.values

    /// private transient boolean java.awt.Font.hasLayoutAttributes

    /// private transient boolean java.awt.Font.createdFont

    /// private transient boolean java.awt.Font.nonIdentityTx

    /// private static final java.awt.geom.AffineTransform java.awt.Font.identityTx

    /// private static final long java.awt.Font.serialVersionUID

    /// private static final int java.awt.Font.RECOGNIZED_MASK

    /// private static final int java.awt.Font.PRIMARY_MASK

    /// private static final int java.awt.Font.SECONDARY_MASK

    /// private static final int java.awt.Font.LAYOUT_MASK

    /// private static final int java.awt.Font.EXTRA_MASK

    /// private static final float[] java.awt.Font.ssinfo

    /// transient int java.awt.Font.hash

    /// private int java.awt.Font.fontSerializedDataVersion

    /// private transient java.lang.ref.SoftReference java.awt.Font.flmref

    /// public static final int java.awt.Font.LAYOUT_LEFT_TO_RIGHT

    private static var LAYOUT_LEFT_TO_RIGHT_FieldID: jfieldID?

    open static var LAYOUT_LEFT_TO_RIGHT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LAYOUT_LEFT_TO_RIGHT", fieldType: "I", fieldCache: &LAYOUT_LEFT_TO_RIGHT_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.LAYOUT_RIGHT_TO_LEFT

    private static var LAYOUT_RIGHT_TO_LEFT_FieldID: jfieldID?

    open static var LAYOUT_RIGHT_TO_LEFT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LAYOUT_RIGHT_TO_LEFT", fieldType: "I", fieldCache: &LAYOUT_RIGHT_TO_LEFT_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.LAYOUT_NO_START_CONTEXT

    private static var LAYOUT_NO_START_CONTEXT_FieldID: jfieldID?

    open static var LAYOUT_NO_START_CONTEXT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LAYOUT_NO_START_CONTEXT", fieldType: "I", fieldCache: &LAYOUT_NO_START_CONTEXT_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Font.LAYOUT_NO_LIMIT_CONTEXT

    private static var LAYOUT_NO_LIMIT_CONTEXT_FieldID: jfieldID?

    open static var LAYOUT_NO_LIMIT_CONTEXT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LAYOUT_NO_LIMIT_CONTEXT", fieldType: "I", fieldCache: &LAYOUT_NO_LIMIT_CONTEXT_FieldID, className: "java/awt/Font", classCache: &FontJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private java.awt.Font(sun.font.AttributeValues,java.lang.String,int,boolean,sun.font.Font2DHandle)

    /// protected java.awt.Font(java.awt.Font)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Font", classCache: &Font.FontJNIClass, methodSig: "(Ljava/awt/Font;)V", methodCache: &Font.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Font? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.Font(java.util.Map)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: java_util.Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/awt/Font", classCache: &Font.FontJNIClass, methodSig: "(Ljava/util/Map;)V", methodCache: &Font.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_util.Map? ) {
        self.init( arg0: _arg0 )
    }

    /// private java.awt.Font(java.io.File,int,boolean,sun.font.CreatedFontTracker) throws java.awt.FontFormatException

    /// public java.awt.Font(java.lang.String,int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: String?, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Font", classCache: &Font.FontJNIClass, methodSig: "(Ljava/lang/String;II)V", methodCache: &Font.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private java.awt.Font(java.lang.String,int,float)

    /// private java.awt.Font(java.lang.String,int,float,boolean,sun.font.Font2DHandle)

    /// protected void java.awt.Font.finalize() throws java.lang.Throwable

    private static var finalize_MethodID_4: jmethodID?

    override open func finalize() throws /* java.lang.Throwable */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "finalize", methodSig: "()V", methodCache: &Font.finalize_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.Throwable( javaObject: throwable )
        }
    }


    /// public boolean java.awt.Font.equals(java.lang.Object)

    /// public java.lang.String java.awt.Font.toString()

    /// public int java.awt.Font.hashCode()

    /// public java.lang.String java.awt.Font.getName()

    private static var getName_MethodID_5: jmethodID?

    open func getName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getName", methodSig: "()Ljava/lang/String;", methodCache: &Font.getName_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public static java.awt.Font java.awt.Font.decode(java.lang.String)

    private static var decode_MethodID_6: jmethodID?

    open class func decode( arg0: String? ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Font", classCache: &FontJNIClass, methodName: "decode", methodSig: "(Ljava/lang/String;)Ljava/awt/Font;", methodCache: &decode_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open class func decode( _ _arg0: String? ) -> Font! {
        return decode( arg0: _arg0 )
    }

    /// private void java.awt.Font.writeObject(java.io.ObjectOutputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// private void java.awt.Font.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// public int java.awt.Font.getSize()

    private static var getSize_MethodID_7: jmethodID?

    open func getSize() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSize", methodSig: "()I", methodCache: &Font.getSize_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private static void java.awt.Font.initIDs()

    /// public java.util.Map java.awt.Font.getAttributes()

    private static var getAttributes_MethodID_8: jmethodID?

    open func getAttributes() -> java_util.Map! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAttributes", methodSig: "()Ljava/util/Map;", methodCache: &Font.getAttributes_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.MapForward( javaObject: __return ) : nil
    }


    /// public java.awt.peer.FontPeer java.awt.Font.getPeer()

    private static var getPeer_MethodID_9: jmethodID?

    open func getPeer() -> FontPeer! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPeer", methodSig: "()Ljava/awt/peer/FontPeer;", methodCache: &Font.getPeer_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FontPeerForward( javaObject: __return ) : nil
    }


    /// public static java.awt.Font java.awt.Font.getFont(java.lang.String)

    private static var getFont_MethodID_10: jmethodID?

    open class func getFont( arg0: String? ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Font", classCache: &FontJNIClass, methodName: "getFont", methodSig: "(Ljava/lang/String;)Ljava/awt/Font;", methodCache: &getFont_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open class func getFont( _ _arg0: String? ) -> Font! {
        return getFont( arg0: _arg0 )
    }

    /// public static java.awt.Font java.awt.Font.getFont(java.lang.String,java.awt.Font)

    private static var getFont_MethodID_11: jmethodID?

    open class func getFont( arg0: String?, arg1: Font? ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Font", classCache: &FontJNIClass, methodName: "getFont", methodSig: "(Ljava/lang/String;Ljava/awt/Font;)Ljava/awt/Font;", methodCache: &getFont_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open class func getFont( _ _arg0: String?, _ _arg1: Font? ) -> Font! {
        return getFont( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.Font java.awt.Font.getFont(java.util.Map)

    private static var getFont_MethodID_12: jmethodID?

    open class func getFont( arg0: java_util.Map? ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Font", classCache: &FontJNIClass, methodName: "getFont", methodSig: "(Ljava/util/Map;)Ljava/awt/Font;", methodCache: &getFont_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open class func getFont( _ _arg0: java_util.Map? ) -> Font! {
        return getFont( arg0: _arg0 )
    }

    /// public boolean java.awt.Font.hasUniformLineMetrics()

    private static var hasUniformLineMetrics_MethodID_13: jmethodID?

    open func hasUniformLineMetrics() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasUniformLineMetrics", methodSig: "()Z", methodCache: &Font.hasUniformLineMetrics_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public java.awt.font.LineMetrics java.awt.Font.getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)

    private static var getLineMetrics_MethodID_14: jmethodID?

    open func getLineMetrics( arg0: String?, arg1: FontRenderContext? ) -> LineMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLineMetrics", methodSig: "(Ljava/lang/String;Ljava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", methodCache: &Font.getLineMetrics_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LineMetrics( javaObject: __return ) : nil
    }

    open func getLineMetrics( _ _arg0: String?, _ _arg1: FontRenderContext? ) -> LineMetrics! {
        return getLineMetrics( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.font.LineMetrics java.awt.Font.getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)

    private static var getLineMetrics_MethodID_15: jmethodID?

    open func getLineMetrics( arg0: /* java.text.CharacterIterator */ UnclassedProtocol?, arg1: Int, arg2: Int, arg3: FontRenderContext? ) -> LineMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLineMetrics", methodSig: "(Ljava/text/CharacterIterator;IILjava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", methodCache: &Font.getLineMetrics_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LineMetrics( javaObject: __return ) : nil
    }

    open func getLineMetrics( _ _arg0: /* java.text.CharacterIterator */ UnclassedProtocol?, _ _arg1: Int, _ _arg2: Int, _ _arg3: FontRenderContext? ) -> LineMetrics! {
        return getLineMetrics( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.font.LineMetrics java.awt.Font.getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)

    private static var getLineMetrics_MethodID_16: jmethodID?

    open func getLineMetrics( arg0: [UInt16]?, arg1: Int, arg2: Int, arg3: FontRenderContext? ) -> LineMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLineMetrics", methodSig: "([CIILjava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", methodCache: &Font.getLineMetrics_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LineMetrics( javaObject: __return ) : nil
    }

    open func getLineMetrics( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int, _ _arg3: FontRenderContext? ) -> LineMetrics! {
        return getLineMetrics( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.font.LineMetrics java.awt.Font.getLineMetrics(java.lang.String,int,int,java.awt.font.FontRenderContext)

    private static var getLineMetrics_MethodID_17: jmethodID?

    open func getLineMetrics( arg0: String?, arg1: Int, arg2: Int, arg3: FontRenderContext? ) -> LineMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLineMetrics", methodSig: "(Ljava/lang/String;IILjava/awt/font/FontRenderContext;)Ljava/awt/font/LineMetrics;", methodCache: &Font.getLineMetrics_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LineMetrics( javaObject: __return ) : nil
    }

    open func getLineMetrics( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int, _ _arg3: FontRenderContext? ) -> LineMetrics! {
        return getLineMetrics( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.geom.Rectangle2D java.awt.Font.getStringBounds(char[],int,int,java.awt.font.FontRenderContext)

    private static var getStringBounds_MethodID_18: jmethodID?

    open func getStringBounds( arg0: [UInt16]?, arg1: Int, arg2: Int, arg3: FontRenderContext? ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStringBounds", methodSig: "([CIILjava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", methodCache: &Font.getStringBounds_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    open func getStringBounds( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int, _ _arg3: FontRenderContext? ) -> Rectangle2D! {
        return getStringBounds( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.geom.Rectangle2D java.awt.Font.getStringBounds(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)

    private static var getStringBounds_MethodID_19: jmethodID?

    open func getStringBounds( arg0: /* java.text.CharacterIterator */ UnclassedProtocol?, arg1: Int, arg2: Int, arg3: FontRenderContext? ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStringBounds", methodSig: "(Ljava/text/CharacterIterator;IILjava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", methodCache: &Font.getStringBounds_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    open func getStringBounds( _ _arg0: /* java.text.CharacterIterator */ UnclassedProtocol?, _ _arg1: Int, _ _arg2: Int, _ _arg3: FontRenderContext? ) -> Rectangle2D! {
        return getStringBounds( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.geom.Rectangle2D java.awt.Font.getStringBounds(java.lang.String,java.awt.font.FontRenderContext)

    private static var getStringBounds_MethodID_20: jmethodID?

    open func getStringBounds( arg0: String?, arg1: FontRenderContext? ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStringBounds", methodSig: "(Ljava/lang/String;Ljava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", methodCache: &Font.getStringBounds_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    open func getStringBounds( _ _arg0: String?, _ _arg1: FontRenderContext? ) -> Rectangle2D! {
        return getStringBounds( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.geom.Rectangle2D java.awt.Font.getStringBounds(java.lang.String,int,int,java.awt.font.FontRenderContext)

    private static var getStringBounds_MethodID_21: jmethodID?

    open func getStringBounds( arg0: String?, arg1: Int, arg2: Int, arg3: FontRenderContext? ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStringBounds", methodSig: "(Ljava/lang/String;IILjava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", methodCache: &Font.getStringBounds_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    open func getStringBounds( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int, _ _arg3: FontRenderContext? ) -> Rectangle2D! {
        return getStringBounds( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.geom.Rectangle2D java.awt.Font.getMaxCharBounds(java.awt.font.FontRenderContext)

    private static var getMaxCharBounds_MethodID_22: jmethodID?

    open func getMaxCharBounds( arg0: FontRenderContext? ) -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMaxCharBounds", methodSig: "(Ljava/awt/font/FontRenderContext;)Ljava/awt/geom/Rectangle2D;", methodCache: &Font.getMaxCharBounds_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }

    open func getMaxCharBounds( _ _arg0: FontRenderContext? ) -> Rectangle2D! {
        return getMaxCharBounds( arg0: _arg0 )
    }

    /// public boolean java.awt.Font.hasLayoutAttributes()

    private static var hasLayoutAttributes_MethodID_23: jmethodID?

    open func hasLayoutAttributes() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "hasLayoutAttributes", methodSig: "()Z", methodCache: &Font.hasLayoutAttributes_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// final java.awt.peer.FontPeer java.awt.Font.getPeer_NoClientCode()

    /// private sun.font.AttributeValues java.awt.Font.getAttributeValues()

    /// private sun.font.Font2D java.awt.Font.getFont2D()

    /// private void java.awt.Font.initFromValues(sun.font.AttributeValues)

    /// private static boolean java.awt.Font.hasTempPermission()

    /// public static java.awt.Font java.awt.Font.createFont(int,java.io.InputStream) throws java.awt.FontFormatException,java.io.IOException

    private static var createFont_MethodID_24: jmethodID?

    open class func createFont( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.awt.FontFormatException, java.io.IOException */ -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Font", classCache: &FontJNIClass, methodName: "createFont", methodSig: "(ILjava/io/InputStream;)Ljava/awt/Font;", methodCache: &createFont_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw FontFormatException( javaObject: throwable )
        }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open class func createFont( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.awt.FontFormatException, java.io.IOException */ -> Font! {
        return try createFont( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.Font java.awt.Font.createFont(int,java.io.File) throws java.awt.FontFormatException,java.io.IOException

    /// private static java.awt.Font java.awt.Font.createFont0(int,java.io.InputStream,sun.font.CreatedFontTracker) throws java.awt.FontFormatException,java.io.IOException

    /// public java.awt.geom.AffineTransform java.awt.Font.getTransform()

    private static var getTransform_MethodID_25: jmethodID?

    open func getTransform() -> AffineTransform! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransform", methodSig: "()Ljava/awt/geom/AffineTransform;", methodCache: &Font.getTransform_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? AffineTransform( javaObject: __return ) : nil
    }


    /// public java.lang.String java.awt.Font.getFamily()

    private static var getFamily_MethodID_26: jmethodID?

    open func getFamily() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFamily", methodSig: "()Ljava/lang/String;", methodCache: &Font.getFamily_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.String java.awt.Font.getFamily(java.util.Locale)

    private static var getFamily_MethodID_27: jmethodID?

    open func getFamily( arg0: java_util.JavaLocale? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFamily", methodSig: "(Ljava/util/Locale;)Ljava/lang/String;", methodCache: &Font.getFamily_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getFamily( _ _arg0: java_util.JavaLocale? ) -> String! {
        return getFamily( arg0: _arg0 )
    }

    /// final java.lang.String java.awt.Font.getFamily_NoClientCode()

    /// public java.lang.String java.awt.Font.getPSName()

    private static var getPSName_MethodID_28: jmethodID?

    open func getPSName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPSName", methodSig: "()Ljava/lang/String;", methodCache: &Font.getPSName_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public java.lang.String java.awt.Font.getFontName(java.util.Locale)

    private static var getFontName_MethodID_29: jmethodID?

    open func getFontName( arg0: java_util.JavaLocale? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontName", methodSig: "(Ljava/util/Locale;)Ljava/lang/String;", methodCache: &Font.getFontName_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }

    open func getFontName( _ _arg0: java_util.JavaLocale? ) -> String! {
        return getFontName( arg0: _arg0 )
    }

    /// public java.lang.String java.awt.Font.getFontName()

    private static var getFontName_MethodID_30: jmethodID?

    open func getFontName() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontName", methodSig: "()Ljava/lang/String;", methodCache: &Font.getFontName_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.decode( type: String(), from: __return )
    }


    /// public int java.awt.Font.getStyle()

    private static var getStyle_MethodID_31: jmethodID?

    open func getStyle() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getStyle", methodSig: "()I", methodCache: &Font.getStyle_MethodID_31, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public float java.awt.Font.getSize2D()

    private static var getSize2D_MethodID_32: jmethodID?

    open func getSize2D() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getSize2D", methodSig: "()F", methodCache: &Font.getSize2D_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public boolean java.awt.Font.isPlain()

    private static var isPlain_MethodID_33: jmethodID?

    open func isPlain() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPlain", methodSig: "()Z", methodCache: &Font.isPlain_MethodID_33, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.awt.Font.isBold()

    private static var isBold_MethodID_34: jmethodID?

    open func isBold() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isBold", methodSig: "()Z", methodCache: &Font.isBold_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.awt.Font.isItalic()

    private static var isItalic_MethodID_35: jmethodID?

    open func isItalic() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isItalic", methodSig: "()Z", methodCache: &Font.isItalic_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.awt.Font.isTransformed()

    private static var isTransformed_MethodID_36: jmethodID?

    open func isTransformed() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTransformed", methodSig: "()Z", methodCache: &Font.isTransformed_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.awt.Font.getNumGlyphs()

    private static var getNumGlyphs_MethodID_37: jmethodID?

    open func getNumGlyphs() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumGlyphs", methodSig: "()I", methodCache: &Font.getNumGlyphs_MethodID_37, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.Font.getMissingGlyphCode()

    private static var getMissingGlyphCode_MethodID_38: jmethodID?

    open func getMissingGlyphCode() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMissingGlyphCode", methodSig: "()I", methodCache: &Font.getMissingGlyphCode_MethodID_38, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// private double[] java.awt.Font.getSimpleTransformMatrix()

    /// public byte java.awt.Font.getBaselineFor(char)

    private static var getBaselineFor_MethodID_39: jmethodID?

    open func getBaselineFor( arg0: UInt16 ) -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallByteMethod( object: javaObject, methodName: "getBaselineFor", methodSig: "(C)B", methodCache: &Font.getBaselineFor_MethodID_39, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int8(), from: __return )
    }

    open func getBaselineFor( _ _arg0: UInt16 ) -> Int8 {
        return getBaselineFor( arg0: _arg0 )
    }

    /// public java.text.AttributedCharacterIterator$Attribute[] java.awt.Font.getAvailableAttributes()

    private static var getAvailableAttributes_MethodID_40: jmethodID?

    open func getAvailableAttributes() -> [/* java.text.AttributedCharacterIterator$Attribute */ UnclassedObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAvailableAttributes", methodSig: "()[Ljava/text/AttributedCharacterIterator$Attribute;", methodCache: &Font.getAvailableAttributes_MethodID_40, args: &__args, locals: &__locals )
        return JNIType.decode( type: [/* java.text.AttributedCharacterIterator$Attribute */ UnclassedObject](), from: __return )
    }


    /// public java.awt.Font java.awt.Font.deriveFont(int,float)

    private static var deriveFont_MethodID_41: jmethodID?

    open func deriveFont( arg0: Int, arg1: Float ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deriveFont", methodSig: "(IF)Ljava/awt/Font;", methodCache: &Font.deriveFont_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open func deriveFont( _ _arg0: Int, _ _arg1: Float ) -> Font! {
        return deriveFont( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Font java.awt.Font.deriveFont(java.util.Map)

    private static var deriveFont_MethodID_42: jmethodID?

    open func deriveFont( arg0: java_util.Map? ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deriveFont", methodSig: "(Ljava/util/Map;)Ljava/awt/Font;", methodCache: &Font.deriveFont_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open func deriveFont( _ _arg0: java_util.Map? ) -> Font! {
        return deriveFont( arg0: _arg0 )
    }

    /// public java.awt.Font java.awt.Font.deriveFont(int)

    private static var deriveFont_MethodID_43: jmethodID?

    open func deriveFont( arg0: Int ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deriveFont", methodSig: "(I)Ljava/awt/Font;", methodCache: &Font.deriveFont_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open func deriveFont( _ _arg0: Int ) -> Font! {
        return deriveFont( arg0: _arg0 )
    }

    /// public java.awt.Font java.awt.Font.deriveFont(java.awt.geom.AffineTransform)

    private static var deriveFont_MethodID_44: jmethodID?

    open func deriveFont( arg0: AffineTransform? ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deriveFont", methodSig: "(Ljava/awt/geom/AffineTransform;)Ljava/awt/Font;", methodCache: &Font.deriveFont_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open func deriveFont( _ _arg0: AffineTransform? ) -> Font! {
        return deriveFont( arg0: _arg0 )
    }

    /// public java.awt.Font java.awt.Font.deriveFont(float)

    private static var deriveFont_MethodID_45: jmethodID?

    open func deriveFont( arg0: Float ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deriveFont", methodSig: "(F)Ljava/awt/Font;", methodCache: &Font.deriveFont_MethodID_45, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open func deriveFont( _ _arg0: Float ) -> Font! {
        return deriveFont( arg0: _arg0 )
    }

    /// public java.awt.Font java.awt.Font.deriveFont(int,java.awt.geom.AffineTransform)

    private static var deriveFont_MethodID_46: jmethodID?

    open func deriveFont( arg0: Int, arg1: AffineTransform? ) -> Font! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "deriveFont", methodSig: "(ILjava/awt/geom/AffineTransform;)Ljava/awt/Font;", methodCache: &Font.deriveFont_MethodID_46, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Font( javaObject: __return ) : nil
    }

    open func deriveFont( _ _arg0: Int, _ _arg1: AffineTransform? ) -> Font! {
        return deriveFont( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.awt.Font.canDisplay(int)

    private static var canDisplay_MethodID_47: jmethodID?

    open func canDisplay( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "canDisplay", methodSig: "(I)Z", methodCache: &Font.canDisplay_MethodID_47, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func canDisplay( _ _arg0: Int ) -> Bool {
        return canDisplay( arg0: _arg0 )
    }

    /// public boolean java.awt.Font.canDisplay(char)

    private static var canDisplay_MethodID_48: jmethodID?

    open func canDisplay( arg0: UInt16 ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "canDisplay", methodSig: "(C)Z", methodCache: &Font.canDisplay_MethodID_48, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func canDisplay( _ _arg0: UInt16 ) -> Bool {
        return canDisplay( arg0: _arg0 )
    }

    /// public int java.awt.Font.canDisplayUpTo(char[],int,int)

    private static var canDisplayUpTo_MethodID_49: jmethodID?

    open func canDisplayUpTo( arg0: [UInt16]?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "canDisplayUpTo", methodSig: "([CII)I", methodCache: &Font.canDisplayUpTo_MethodID_49, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func canDisplayUpTo( _ _arg0: [UInt16]?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return canDisplayUpTo( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public int java.awt.Font.canDisplayUpTo(java.text.CharacterIterator,int,int)

    private static var canDisplayUpTo_MethodID_50: jmethodID?

    open func canDisplayUpTo( arg0: /* java.text.CharacterIterator */ UnclassedProtocol?, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "canDisplayUpTo", methodSig: "(Ljava/text/CharacterIterator;II)I", methodCache: &Font.canDisplayUpTo_MethodID_50, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func canDisplayUpTo( _ _arg0: /* java.text.CharacterIterator */ UnclassedProtocol?, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return canDisplayUpTo( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public int java.awt.Font.canDisplayUpTo(java.lang.String)

    private static var canDisplayUpTo_MethodID_51: jmethodID?

    open func canDisplayUpTo( arg0: String? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "canDisplayUpTo", methodSig: "(Ljava/lang/String;)I", methodCache: &Font.canDisplayUpTo_MethodID_51, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func canDisplayUpTo( _ _arg0: String? ) -> Int {
        return canDisplayUpTo( arg0: _arg0 )
    }

    /// public float java.awt.Font.getItalicAngle()

    private static var getItalicAngle_MethodID_52: jmethodID?

    open func getItalicAngle() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getItalicAngle", methodSig: "()F", methodCache: &Font.getItalicAngle_MethodID_52, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// private sun.font.FontLineMetrics java.awt.Font.defaultLineMetrics(java.awt.font.FontRenderContext)

    /// public java.awt.font.GlyphVector java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)

    private static var createGlyphVector_MethodID_53: jmethodID?

    open func createGlyphVector( arg0: FontRenderContext?, arg1: String? ) -> GlyphVector! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createGlyphVector", methodSig: "(Ljava/awt/font/FontRenderContext;Ljava/lang/String;)Ljava/awt/font/GlyphVector;", methodCache: &Font.createGlyphVector_MethodID_53, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GlyphVector( javaObject: __return ) : nil
    }

    open func createGlyphVector( _ _arg0: FontRenderContext?, _ _arg1: String? ) -> GlyphVector! {
        return createGlyphVector( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.font.GlyphVector java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)

    private static var createGlyphVector_MethodID_54: jmethodID?

    open func createGlyphVector( arg0: FontRenderContext?, arg1: /* java.text.CharacterIterator */ UnclassedProtocol? ) -> GlyphVector! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createGlyphVector", methodSig: "(Ljava/awt/font/FontRenderContext;Ljava/text/CharacterIterator;)Ljava/awt/font/GlyphVector;", methodCache: &Font.createGlyphVector_MethodID_54, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GlyphVector( javaObject: __return ) : nil
    }

    open func createGlyphVector( _ _arg0: FontRenderContext?, _ _arg1: /* java.text.CharacterIterator */ UnclassedProtocol? ) -> GlyphVector! {
        return createGlyphVector( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.font.GlyphVector java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,char[])

    private static var createGlyphVector_MethodID_55: jmethodID?

    open func createGlyphVector( arg0: FontRenderContext?, arg1: [UInt16]? ) -> GlyphVector! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createGlyphVector", methodSig: "(Ljava/awt/font/FontRenderContext;[C)Ljava/awt/font/GlyphVector;", methodCache: &Font.createGlyphVector_MethodID_55, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GlyphVector( javaObject: __return ) : nil
    }

    open func createGlyphVector( _ _arg0: FontRenderContext?, _ _arg1: [UInt16]? ) -> GlyphVector! {
        return createGlyphVector( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.font.GlyphVector java.awt.Font.createGlyphVector(java.awt.font.FontRenderContext,int[])

    private static var createGlyphVector_MethodID_56: jmethodID?

    open func createGlyphVector( arg0: FontRenderContext?, arg1: [Int32]? ) -> GlyphVector! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createGlyphVector", methodSig: "(Ljava/awt/font/FontRenderContext;[I)Ljava/awt/font/GlyphVector;", methodCache: &Font.createGlyphVector_MethodID_56, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GlyphVector( javaObject: __return ) : nil
    }

    open func createGlyphVector( _ _arg0: FontRenderContext?, _ _arg1: [Int32]? ) -> GlyphVector! {
        return createGlyphVector( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.font.GlyphVector java.awt.Font.layoutGlyphVector(java.awt.font.FontRenderContext,char[],int,int,int)

    private static var layoutGlyphVector_MethodID_57: jmethodID?

    open func layoutGlyphVector( arg0: FontRenderContext?, arg1: [UInt16]?, arg2: Int, arg3: Int, arg4: Int ) -> GlyphVector! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "layoutGlyphVector", methodSig: "(Ljava/awt/font/FontRenderContext;[CIII)Ljava/awt/font/GlyphVector;", methodCache: &Font.layoutGlyphVector_MethodID_57, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GlyphVector( javaObject: __return ) : nil
    }

    open func layoutGlyphVector( _ _arg0: FontRenderContext?, _ _arg1: [UInt16]?, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) -> GlyphVector! {
        return layoutGlyphVector( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// private static void java.awt.Font.applyTransform(java.awt.geom.AffineTransform,sun.font.AttributeValues)

    /// private static void java.awt.Font.applyStyle(int,sun.font.AttributeValues)

    /// private native void java.awt.Font.pDispose()

}
