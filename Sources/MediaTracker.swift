
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:33 GMT 2016 ///

/// class java.awt.MediaTracker ///

open class MediaTracker: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.MediaTracker", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MediaTrackerJNIClass: jclass?

    /// java.awt.Component java.awt.MediaTracker.target

    /// java.awt.MediaEntry java.awt.MediaTracker.head

    /// private static final long java.awt.MediaTracker.serialVersionUID

    /// public static final int java.awt.MediaTracker.LOADING

    private static var LOADING_FieldID: jfieldID?

    open static var LOADING: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LOADING", fieldType: "I", fieldCache: &LOADING_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.MediaTracker.ABORTED

    private static var ABORTED_FieldID: jfieldID?

    open static var ABORTED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ABORTED", fieldType: "I", fieldCache: &ABORTED_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.MediaTracker.ERRORED

    private static var ERRORED_FieldID: jfieldID?

    open static var ERRORED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ERRORED", fieldType: "I", fieldCache: &ERRORED_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.MediaTracker.COMPLETE

    private static var COMPLETE_FieldID: jfieldID?

    open static var COMPLETE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "COMPLETE", fieldType: "I", fieldCache: &COMPLETE_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// static final int java.awt.MediaTracker.DONE

    /// public java.awt.MediaTracker(java.awt.Component)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Component? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/MediaTracker", classCache: &MediaTracker.MediaTrackerJNIClass, methodSig: "(Ljava/awt/Component;)V", methodCache: &MediaTracker.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Component? ) {
        self.init( arg0: _arg0 )
    }

    /// public void java.awt.MediaTracker.waitForID(int) throws java.lang.InterruptedException

    private static var waitForID_MethodID_2: jmethodID?

    open func waitForID( arg0: Int ) throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "waitForID", methodSig: "(I)V", methodCache: &MediaTracker.waitForID_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func waitForID( _ _arg0: Int ) throws /* java.lang.InterruptedException */ {
        try waitForID( arg0: _arg0 )
    }

    /// public synchronized boolean java.awt.MediaTracker.waitForID(int,long) throws java.lang.InterruptedException

    private static var waitForID_MethodID_3: jmethodID?

    open func waitForID( arg0: Int, arg1: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "waitForID", methodSig: "(IJ)Z", methodCache: &MediaTracker.waitForID_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func waitForID( _ _arg0: Int, _ _arg1: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        return try waitForID( arg0: _arg0, arg1: _arg1 )
    }

    /// synchronized void java.awt.MediaTracker.setDone()

    /// public void java.awt.MediaTracker.addImage(java.awt.Image,int)

    private static var addImage_MethodID_4: jmethodID?

    open func addImage( arg0: Image?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addImage", methodSig: "(Ljava/awt/Image;I)V", methodCache: &MediaTracker.addImage_MethodID_4, args: &__args, locals: &__locals )
    }

    open func addImage( _ _arg0: Image?, _ _arg1: Int ) {
        addImage( arg0: _arg0, arg1: _arg1 )
    }

    /// public synchronized void java.awt.MediaTracker.addImage(java.awt.Image,int,int,int)

    private static var addImage_MethodID_5: jmethodID?

    open func addImage( arg0: Image?, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addImage", methodSig: "(Ljava/awt/Image;III)V", methodCache: &MediaTracker.addImage_MethodID_5, args: &__args, locals: &__locals )
    }

    open func addImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        addImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public boolean java.awt.MediaTracker.checkAll(boolean)

    private static var checkAll_MethodID_6: jmethodID?

    open func checkAll( arg0: Bool ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkAll", methodSig: "(Z)Z", methodCache: &MediaTracker.checkAll_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func checkAll( _ _arg0: Bool ) -> Bool {
        return checkAll( arg0: _arg0 )
    }

    /// private synchronized boolean java.awt.MediaTracker.checkAll(boolean,boolean)

    /// public boolean java.awt.MediaTracker.checkAll()

    private static var checkAll_MethodID_7: jmethodID?

    open func checkAll() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkAll", methodSig: "()Z", methodCache: &MediaTracker.checkAll_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public synchronized boolean java.awt.MediaTracker.isErrorAny()

    private static var isErrorAny_MethodID_8: jmethodID?

    open func isErrorAny() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isErrorAny", methodSig: "()Z", methodCache: &MediaTracker.isErrorAny_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public synchronized java.lang.Object[] java.awt.MediaTracker.getErrorsAny()

    private static var getErrorsAny_MethodID_9: jmethodID?

    open func getErrorsAny() -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getErrorsAny", methodSig: "()[Ljava/lang/Object;", methodCache: &MediaTracker.getErrorsAny_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }


    /// public void java.awt.MediaTracker.waitForAll() throws java.lang.InterruptedException

    private static var waitForAll_MethodID_10: jmethodID?

    open func waitForAll() throws /* java.lang.InterruptedException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "waitForAll", methodSig: "()V", methodCache: &MediaTracker.waitForAll_MethodID_10, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }


    /// public synchronized boolean java.awt.MediaTracker.waitForAll(long) throws java.lang.InterruptedException

    private static var waitForAll_MethodID_11: jmethodID?

    open func waitForAll( arg0: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "waitForAll", methodSig: "(J)Z", methodCache: &MediaTracker.waitForAll_MethodID_11, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func waitForAll( _ _arg0: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        return try waitForAll( arg0: _arg0 )
    }

    /// public int java.awt.MediaTracker.statusAll(boolean)

    private static var statusAll_MethodID_12: jmethodID?

    open func statusAll( arg0: Bool ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "statusAll", methodSig: "(Z)I", methodCache: &MediaTracker.statusAll_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func statusAll( _ _arg0: Bool ) -> Int {
        return statusAll( arg0: _arg0 )
    }

    /// private synchronized int java.awt.MediaTracker.statusAll(boolean,boolean)

    /// public boolean java.awt.MediaTracker.checkID(int,boolean)

    private static var checkID_MethodID_13: jmethodID?

    open func checkID( arg0: Int, arg1: Bool ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkID", methodSig: "(IZ)Z", methodCache: &MediaTracker.checkID_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func checkID( _ _arg0: Int, _ _arg1: Bool ) -> Bool {
        return checkID( arg0: _arg0, arg1: _arg1 )
    }

    /// private synchronized boolean java.awt.MediaTracker.checkID(int,boolean,boolean)

    /// public boolean java.awt.MediaTracker.checkID(int)

    private static var checkID_MethodID_14: jmethodID?

    open func checkID( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkID", methodSig: "(I)Z", methodCache: &MediaTracker.checkID_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func checkID( _ _arg0: Int ) -> Bool {
        return checkID( arg0: _arg0 )
    }

    /// public synchronized boolean java.awt.MediaTracker.isErrorID(int)

    private static var isErrorID_MethodID_15: jmethodID?

    open func isErrorID( arg0: Int ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isErrorID", methodSig: "(I)Z", methodCache: &MediaTracker.isErrorID_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isErrorID( _ _arg0: Int ) -> Bool {
        return isErrorID( arg0: _arg0 )
    }

    /// public synchronized java.lang.Object[] java.awt.MediaTracker.getErrorsID(int)

    private static var getErrorsID_MethodID_16: jmethodID?

    open func getErrorsID( arg0: Int ) -> [JavaObject]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getErrorsID", methodSig: "(I)[Ljava/lang/Object;", methodCache: &MediaTracker.getErrorsID_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: [JavaObject](), from: __return )
    }

    open func getErrorsID( _ _arg0: Int ) -> [JavaObject]! {
        return getErrorsID( arg0: _arg0 )
    }

    /// public int java.awt.MediaTracker.statusID(int,boolean)

    private static var statusID_MethodID_17: jmethodID?

    open func statusID( arg0: Int, arg1: Bool ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "statusID", methodSig: "(IZ)I", methodCache: &MediaTracker.statusID_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func statusID( _ _arg0: Int, _ _arg1: Bool ) -> Int {
        return statusID( arg0: _arg0, arg1: _arg1 )
    }

    /// private synchronized int java.awt.MediaTracker.statusID(int,boolean,boolean)

    /// public synchronized void java.awt.MediaTracker.removeImage(java.awt.Image)

    private static var removeImage_MethodID_18: jmethodID?

    open func removeImage( arg0: Image? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeImage", methodSig: "(Ljava/awt/Image;)V", methodCache: &MediaTracker.removeImage_MethodID_18, args: &__args, locals: &__locals )
    }

    open func removeImage( _ _arg0: Image? ) {
        removeImage( arg0: _arg0 )
    }

    /// public synchronized void java.awt.MediaTracker.removeImage(java.awt.Image,int)

    private static var removeImage_MethodID_19: jmethodID?

    open func removeImage( arg0: Image?, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeImage", methodSig: "(Ljava/awt/Image;I)V", methodCache: &MediaTracker.removeImage_MethodID_19, args: &__args, locals: &__locals )
    }

    open func removeImage( _ _arg0: Image?, _ _arg1: Int ) {
        removeImage( arg0: _arg0, arg1: _arg1 )
    }

    /// public synchronized void java.awt.MediaTracker.removeImage(java.awt.Image,int,int,int)

    private static var removeImage_MethodID_20: jmethodID?

    open func removeImage( arg0: Image?, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeImage", methodSig: "(Ljava/awt/Image;III)V", methodCache: &MediaTracker.removeImage_MethodID_20, args: &__args, locals: &__locals )
    }

    open func removeImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        removeImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

}
