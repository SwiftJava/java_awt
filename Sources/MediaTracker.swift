
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.MediaTracker ///

open class MediaTracker: java_swift.JavaObject, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var MediaTrackerJNIClass: jclass?

    /// public static final int java.awt.MediaTracker.ABORTED

    private static var ABORTED_FieldID: jfieldID?

    public static var ABORTED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ABORTED", fieldType: "I", fieldCache: &ABORTED_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.MediaTracker.COMPLETE

    private static var COMPLETE_FieldID: jfieldID?

    public static var COMPLETE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "COMPLETE", fieldType: "I", fieldCache: &COMPLETE_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return Int(__value)
        }
    }

    /// static final int java.awt.MediaTracker.DONE

    // Skipping field: true false false false false false 

    /// public static final int java.awt.MediaTracker.ERRORED

    private static var ERRORED_FieldID: jfieldID?

    public static var ERRORED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ERRORED", fieldType: "I", fieldCache: &ERRORED_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return Int(__value)
        }
    }

    /// public static final int java.awt.MediaTracker.LOADING

    private static var LOADING_FieldID: jfieldID?

    public static var LOADING: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "LOADING", fieldType: "I", fieldCache: &LOADING_FieldID, className: "java/awt/MediaTracker", classCache: &MediaTrackerJNIClass )
            return Int(__value)
        }
    }

    /// private static final long java.awt.MediaTracker.serialVersionUID

    /// java.awt.MediaEntry java.awt.MediaTracker.head

    // Skipping field: true false false false false false 

    /// java.awt.Component java.awt.MediaTracker.target

    // Skipping field: true false false false false false 

    /// public java.awt.MediaTracker(java.awt.Component)

    private static var new_MethodID_1: jmethodID?

    public convenience init( comp: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comp, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/MediaTracker", classCache: &MediaTracker.MediaTrackerJNIClass, methodSig: "(Ljava/awt/Component;)V", methodCache: &MediaTracker.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _comp: Component? ) {
        self.init( comp: _comp )
    }

    /// private static java.awt.Image java.awt.MediaTracker.getResolutionVariant(java.awt.Image)

    /// public void java.awt.MediaTracker.addImage(java.awt.Image,int)

    private static var addImage_MethodID_2: jmethodID?

    open func addImage( image: Image?, id: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: image, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addImage", methodSig: "(Ljava/awt/Image;I)V", methodCache: &MediaTracker.addImage_MethodID_2, args: &__args, locals: &__locals )
    }

    open func addImage( _ _image: Image?, _ _id: Int ) {
        addImage( image: _image, id: _id )
    }

    /// public synchronized void java.awt.MediaTracker.addImage(java.awt.Image,int,int,int)

    private static var addImage_MethodID_3: jmethodID?

    open func addImage( image: Image?, id: Int, w: Int, h: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: image, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        __args[2] = jvalue( i: jint(w) )
        __args[3] = jvalue( i: jint(h) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addImage", methodSig: "(Ljava/awt/Image;III)V", methodCache: &MediaTracker.addImage_MethodID_3, args: &__args, locals: &__locals )
    }

    open func addImage( _ _image: Image?, _ _id: Int, _ _w: Int, _ _h: Int ) {
        addImage( image: _image, id: _id, w: _w, h: _h )
    }

    /// private void java.awt.MediaTracker.addImageImpl(java.awt.Image,int,int,int)

    /// public boolean java.awt.MediaTracker.checkAll(boolean)

    private static var checkAll_MethodID_4: jmethodID?

    open func checkAll( load: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(load ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkAll", methodSig: "(Z)Z", methodCache: &MediaTracker.checkAll_MethodID_4, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func checkAll( _ _load: Bool ) -> Bool {
        return checkAll( load: _load )
    }

    /// private synchronized boolean java.awt.MediaTracker.checkAll(boolean,boolean)

    /// public boolean java.awt.MediaTracker.checkAll()

    private static var checkAll_MethodID_5: jmethodID?

    open func checkAll() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkAll", methodSig: "()Z", methodCache: &MediaTracker.checkAll_MethodID_5, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean java.awt.MediaTracker.checkID(int)

    private static var checkID_MethodID_6: jmethodID?

    open func checkID( id: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(id) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkID", methodSig: "(I)Z", methodCache: &MediaTracker.checkID_MethodID_6, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func checkID( _ _id: Int ) -> Bool {
        return checkID( id: _id )
    }

    /// public boolean java.awt.MediaTracker.checkID(int,boolean)

    private static var checkID_MethodID_7: jmethodID?

    open func checkID( id: Int, load: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(id) )
        __args[1] = jvalue( z: jboolean(load ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "checkID", methodSig: "(IZ)Z", methodCache: &MediaTracker.checkID_MethodID_7, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func checkID( _ _id: Int, _ _load: Bool ) -> Bool {
        return checkID( id: _id, load: _load )
    }

    /// private synchronized boolean java.awt.MediaTracker.checkID(int,boolean,boolean)

    /// public synchronized java.lang.Object[] java.awt.MediaTracker.getErrorsAny()

    private static var getErrorsAny_MethodID_8: jmethodID?

    open func getErrorsAny() -> [JavaObject]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getErrorsAny", methodSig: "()[Ljava/lang/Object;", methodCache: &MediaTracker.getErrorsAny_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [JavaObject].self, from: __return )
    }


    /// public synchronized java.lang.Object[] java.awt.MediaTracker.getErrorsID(int)

    private static var getErrorsID_MethodID_9: jmethodID?

    open func getErrorsID( id: Int ) -> [JavaObject]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(id) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getErrorsID", methodSig: "(I)[Ljava/lang/Object;", methodCache: &MediaTracker.getErrorsID_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [JavaObject].self, from: __return )
    }

    open func getErrorsID( _ _id: Int ) -> [JavaObject]! {
        return getErrorsID( id: _id )
    }

    /// public synchronized boolean java.awt.MediaTracker.isErrorAny()

    private static var isErrorAny_MethodID_10: jmethodID?

    open func isErrorAny() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isErrorAny", methodSig: "()Z", methodCache: &MediaTracker.isErrorAny_MethodID_10, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public synchronized boolean java.awt.MediaTracker.isErrorID(int)

    private static var isErrorID_MethodID_11: jmethodID?

    open func isErrorID( id: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(id) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isErrorID", methodSig: "(I)Z", methodCache: &MediaTracker.isErrorID_MethodID_11, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isErrorID( _ _id: Int ) -> Bool {
        return isErrorID( id: _id )
    }

    /// public synchronized void java.awt.MediaTracker.removeImage(java.awt.Image)

    private static var removeImage_MethodID_12: jmethodID?

    open func removeImage( image: Image? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: image, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeImage", methodSig: "(Ljava/awt/Image;)V", methodCache: &MediaTracker.removeImage_MethodID_12, args: &__args, locals: &__locals )
    }

    open func removeImage( _ _image: Image? ) {
        removeImage( image: _image )
    }

    /// public synchronized void java.awt.MediaTracker.removeImage(java.awt.Image,int)

    private static var removeImage_MethodID_13: jmethodID?

    open func removeImage( image: Image?, id: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: image, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeImage", methodSig: "(Ljava/awt/Image;I)V", methodCache: &MediaTracker.removeImage_MethodID_13, args: &__args, locals: &__locals )
    }

    open func removeImage( _ _image: Image?, _ _id: Int ) {
        removeImage( image: _image, id: _id )
    }

    /// public synchronized void java.awt.MediaTracker.removeImage(java.awt.Image,int,int,int)

    private static var removeImage_MethodID_14: jmethodID?

    open func removeImage( image: Image?, id: Int, width: Int, height: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: image, locals: &__locals )
        __args[1] = jvalue( i: jint(id) )
        __args[2] = jvalue( i: jint(width) )
        __args[3] = jvalue( i: jint(height) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeImage", methodSig: "(Ljava/awt/Image;III)V", methodCache: &MediaTracker.removeImage_MethodID_14, args: &__args, locals: &__locals )
    }

    open func removeImage( _ _image: Image?, _ _id: Int, _ _width: Int, _ _height: Int ) {
        removeImage( image: _image, id: _id, width: _width, height: _height )
    }

    /// private void java.awt.MediaTracker.removeImageImpl(java.awt.Image)

    /// private void java.awt.MediaTracker.removeImageImpl(java.awt.Image,int)

    /// private void java.awt.MediaTracker.removeImageImpl(java.awt.Image,int,int,int)

    /// synchronized void java.awt.MediaTracker.setDone()

    // Skipping method: true false false false false 

    /// public int java.awt.MediaTracker.statusAll(boolean)

    private static var statusAll_MethodID_15: jmethodID?

    open func statusAll( load: Bool ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(load ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "statusAll", methodSig: "(Z)I", methodCache: &MediaTracker.statusAll_MethodID_15, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func statusAll( _ _load: Bool ) -> Int {
        return statusAll( load: _load )
    }

    /// private synchronized int java.awt.MediaTracker.statusAll(boolean,boolean)

    /// public int java.awt.MediaTracker.statusID(int,boolean)

    private static var statusID_MethodID_16: jmethodID?

    open func statusID( id: Int, load: Bool ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(id) )
        __args[1] = jvalue( z: jboolean(load ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "statusID", methodSig: "(IZ)I", methodCache: &MediaTracker.statusID_MethodID_16, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func statusID( _ _id: Int, _ _load: Bool ) -> Int {
        return statusID( id: _id, load: _load )
    }

    /// private synchronized int java.awt.MediaTracker.statusID(int,boolean,boolean)

    /// public synchronized boolean java.awt.MediaTracker.waitForAll(long) throws java.lang.InterruptedException

    private static var waitForAll_MethodID_17: jmethodID?

    open func waitForAll( ms: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( j: ms )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "waitForAll", methodSig: "(J)Z", methodCache: &MediaTracker.waitForAll_MethodID_17, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != jboolean(JNI_FALSE)
    }

    open func waitForAll( _ _ms: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        return try waitForAll( ms: _ms )
    }

    /// public void java.awt.MediaTracker.waitForAll() throws java.lang.InterruptedException

    private static var waitForAll_MethodID_18: jmethodID?

    open func waitForAll() throws /* java.lang.InterruptedException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "waitForAll", methodSig: "()V", methodCache: &MediaTracker.waitForAll_MethodID_18, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }


    /// public void java.awt.MediaTracker.waitForID(int) throws java.lang.InterruptedException

    private static var waitForID_MethodID_19: jmethodID?

    open func waitForID( id: Int ) throws /* java.lang.InterruptedException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(id) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "waitForID", methodSig: "(I)V", methodCache: &MediaTracker.waitForID_MethodID_19, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
    }

    open func waitForID( _ _id: Int ) throws /* java.lang.InterruptedException */ {
        try waitForID( id: _id )
    }

    /// public synchronized boolean java.awt.MediaTracker.waitForID(int,long) throws java.lang.InterruptedException

    private static var waitForID_MethodID_20: jmethodID?

    open func waitForID( id: Int, ms: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(id) )
        __args[1] = jvalue( j: ms )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "waitForID", methodSig: "(IJ)Z", methodCache: &MediaTracker.waitForID_MethodID_20, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_lang.InterruptedException( javaObject: throwable )
        }
        return __return != jboolean(JNI_FALSE)
    }

    open func waitForID( _ _id: Int, _ _ms: Int64 ) throws /* java.lang.InterruptedException */ -> Bool {
        return try waitForID( id: _id, ms: _ms )
    }

}

