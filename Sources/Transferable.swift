
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:26 GMT 2016 ///

/// interface java.awt.datatransfer.Transferable ///

public protocol Transferable: JavaProtocol {

    /// public abstract java.awt.datatransfer.DataFlavor[] java.awt.datatransfer.Transferable.getTransferDataFlavors()

    func getTransferDataFlavors() -> [DataFlavor]!

    /// public abstract boolean java.awt.datatransfer.Transferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)

    func isDataFlavorSupported( arg0: DataFlavor? ) -> Bool
    func isDataFlavorSupported( _ _arg0: DataFlavor? ) -> Bool

    /// public abstract java.lang.Object java.awt.datatransfer.Transferable.getTransferData(java.awt.datatransfer.DataFlavor) throws java.awt.datatransfer.UnsupportedFlavorException,java.io.IOException

    func getTransferData( arg0: DataFlavor? ) throws /* java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException */ -> java_lang.JavaObject!
    func getTransferData( _ _arg0: DataFlavor? ) throws /* java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException */ -> java_lang.JavaObject!

}

open class TransferableForward: JNIObjectForward, Transferable {

    private static var TransferableJNIClass: jclass?

    /// public abstract java.awt.datatransfer.DataFlavor[] java.awt.datatransfer.Transferable.getTransferDataFlavors()

    private static var getTransferDataFlavors_MethodID_4: jmethodID?

    open func getTransferDataFlavors() -> [DataFlavor]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransferDataFlavors", methodSig: "()[Ljava/awt/datatransfer/DataFlavor;", methodCache: &TransferableForward.getTransferDataFlavors_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: [DataFlavor](), from: __return )
    }


    /// public abstract boolean java.awt.datatransfer.Transferable.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)

    private static var isDataFlavorSupported_MethodID_5: jmethodID?

    open func isDataFlavorSupported( arg0: DataFlavor? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDataFlavorSupported", methodSig: "(Ljava/awt/datatransfer/DataFlavor;)Z", methodCache: &TransferableForward.isDataFlavorSupported_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isDataFlavorSupported( _ _arg0: DataFlavor? ) -> Bool {
        return isDataFlavorSupported( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.awt.datatransfer.Transferable.getTransferData(java.awt.datatransfer.DataFlavor) throws java.awt.datatransfer.UnsupportedFlavorException,java.io.IOException

    private static var getTransferData_MethodID_6: jmethodID?

    open func getTransferData( arg0: DataFlavor? ) throws /* java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransferData", methodSig: "(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;", methodCache: &TransferableForward.getTransferData_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw UnsupportedFlavorException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getTransferData( _ _arg0: DataFlavor? ) throws /* java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException */ -> java_lang.JavaObject! {
        return try getTransferData( arg0: _arg0 )
    }

}


