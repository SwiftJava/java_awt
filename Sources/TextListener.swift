
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.event.TextListener ///

public protocol TextListener: java_util.EventListener {

    /// public abstract void java.awt.event.TextListener.textValueChanged(java.awt.event.TextEvent)

    func textValueChanged( e: TextEvent? )

}


open class TextListenerForward: java_util.EventListenerForward, TextListener {

    private static var TextListenerJNIClass: jclass?

    /// public abstract void java.awt.event.TextListener.textValueChanged(java.awt.event.TextEvent)

    private static var textValueChanged_MethodID_2: jmethodID?

    open func textValueChanged( e: TextEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "textValueChanged", methodSig: "(Ljava/awt/event/TextEvent;)V", methodCache: &TextListenerForward.textValueChanged_MethodID_2, args: &__args, locals: &__locals )
    }

    open func textValueChanged( _ _e: TextEvent? ) {
        textValueChanged( e: _e )
    }

}

private typealias TextListener_textValueChanged_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func TextListener_textValueChanged_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    TextListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).textValueChanged( e: e != nil ? TextEvent( javaObject: e ) : nil )
}

fileprivate class TextListenerLocal_: JNILocalProxy<TextListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let TextListener_textValueChanged_0_thunk: TextListener_textValueChanged_0_type = TextListener_textValueChanged_0
        natives.append( JNINativeMethod( name: strdup("__textValueChanged"), signature: strdup("(JLjava/awt/event/TextEvent;)V"), fnPtr: unsafeBitCast( TextListener_textValueChanged_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/TextListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension TextListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return TextListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class TextListenerBase: TextListener {

    public init() {}

    /// public abstract void java.awt.event.TextListener.textValueChanged(java.awt.event.TextEvent)

    open func textValueChanged( e: TextEvent? ) /**/ {
    }


}
