
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.event.AWTEventListener ///

public protocol AWTEventListener: java_util.EventListener {

    /// public abstract void java.awt.event.AWTEventListener.eventDispatched(java.awt.AWTEvent)

    func eventDispatched( event: AWTEvent? )

}


open class AWTEventListenerForward: java_util.EventListenerForward, AWTEventListener {

    private static var AWTEventListenerJNIClass: jclass?

    /// public abstract void java.awt.event.AWTEventListener.eventDispatched(java.awt.AWTEvent)

    private static var eventDispatched_MethodID_2: jmethodID?

    open func eventDispatched( event: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: event != nil ? event! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "eventDispatched", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &AWTEventListenerForward.eventDispatched_MethodID_2, args: &__args, locals: &__locals )
    }

    open func eventDispatched( _ _event: AWTEvent? ) {
        eventDispatched( event: _event )
    }

}


private typealias AWTEventListener_eventDispatched_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func AWTEventListener_eventDispatched_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ event: jobject? ) -> () {
    JNI.inNative = true;
    AWTEventListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).eventDispatched( event: event != nil ? AWTEvent( javaObject: event ) : nil )
    JNI.inNative = false;
}

fileprivate class AWTEventListenerLocal_: JNILocalProxy<AWTEventListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let AWTEventListener_eventDispatched_0_thunk: AWTEventListener_eventDispatched_0_type = AWTEventListener_eventDispatched_0
        natives.append( JNINativeMethod( name: strdup("__eventDispatched"), signature: strdup("(JLjava/awt/AWTEvent;)V"), fnPtr: unsafeBitCast( AWTEventListener_eventDispatched_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/AWTEventListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension AWTEventListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return AWTEventListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class AWTEventListenerBase: AWTEventListener {

    public init() {}

    /// public abstract void java.awt.event.AWTEventListener.eventDispatched(java.awt.AWTEvent)

    open func eventDispatched( event: AWTEvent? ) /**/ {
    }

    open func eventDispatched( _ _event: AWTEvent? ) /**/ {
        eventDispatched( event: _event )
    }

}
