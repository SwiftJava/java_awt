
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.Container ///

open class Container: Component {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ContainerJNIClass: jclass?

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &Container.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &Container.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public java.awt.Container()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/Container", classCache: &Container.ContainerJNIClass, methodSig: "()V", methodCache: &Container.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// private static java.awt.Component java.awt.Container.getChildAt(java.awt.Component,int,int,boolean)

    /// private static native void java.awt.Container.initIDs()

    /// private static boolean java.awt.Container.isRemoveNotifyNeeded(java.awt.Component,java.awt.Container,java.awt.Container)

    /// public java.awt.Component java.awt.Container.add(java.awt.Component)

    private static var add_MethodID_2: jmethodID?

    open func add( arg0: Component? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &Container.add_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func add( _ _arg0: Component? ) -> Component! {
        return add( arg0: _arg0 )
    }

    /// public java.awt.Component java.awt.Container.add(java.awt.Component,int)

    private static var add_MethodID_3: jmethodID?

    open func add( arg0: Component?, arg1: Int ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/awt/Component;I)Ljava/awt/Component;", methodCache: &Container.add_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func add( _ _arg0: Component?, _ _arg1: Int ) -> Component! {
        return add( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.Container.add(java.awt.Component,java.lang.Object)

    private static var add_MethodID_4: jmethodID?

    open func add( arg0: Component?, arg1: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/awt/Component;Ljava/lang/Object;)V", methodCache: &Container.add_MethodID_4, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: Component?, _ _arg1: java_swift.JavaObject? ) {
        add( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.Container.add(java.awt.Component,java.lang.Object,int)

    private static var add_MethodID_5: jmethodID?

    open func add( arg0: Component?, arg1: java_swift.JavaObject?, arg2: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/awt/Component;Ljava/lang/Object;I)V", methodCache: &Container.add_MethodID_5, args: &__args, locals: &__locals )
    }

    open func add( _ _arg0: Component?, _ _arg1: java_swift.JavaObject?, _ _arg2: Int ) {
        add( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Component java.awt.Container.add(java.lang.String,java.awt.Component)

    private static var add_MethodID_6: jmethodID?

    open func add( arg0: String?, arg1: Component? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/String;Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &Container.add_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func add( _ _arg0: String?, _ _arg1: Component? ) -> Component! {
        return add( arg0: _arg0, arg1: _arg1 )
    }

    /// public synchronized void java.awt.Container.addContainerListener(java.awt.event.ContainerListener)

    private static var addContainerListener_MethodID_7: jmethodID?

    open func addContainerListener( arg0: ContainerListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addContainerListener", methodSig: "(Ljava/awt/event/ContainerListener;)V", methodCache: &Container.addContainerListener_MethodID_7, args: &__args, locals: &__locals )
    }

    open func addContainerListener( _ _arg0: ContainerListener? ) {
        addContainerListener( arg0: _arg0 )
    }

    /// private void java.awt.Container.addDelicately(java.awt.Component,java.awt.Container,int)

    /// protected void java.awt.Container.addImpl(java.awt.Component,java.lang.Object,int)

    private static var addImpl_MethodID_8: jmethodID?

    open func addImpl( arg0: Component?, arg1: java_swift.JavaObject?, arg2: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( i: jint(arg2) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addImpl", methodSig: "(Ljava/awt/Component;Ljava/lang/Object;I)V", methodCache: &Container.addImpl_MethodID_8, args: &__args, locals: &__locals )
    }

    open func addImpl( _ _arg0: Component?, _ _arg1: java_swift.JavaObject?, _ _arg2: Int ) {
        addImpl( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.Container.addNotify()

    // Skipping method: false true false false false 

    /// public void java.awt.Container.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)

    // Skipping method: false true false false false 

    /// public void java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)

    // Skipping method: false true false false false 

    /// void java.awt.Container.adjustDecendantsOnParent(int)

    // Skipping method: true false false false false 

    /// void java.awt.Container.adjustDescendants(int)

    // Skipping method: true false false false false 

    /// void java.awt.Container.adjustListeningChildren(long,int)

    // Skipping method: true false false false false 

    /// public void java.awt.Container.applyComponentOrientation(java.awt.ComponentOrientation)

    // Skipping method: false true false false false 

    /// public boolean java.awt.Container.areFocusTraversalKeysSet(int)

    // Skipping method: false true false false false 

    /// boolean java.awt.Container.canContainFocusOwner(java.awt.Component)

    // Skipping method: true false false false false 

    /// private void java.awt.Container.checkAddToSelf(java.awt.Component)

    /// private void java.awt.Container.checkAdding(java.awt.Component,int)

    /// void java.awt.Container.checkGD(java.lang.String)

    // Skipping method: true false false false false 

    /// private void java.awt.Container.checkNotAWindow(java.awt.Component)

    /// void java.awt.Container.clearCurrentFocusCycleRootOnHide()

    // Skipping method: true false false false false 

    /// void java.awt.Container.clearMostRecentFocusOwnerOnHide()

    // Skipping method: true false false false false 

    /// final boolean java.awt.Container.containsFocus()

    // Skipping method: true false false false false 

    /// public int java.awt.Container.countComponents()

    private static var countComponents_MethodID_9: jmethodID?

    open func countComponents() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "countComponents", methodSig: "()I", methodCache: &Container.countComponents_MethodID_9, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// int java.awt.Container.countHierarchyMembers()

    // Skipping method: true false false false false 

    /// final void java.awt.Container.createChildHierarchyEvents(int,long,boolean)

    // Skipping method: true false false false false 

    /// final int java.awt.Container.createHierarchyEvents(int,java.awt.Component,java.awt.Container,long,boolean)

    // Skipping method: true false false false false 

    /// final void java.awt.Container.decreaseComponentCount(java.awt.Component)

    // Skipping method: true false false false false 

    /// public void java.awt.Container.deliverEvent(java.awt.Event)

    // Skipping method: false true false false false 

    /// void java.awt.Container.dispatchEventImpl(java.awt.AWTEvent)

    // Skipping method: true false false false false 

    /// void java.awt.Container.dispatchEventToSelf(java.awt.AWTEvent)

    // Skipping method: true false false false false 

    /// public void java.awt.Container.doLayout()

    // Skipping method: false true false false false 

    /// boolean java.awt.Container.eventEnabled(java.awt.AWTEvent)

    // Skipping method: true false false false false 

    /// public java.awt.Component java.awt.Container.findComponentAt(int,int)

    private static var findComponentAt_MethodID_10: jmethodID?

    open func findComponentAt( arg0: Int, arg1: Int ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findComponentAt", methodSig: "(II)Ljava/awt/Component;", methodCache: &Container.findComponentAt_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func findComponentAt( _ _arg0: Int, _ _arg1: Int ) -> Component! {
        return findComponentAt( arg0: _arg0, arg1: _arg1 )
    }

    /// final java.awt.Component java.awt.Container.findComponentAt(int,int,boolean)

    // Skipping method: true false false false false 

    /// public java.awt.Component java.awt.Container.findComponentAt(java.awt.Point)

    private static var findComponentAt_MethodID_11: jmethodID?

    open func findComponentAt( arg0: Point? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "findComponentAt", methodSig: "(Ljava/awt/Point;)Ljava/awt/Component;", methodCache: &Container.findComponentAt_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func findComponentAt( _ _arg0: Point? ) -> Component! {
        return findComponentAt( arg0: _arg0 )
    }

    /// final java.awt.Component java.awt.Container.findComponentAtImpl(int,int,boolean)

    // Skipping method: true false false false false 

    /// private java.awt.Container java.awt.Container.findTraversalRoot()

    /// javax.accessibility.Accessible java.awt.Container.getAccessibleAt(java.awt.Point)

    // Skipping method: true false false false false 

    /// javax.accessibility.Accessible java.awt.Container.getAccessibleChild(int)

    // Skipping method: true false false false false 

    /// int java.awt.Container.getAccessibleChildrenCount()

    // Skipping method: true false false false false 

    /// public float java.awt.Container.getAlignmentX()

    // Skipping method: false true false false false 

    /// public float java.awt.Container.getAlignmentY()

    // Skipping method: false true false false false 

    /// private int java.awt.Container.getBottommostComponentIndex()

    /// public java.awt.Component java.awt.Container.getComponent(int)

    private static var getComponent_MethodID_12: jmethodID?

    open func getComponent( arg0: Int ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponent", methodSig: "(I)Ljava/awt/Component;", methodCache: &Container.getComponent_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    open func getComponent( _ _arg0: Int ) -> Component! {
        return getComponent( arg0: _arg0 )
    }

    /// public java.awt.Component java.awt.Container.getComponentAt(int,int)

    // Skipping method: false true false false false 

    /// public java.awt.Component java.awt.Container.getComponentAt(java.awt.Point)

    // Skipping method: false true false false false 

    /// public int java.awt.Container.getComponentCount()

    private static var getComponentCount_MethodID_13: jmethodID?

    open func getComponentCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getComponentCount", methodSig: "()I", methodCache: &Container.getComponentCount_MethodID_13, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public int java.awt.Container.getComponentZOrder(java.awt.Component)

    private static var getComponentZOrder_MethodID_14: jmethodID?

    open func getComponentZOrder( arg0: Component? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getComponentZOrder", methodSig: "(Ljava/awt/Component;)I", methodCache: &Container.getComponentZOrder_MethodID_14, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getComponentZOrder( _ _arg0: Component? ) -> Int {
        return getComponentZOrder( arg0: _arg0 )
    }

    /// public java.awt.Component[] java.awt.Container.getComponents()

    private static var getComponents_MethodID_15: jmethodID?

    open func getComponents() -> [Component]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponents", methodSig: "()[Ljava/awt/Component;", methodCache: &Container.getComponents_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Component].self, from: __return )
    }


    /// java.awt.Component[] java.awt.Container.getComponentsSync()

    // Skipping method: true false false false false 

    /// final java.awt.Component[] java.awt.Container.getComponents_NoClientCode()

    // Skipping method: true false false false false 

    /// public synchronized java.awt.event.ContainerListener[] java.awt.Container.getContainerListeners()

    private static var getContainerListeners_MethodID_16: jmethodID?

    open func getContainerListeners() -> [ContainerListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getContainerListeners", methodSig: "()[Ljava/awt/event/ContainerListener;", methodCache: &Container.getContainerListeners_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [ContainerListenerForward].self, from: __return )
    }


    /// java.awt.Component java.awt.Container.getDropTargetEventTarget(int,int,boolean)

    // Skipping method: true false false false false 

    /// public java.util.Set java.awt.Container.getFocusTraversalKeys(int)

    // Skipping method: false true false false false 

    /// public java.awt.FocusTraversalPolicy java.awt.Container.getFocusTraversalPolicy()

    private static var getFocusTraversalPolicy_MethodID_17: jmethodID?

    open func getFocusTraversalPolicy() -> FocusTraversalPolicy! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFocusTraversalPolicy", methodSig: "()Ljava/awt/FocusTraversalPolicy;", methodCache: &Container.getFocusTraversalPolicy_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FocusTraversalPolicy( javaObject: __return ) : nil
    }


    /// java.awt.Container java.awt.Container.getHeavyweightContainer()

    // Skipping method: true false false false false 

    /// public java.awt.Insets java.awt.Container.getInsets()

    private static var getInsets_MethodID_18: jmethodID?

    open func getInsets() -> Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInsets", methodSig: "()Ljava/awt/Insets;", methodCache: &Container.getInsets_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Insets( javaObject: __return ) : nil
    }


    /// public java.awt.LayoutManager java.awt.Container.getLayout()

    private static var getLayout_MethodID_19: jmethodID?

    open func getLayout() -> LayoutManager! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLayout", methodSig: "()Ljava/awt/LayoutManager;", methodCache: &Container.getLayout_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LayoutManagerForward( javaObject: __return ) : nil
    }


    /// public java.util.EventListener[] java.awt.Container.getListeners(java.lang.Class)

    // Skipping method: false true false false false 

    /// private int java.awt.Container.getListenersCount(int,boolean)

    /// public java.awt.Dimension java.awt.Container.getMaximumSize()

    // Skipping method: false true false false false 

    /// public java.awt.Dimension java.awt.Container.getMinimumSize()

    // Skipping method: false true false false false 

    /// java.awt.Component java.awt.Container.getMouseEventTarget(int,int,boolean)

    // Skipping method: true false false false false 

    /// private java.awt.Component java.awt.Container.getMouseEventTarget(int,int,boolean,java.awt.Container$EventTargetFilter,boolean)

    /// private java.awt.Component java.awt.Container.getMouseEventTargetImpl(int,int,boolean,java.awt.Container$EventTargetFilter,boolean,boolean)

    /// public java.awt.Point java.awt.Container.getMousePosition(boolean) throws java.awt.HeadlessException

    private static var getMousePosition_MethodID_20: jmethodID?

    open func getMousePosition( arg0: Bool ) throws /* java.awt.HeadlessException */ -> Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMousePosition", methodSig: "(Z)Ljava/awt/Point;", methodCache: &Container.getMousePosition_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw HeadlessException( javaObject: throwable )
        }
        return __return != nil ? Point( javaObject: __return ) : nil
    }

    open func getMousePosition( _ _arg0: Bool ) throws /* java.awt.HeadlessException */ -> Point! {
        return try getMousePosition( arg0: _arg0 )
    }

    /// final sun.java2d.pipe.Region java.awt.Container.getOpaqueShape()

    // Skipping method: true false false false false 

    /// public java.awt.Dimension java.awt.Container.getPreferredSize()

    // Skipping method: false true false false false 

    /// private int java.awt.Container.getTopmostComponentIndex()

    /// final java.awt.Container java.awt.Container.getTraversalRoot()

    // Skipping method: true false false false false 

    /// final boolean java.awt.Container.hasHeavyweightDescendants()

    // Skipping method: true false false false false 

    /// final boolean java.awt.Container.hasLightweightDescendants()

    // Skipping method: true false false false false 

    /// final void java.awt.Container.increaseComponentCount(java.awt.Component)

    // Skipping method: true false false false false 

    /// void java.awt.Container.initializeFocusTraversalKeys()

    // Skipping method: true false false false false 

    /// public java.awt.Insets java.awt.Container.insets()

    private static var insets_MethodID_21: jmethodID?

    open func insets() -> Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insets", methodSig: "()Ljava/awt/Insets;", methodCache: &Container.insets_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Insets( javaObject: __return ) : nil
    }


    /// public void java.awt.Container.invalidate()

    // Skipping method: false true false false false 

    /// void java.awt.Container.invalidateParent()

    // Skipping method: true false false false false 

    /// void java.awt.Container.invalidateTree()

    // Skipping method: true false false false false 

    /// public boolean java.awt.Container.isAncestorOf(java.awt.Component)

    private static var isAncestorOf_MethodID_22: jmethodID?

    open func isAncestorOf( arg0: Component? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAncestorOf", methodSig: "(Ljava/awt/Component;)Z", methodCache: &Container.isAncestorOf_MethodID_22, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isAncestorOf( _ _arg0: Component? ) -> Bool {
        return isAncestorOf( arg0: _arg0 )
    }

    /// public boolean java.awt.Container.isFocusCycleRoot(java.awt.Container)

    // Skipping method: false true false false false 

    /// public boolean java.awt.Container.isFocusCycleRoot()

    private static var isFocusCycleRoot_MethodID_23: jmethodID?

    open func isFocusCycleRoot() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusCycleRoot", methodSig: "()Z", methodCache: &Container.isFocusCycleRoot_MethodID_23, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final boolean java.awt.Container.isFocusTraversalPolicyProvider()

    private static var isFocusTraversalPolicyProvider_MethodID_24: jmethodID?

    open func isFocusTraversalPolicyProvider() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusTraversalPolicyProvider", methodSig: "()Z", methodCache: &Container.isFocusTraversalPolicyProvider_MethodID_24, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean java.awt.Container.isFocusTraversalPolicySet()

    private static var isFocusTraversalPolicySet_MethodID_25: jmethodID?

    open func isFocusTraversalPolicySet() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusTraversalPolicySet", methodSig: "()Z", methodCache: &Container.isFocusTraversalPolicySet_MethodID_25, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private boolean java.awt.Container.isParentOf(java.awt.Component)

    /// final boolean java.awt.Container.isRecursivelyVisibleUpToHeavyweightContainer()

    // Skipping method: true false false false false 

    /// boolean java.awt.Container.isSameOrAncestorOf(java.awt.Component,boolean)

    // Skipping method: true false false false false 

    /// public boolean java.awt.Container.isValidateRoot()

    private static var isValidateRoot_MethodID_26: jmethodID?

    open func isValidateRoot() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isValidateRoot", methodSig: "()Z", methodCache: &Container.isValidateRoot_MethodID_26, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public void java.awt.Container.layout()

    // Skipping method: false true false false false 

    /// void java.awt.Container.lightweightPaint(java.awt.Graphics)

    // Skipping method: true false false false false 

    /// void java.awt.Container.lightweightPrint(java.awt.Graphics)

    // Skipping method: true false false false false 

    /// public void java.awt.Container.list(java.io.PrintWriter,int)

    // Skipping method: false true false false false 

    /// public void java.awt.Container.list(java.io.PrintStream,int)

    // Skipping method: false true false false false 

    /// public java.awt.Component java.awt.Container.locate(int,int)

    // Skipping method: false true false false false 

    /// public java.awt.Dimension java.awt.Container.minimumSize()

    // Skipping method: false true false false false 

    /// void java.awt.Container.mixOnHiding(boolean)

    // Skipping method: true false false false false 

    /// void java.awt.Container.mixOnReshaping()

    // Skipping method: true false false false false 

    /// void java.awt.Container.mixOnShowing()

    // Skipping method: true false false false false 

    /// void java.awt.Container.mixOnValidating()

    // Skipping method: true false false false false 

    /// void java.awt.Container.mixOnZOrderChanging(int,int)

    // Skipping method: true false false false false 

    /// int java.awt.Container.numListening(long)

    // Skipping method: true false false false false 

    /// public void java.awt.Container.paint(java.awt.Graphics)

    // Skipping method: false true false false false 

    /// public void java.awt.Container.paintComponents(java.awt.Graphics)

    private static var paintComponents_MethodID_27: jmethodID?

    open func paintComponents( arg0: Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintComponents", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &Container.paintComponents_MethodID_27, args: &__args, locals: &__locals )
    }

    open func paintComponents( _ _arg0: Graphics? ) {
        paintComponents( arg0: _arg0 )
    }

    /// void java.awt.Container.paintHeavyweightComponents(java.awt.Graphics)

    // Skipping method: true false false false false 

    /// protected java.lang.String java.awt.Container.paramString()

    private static var paramString_MethodID_28: jmethodID?

    override open func paramString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &Container.paramString_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// void java.awt.Container.postProcessKeyEvent(java.awt.event.KeyEvent)

    // Skipping method: true false false false false 

    /// boolean java.awt.Container.postsOldMouseEvents()

    // Skipping method: true false false false false 

    /// void java.awt.Container.preProcessKeyEvent(java.awt.event.KeyEvent)

    // Skipping method: true false false false false 

    /// public java.awt.Dimension java.awt.Container.preferredSize()

    // Skipping method: false true false false false 

    /// public void java.awt.Container.print(java.awt.Graphics)

    // Skipping method: false true false false false 

    /// public void java.awt.Container.printComponents(java.awt.Graphics)

    private static var printComponents_MethodID_29: jmethodID?

    open func printComponents( arg0: Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "printComponents", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &Container.printComponents_MethodID_29, args: &__args, locals: &__locals )
    }

    open func printComponents( _ _arg0: Graphics? ) {
        printComponents( arg0: _arg0 )
    }

    /// void java.awt.Container.printHeavyweightComponents(java.awt.Graphics)

    // Skipping method: true false false false false 

    /// protected void java.awt.Container.processContainerEvent(java.awt.event.ContainerEvent)

    private static var processContainerEvent_MethodID_30: jmethodID?

    open func processContainerEvent( arg0: ContainerEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processContainerEvent", methodSig: "(Ljava/awt/event/ContainerEvent;)V", methodCache: &Container.processContainerEvent_MethodID_30, args: &__args, locals: &__locals )
    }

    open func processContainerEvent( _ _arg0: ContainerEvent? ) {
        processContainerEvent( arg0: _arg0 )
    }

    /// protected void java.awt.Container.processEvent(java.awt.AWTEvent)

    private static var processEvent_MethodID_31: jmethodID?

    override open func processEvent( arg0: AWTEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &Container.processEvent_MethodID_31, args: &__args, locals: &__locals )
    }

    override open func processEvent( _ _arg0: AWTEvent? ) {
        processEvent( arg0: _arg0 )
    }

    /// void java.awt.Container.proxyEnableEvents(long)

    // Skipping method: true false false false false 

    /// private void java.awt.Container.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// final void java.awt.Container.recursiveApplyCurrentShape(int)

    // Skipping method: true false false false false 

    /// final void java.awt.Container.recursiveApplyCurrentShape(int,int)

    // Skipping method: true false false false false 

    /// final void java.awt.Container.recursiveApplyCurrentShape()

    // Skipping method: true false false false false 

    /// private void java.awt.Container.recursiveHideHeavyweightChildren()

    /// private void java.awt.Container.recursiveRelocateHeavyweightChildren(java.awt.Point)

    /// private void java.awt.Container.recursiveShowHeavyweightChildren()

    /// final void java.awt.Container.recursiveSubtractAndApplyShape(sun.java2d.pipe.Region)

    // Skipping method: true false false false false 

    /// final void java.awt.Container.recursiveSubtractAndApplyShape(sun.java2d.pipe.Region,int)

    // Skipping method: true false false false false 

    /// final void java.awt.Container.recursiveSubtractAndApplyShape(sun.java2d.pipe.Region,int,int)

    // Skipping method: true false false false false 

    /// public void java.awt.Container.remove(java.awt.Component)

    private static var remove_MethodID_32: jmethodID?

    open func remove( arg0: Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/awt/Component;)V", methodCache: &Container.remove_MethodID_32, args: &__args, locals: &__locals )
    }

    open func remove( _ _arg0: Component? ) {
        remove( arg0: _arg0 )
    }

    /// public void java.awt.Container.remove(int)

    private static var remove_MethodID_33: jmethodID?

    open func remove( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(I)V", methodCache: &Container.remove_MethodID_33, args: &__args, locals: &__locals )
    }

    open func remove( _ _arg0: Int ) {
        remove( arg0: _arg0 )
    }

    /// public void java.awt.Container.removeAll()

    private static var removeAll_MethodID_34: jmethodID?

    open func removeAll() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeAll", methodSig: "()V", methodCache: &Container.removeAll_MethodID_34, args: &__args, locals: &__locals )
    }


    /// public synchronized void java.awt.Container.removeContainerListener(java.awt.event.ContainerListener)

    private static var removeContainerListener_MethodID_35: jmethodID?

    open func removeContainerListener( arg0: ContainerListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeContainerListener", methodSig: "(Ljava/awt/event/ContainerListener;)V", methodCache: &Container.removeContainerListener_MethodID_35, args: &__args, locals: &__locals )
    }

    open func removeContainerListener( _ _arg0: ContainerListener? ) {
        removeContainerListener( arg0: _arg0 )
    }

    /// private boolean java.awt.Container.removeDelicately(java.awt.Component,java.awt.Container,int)

    /// public void java.awt.Container.removeNotify()

    // Skipping method: false true false false false 

    /// private void java.awt.Container.reparentChild(java.awt.Component)

    /// private void java.awt.Container.reparentTraverse(java.awt.peer.ContainerPeer,java.awt.Container)

    /// public void java.awt.Container.setComponentZOrder(java.awt.Component,int)

    private static var setComponentZOrder_MethodID_36: jmethodID?

    open func setComponentZOrder( arg0: Component?, arg1: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = jvalue( i: jint(arg1) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setComponentZOrder", methodSig: "(Ljava/awt/Component;I)V", methodCache: &Container.setComponentZOrder_MethodID_36, args: &__args, locals: &__locals )
    }

    open func setComponentZOrder( _ _arg0: Component?, _ _arg1: Int ) {
        setComponentZOrder( arg0: _arg0, arg1: _arg1 )
    }

    /// public void java.awt.Container.setFocusCycleRoot(boolean)

    private static var setFocusCycleRoot_MethodID_37: jmethodID?

    open func setFocusCycleRoot( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFocusCycleRoot", methodSig: "(Z)V", methodCache: &Container.setFocusCycleRoot_MethodID_37, args: &__args, locals: &__locals )
    }

    open func setFocusCycleRoot( _ _arg0: Bool ) {
        setFocusCycleRoot( arg0: _arg0 )
    }

    /// public void java.awt.Container.setFocusTraversalKeys(int,java.util.Set)

    // Skipping method: false true false false false 

    /// public void java.awt.Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)

    private static var setFocusTraversalPolicy_MethodID_38: jmethodID?

    open func setFocusTraversalPolicy( arg0: FocusTraversalPolicy? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFocusTraversalPolicy", methodSig: "(Ljava/awt/FocusTraversalPolicy;)V", methodCache: &Container.setFocusTraversalPolicy_MethodID_38, args: &__args, locals: &__locals )
    }

    open func setFocusTraversalPolicy( _ _arg0: FocusTraversalPolicy? ) {
        setFocusTraversalPolicy( arg0: _arg0 )
    }

    /// public final void java.awt.Container.setFocusTraversalPolicyProvider(boolean)

    private static var setFocusTraversalPolicyProvider_MethodID_39: jmethodID?

    open func setFocusTraversalPolicyProvider( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFocusTraversalPolicyProvider", methodSig: "(Z)V", methodCache: &Container.setFocusTraversalPolicyProvider_MethodID_39, args: &__args, locals: &__locals )
    }

    open func setFocusTraversalPolicyProvider( _ _arg0: Bool ) {
        setFocusTraversalPolicyProvider( arg0: _arg0 )
    }

    /// public void java.awt.Container.setFont(java.awt.Font)

    // Skipping method: false true false false false 

    /// public void java.awt.Container.setLayout(java.awt.LayoutManager)

    private static var setLayout_MethodID_40: jmethodID?

    open func setLayout( arg0: LayoutManager? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLayout", methodSig: "(Ljava/awt/LayoutManager;)V", methodCache: &Container.setLayout_MethodID_40, args: &__args, locals: &__locals )
    }

    open func setLayout( _ _arg0: LayoutManager? ) {
        setLayout( arg0: _arg0 )
    }

    /// private void java.awt.Container.startLWModal()

    /// private void java.awt.Container.stopLWModal()

    /// public void java.awt.Container.transferFocusDownCycle()

    private static var transferFocusDownCycle_MethodID_41: jmethodID?

    open func transferFocusDownCycle() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transferFocusDownCycle", methodSig: "()V", methodCache: &Container.transferFocusDownCycle_MethodID_41, args: &__args, locals: &__locals )
    }


    /// public void java.awt.Container.update(java.awt.Graphics)

    // Skipping method: false true false false false 

    /// boolean java.awt.Container.updateGraphicsData(java.awt.GraphicsConfiguration)

    // Skipping method: true false false false false 

    /// public void java.awt.Container.validate()

    // Skipping method: false true false false false 

    /// protected void java.awt.Container.validateTree()

    private static var validateTree_MethodID_42: jmethodID?

    open func validateTree() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "validateTree", methodSig: "()V", methodCache: &Container.validateTree_MethodID_42, args: &__args, locals: &__locals )
    }


    /// final void java.awt.Container.validateUnconditionally()

    // Skipping method: true false false false false 

    /// private void java.awt.Container.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

}

