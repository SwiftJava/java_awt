
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.image.renderable.RenderableImageProducer ///

open class RenderableImageProducer: java_swift.JavaObject, ImageProducer, java_swift.Runnable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RenderableImageProducerJNIClass: jclass?

    /// java.util.Vector java.awt.image.renderable.RenderableImageProducer.ics

    // Skipping field: true false false false false false 

    /// java.awt.image.renderable.RenderContext java.awt.image.renderable.RenderableImageProducer.rc

    // Skipping field: true false false false false false 

    /// java.awt.image.renderable.RenderableImage java.awt.image.renderable.RenderableImageProducer.rdblImage

    // Skipping field: true false false false false false 

    /// public java.awt.image.renderable.RenderableImageProducer(java.awt.image.renderable.RenderableImage,java.awt.image.renderable.RenderContext)

    private static var new_MethodID_1: jmethodID?

    public convenience init( rdblImage: RenderableImage?, rc: RenderContext? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: rdblImage, locals: &__locals )
        __args[1] = JNIType.toJava( value: rc, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/renderable/RenderableImageProducer", classCache: &RenderableImageProducer.RenderableImageProducerJNIClass, methodSig: "(Ljava/awt/image/renderable/RenderableImage;Ljava/awt/image/renderable/RenderContext;)V", methodCache: &RenderableImageProducer.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _rdblImage: RenderableImage?, _ _rc: RenderContext? ) {
        self.init( rdblImage: _rdblImage, rc: _rc )
    }

    /// public synchronized void java.awt.image.renderable.RenderableImageProducer.addConsumer(java.awt.image.ImageConsumer)

    private static var addConsumer_MethodID_2: jmethodID?

    open func addConsumer( ic: ImageConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ic, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addConsumer", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &RenderableImageProducer.addConsumer_MethodID_2, args: &__args, locals: &__locals )
    }

    open func addConsumer( _ _ic: ImageConsumer? ) {
        addConsumer( ic: _ic )
    }

    /// public synchronized boolean java.awt.image.renderable.RenderableImageProducer.isConsumer(java.awt.image.ImageConsumer)

    private static var isConsumer_MethodID_3: jmethodID?

    open func isConsumer( ic: ImageConsumer? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ic, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isConsumer", methodSig: "(Ljava/awt/image/ImageConsumer;)Z", methodCache: &RenderableImageProducer.isConsumer_MethodID_3, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isConsumer( _ _ic: ImageConsumer? ) -> Bool {
        return isConsumer( ic: _ic )
    }

    /// public synchronized void java.awt.image.renderable.RenderableImageProducer.removeConsumer(java.awt.image.ImageConsumer)

    private static var removeConsumer_MethodID_4: jmethodID?

    open func removeConsumer( ic: ImageConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ic, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeConsumer", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &RenderableImageProducer.removeConsumer_MethodID_4, args: &__args, locals: &__locals )
    }

    open func removeConsumer( _ _ic: ImageConsumer? ) {
        removeConsumer( ic: _ic )
    }

    /// public void java.awt.image.renderable.RenderableImageProducer.requestTopDownLeftRightResend(java.awt.image.ImageConsumer)

    private static var requestTopDownLeftRightResend_MethodID_5: jmethodID?

    open func requestTopDownLeftRightResend( ic: ImageConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ic, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "requestTopDownLeftRightResend", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &RenderableImageProducer.requestTopDownLeftRightResend_MethodID_5, args: &__args, locals: &__locals )
    }

    open func requestTopDownLeftRightResend( _ _ic: ImageConsumer? ) {
        requestTopDownLeftRightResend( ic: _ic )
    }

    /// public void java.awt.image.renderable.RenderableImageProducer.run()

    private static var run_MethodID_6: jmethodID?

    open func run() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "run", methodSig: "()V", methodCache: &RenderableImageProducer.run_MethodID_6, args: &__args, locals: &__locals )
    }


    /// public synchronized void java.awt.image.renderable.RenderableImageProducer.setRenderContext(java.awt.image.renderable.RenderContext)

    private static var setRenderContext_MethodID_7: jmethodID?

    open func setRenderContext( rc: RenderContext? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: rc, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRenderContext", methodSig: "(Ljava/awt/image/renderable/RenderContext;)V", methodCache: &RenderableImageProducer.setRenderContext_MethodID_7, args: &__args, locals: &__locals )
    }

    open func setRenderContext( _ _rc: RenderContext? ) {
        setRenderContext( rc: _rc )
    }

    /// public synchronized void java.awt.image.renderable.RenderableImageProducer.startProduction(java.awt.image.ImageConsumer)

    private static var startProduction_MethodID_8: jmethodID?

    open func startProduction( ic: ImageConsumer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ic, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "startProduction", methodSig: "(Ljava/awt/image/ImageConsumer;)V", methodCache: &RenderableImageProducer.startProduction_MethodID_8, args: &__args, locals: &__locals )
    }

    open func startProduction( _ _ic: ImageConsumer? ) {
        startProduction( ic: _ic )
    }

}

