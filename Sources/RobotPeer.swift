
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:15 GMT 2016 ///

/// interface java.awt.peer.RobotPeer ///

public protocol RobotPeer: JavaProtocol {

    /// public abstract void java.awt.peer.RobotPeer.dispose()

    func dispose()

    /// public abstract void java.awt.peer.RobotPeer.mouseMove(int,int)

    func mouseMove( arg0: Int, arg1: Int )
    func mouseMove( _ _arg0: Int, _ _arg1: Int )

    /// public abstract void java.awt.peer.RobotPeer.mousePress(int)

    func mousePress( arg0: Int )
    func mousePress( _ _arg0: Int )

    /// public abstract void java.awt.peer.RobotPeer.mouseRelease(int)

    func mouseRelease( arg0: Int )
    func mouseRelease( _ _arg0: Int )

    /// public abstract void java.awt.peer.RobotPeer.mouseWheel(int)

    func mouseWheel( arg0: Int )
    func mouseWheel( _ _arg0: Int )

    /// public abstract void java.awt.peer.RobotPeer.keyPress(int)

    func keyPress( arg0: Int )
    func keyPress( _ _arg0: Int )

    /// public abstract void java.awt.peer.RobotPeer.keyRelease(int)

    func keyRelease( arg0: Int )
    func keyRelease( _ _arg0: Int )

    /// public abstract int java.awt.peer.RobotPeer.getRGBPixel(int,int)

    func getRGBPixel( arg0: Int, arg1: Int ) -> Int
    func getRGBPixel( _ _arg0: Int, _ _arg1: Int ) -> Int

    /// public abstract int[] java.awt.peer.RobotPeer.getRGBPixels(java.awt.Rectangle)

    func getRGBPixels( arg0: Rectangle? ) -> [Int32]!
    func getRGBPixels( _ _arg0: Rectangle? ) -> [Int32]!

}

open class RobotPeerForward: JNIObjectForward, RobotPeer {

    private static var RobotPeerJNIClass: jclass?

    /// public abstract void java.awt.peer.RobotPeer.dispose()

    private static var dispose_MethodID_10: jmethodID?

    open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &RobotPeerForward.dispose_MethodID_10, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.RobotPeer.mouseMove(int,int)

    private static var mouseMove_MethodID_11: jmethodID?

    open func mouseMove( arg0: Int, arg1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseMove", methodSig: "(II)V", methodCache: &RobotPeerForward.mouseMove_MethodID_11, args: &__args, locals: &__locals )
    }

    open func mouseMove( _ _arg0: Int, _ _arg1: Int ) {
        mouseMove( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.peer.RobotPeer.mousePress(int)

    private static var mousePress_MethodID_12: jmethodID?

    open func mousePress( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mousePress", methodSig: "(I)V", methodCache: &RobotPeerForward.mousePress_MethodID_12, args: &__args, locals: &__locals )
    }

    open func mousePress( _ _arg0: Int ) {
        mousePress( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.RobotPeer.mouseRelease(int)

    private static var mouseRelease_MethodID_13: jmethodID?

    open func mouseRelease( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseRelease", methodSig: "(I)V", methodCache: &RobotPeerForward.mouseRelease_MethodID_13, args: &__args, locals: &__locals )
    }

    open func mouseRelease( _ _arg0: Int ) {
        mouseRelease( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.RobotPeer.mouseWheel(int)

    private static var mouseWheel_MethodID_14: jmethodID?

    open func mouseWheel( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseWheel", methodSig: "(I)V", methodCache: &RobotPeerForward.mouseWheel_MethodID_14, args: &__args, locals: &__locals )
    }

    open func mouseWheel( _ _arg0: Int ) {
        mouseWheel( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.RobotPeer.keyPress(int)

    private static var keyPress_MethodID_15: jmethodID?

    open func keyPress( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "keyPress", methodSig: "(I)V", methodCache: &RobotPeerForward.keyPress_MethodID_15, args: &__args, locals: &__locals )
    }

    open func keyPress( _ _arg0: Int ) {
        keyPress( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.RobotPeer.keyRelease(int)

    private static var keyRelease_MethodID_16: jmethodID?

    open func keyRelease( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "keyRelease", methodSig: "(I)V", methodCache: &RobotPeerForward.keyRelease_MethodID_16, args: &__args, locals: &__locals )
    }

    open func keyRelease( _ _arg0: Int ) {
        keyRelease( arg0: _arg0 )
    }

    /// public abstract int java.awt.peer.RobotPeer.getRGBPixel(int,int)

    private static var getRGBPixel_MethodID_17: jmethodID?

    open func getRGBPixel( arg0: Int, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getRGBPixel", methodSig: "(II)I", methodCache: &RobotPeerForward.getRGBPixel_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getRGBPixel( _ _arg0: Int, _ _arg1: Int ) -> Int {
        return getRGBPixel( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int[] java.awt.peer.RobotPeer.getRGBPixels(java.awt.Rectangle)

    private static var getRGBPixels_MethodID_18: jmethodID?

    open func getRGBPixels( arg0: Rectangle? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRGBPixels", methodSig: "(Ljava/awt/Rectangle;)[I", methodCache: &RobotPeerForward.getRGBPixels_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getRGBPixels( _ _arg0: Rectangle? ) -> [Int32]! {
        return getRGBPixels( arg0: _arg0 )
    }

}


