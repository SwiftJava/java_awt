
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.image.CropImageFilter ///

open class CropImageFilter: ImageFilter {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CropImageFilterJNIClass: jclass?

    /// int java.awt.image.CropImageFilter.cropH

    // Skipping field: true false false false false false 

    /// int java.awt.image.CropImageFilter.cropW

    // Skipping field: true false false false false false 

    /// int java.awt.image.CropImageFilter.cropX

    // Skipping field: true false false false false false 

    /// int java.awt.image.CropImageFilter.cropY

    // Skipping field: true false false false false false 

    /// protected java.awt.image.ImageConsumer java.awt.image.ImageFilter.consumer

    private static var consumer_FieldID: jfieldID?

    override open var consumer: ImageConsumer! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "consumer", fieldType: "Ljava/awt/image/ImageConsumer;", fieldCache: &CropImageFilter.consumer_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ImageConsumerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "consumer", fieldType: "Ljava/awt/image/ImageConsumer;", fieldCache: &CropImageFilter.consumer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public static final int java.awt.image.ImageConsumer.COMPLETESCANLINES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.IMAGEABORTED

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.IMAGEERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.RANDOMPIXELORDER

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.SINGLEFRAME

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.SINGLEFRAMEDONE

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.SINGLEPASS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.STATICIMAGEDONE

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageConsumer.TOPDOWNLEFTRIGHT

    // Skipping field: false true false false false false 

    /// public java.awt.image.CropImageFilter(int,int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( x: Int, y: Int, w: Int, h: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        __args[2] = jvalue( i: jint(w) )
        __args[3] = jvalue( i: jint(h) )
        let __object = JNIMethod.NewObject( className: "java/awt/image/CropImageFilter", classCache: &CropImageFilter.CropImageFilterJNIClass, methodSig: "(IIII)V", methodCache: &CropImageFilter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int ) {
        self.init( x: _x, y: _y, w: _w, h: _h )
    }

    /// private int java.awt.image.CropImageFilter.addWithoutOverflow(int,int)

    /// public void java.awt.image.CropImageFilter.setDimensions(int,int)

    private static var setDimensions_MethodID_2: jmethodID?

    open func setDimensions( w: Int, h: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(w) )
        __args[1] = jvalue( i: jint(h) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDimensions", methodSig: "(II)V", methodCache: &CropImageFilter.setDimensions_MethodID_2, args: &__args, locals: &__locals )
    }

    override open func setDimensions( _ _w: Int, _ _h: Int ) {
        setDimensions( w: _w, h: _h )
    }

    /// public void java.awt.image.CropImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,int[],int,int)

    // Skipping method: false true false false false 

    /// public void java.awt.image.CropImageFilter.setPixels(int,int,int,int,java.awt.image.ColorModel,byte[],int,int)

    // Skipping method: false true false false false 

    /// public void java.awt.image.CropImageFilter.setProperties(java.util.Hashtable)

    // Skipping method: false true false false false 

}

