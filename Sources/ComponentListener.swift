
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// interface java.awt.event.ComponentListener ///

public protocol ComponentListener: java_util.EventListener {

    /// public abstract void java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)

    func componentResized( arg0: ComponentEvent? )
    func componentResized( _ _arg0: ComponentEvent? )

    /// public abstract void java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)

    func componentMoved( arg0: ComponentEvent? )
    func componentMoved( _ _arg0: ComponentEvent? )

    /// public abstract void java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)

    func componentShown( arg0: ComponentEvent? )
    func componentShown( _ _arg0: ComponentEvent? )

    /// public abstract void java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)

    func componentHidden( arg0: ComponentEvent? )
    func componentHidden( _ _arg0: ComponentEvent? )

}

open class ComponentListenerForward: java_util.EventListenerForward, ComponentListener {

    private static var ComponentListenerJNIClass: jclass?

    /// public abstract void java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)

    private static var componentResized_MethodID_5: jmethodID?

    open func componentResized( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentResized", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentResized_MethodID_5, args: &__args, locals: &__locals )
    }

    open func componentResized( _ _arg0: ComponentEvent? ) {
        componentResized( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)

    private static var componentMoved_MethodID_6: jmethodID?

    open func componentMoved( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentMoved", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentMoved_MethodID_6, args: &__args, locals: &__locals )
    }

    open func componentMoved( _ _arg0: ComponentEvent? ) {
        componentMoved( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)

    private static var componentShown_MethodID_7: jmethodID?

    open func componentShown( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentShown", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentShown_MethodID_7, args: &__args, locals: &__locals )
    }

    open func componentShown( _ _arg0: ComponentEvent? ) {
        componentShown( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)

    private static var componentHidden_MethodID_8: jmethodID?

    open func componentHidden( arg0: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentHidden", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentHidden_MethodID_8, args: &__args, locals: &__locals )
    }

    open func componentHidden( _ _arg0: ComponentEvent? ) {
        componentHidden( arg0: _arg0 )
    }

}


private typealias ComponentListener_componentResized_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentListener_componentResized_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).componentResized( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

private typealias ComponentListener_componentMoved_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentListener_componentMoved_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).componentMoved( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

private typealias ComponentListener_componentShown_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentListener_componentShown_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).componentShown( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

private typealias ComponentListener_componentHidden_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ComponentListener_componentHidden_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ComponentListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).componentHidden( arg0 != nil ? ComponentEvent( javaObject: arg0 ) : nil )
}

open class ComponentListenerBase: JNIObjectProxy, ComponentListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let ComponentListener_componentResized_0_thunk: ComponentListener_componentResized_0_type = ComponentListener_componentResized_0
            natives.append( JNINativeMethod( name: strdup("__componentResized"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentResized_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentListener_componentMoved_1_thunk: ComponentListener_componentMoved_1_type = ComponentListener_componentMoved_1
            natives.append( JNINativeMethod( name: strdup("__componentMoved"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentMoved_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentListener_componentShown_2_thunk: ComponentListener_componentShown_2_type = ComponentListener_componentShown_2
            natives.append( JNINativeMethod( name: strdup("__componentShown"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentShown_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ComponentListener_componentHidden_3_thunk: ComponentListener_componentHidden_3_type = ComponentListener_componentHidden_3
            natives.append( JNINativeMethod( name: strdup("__componentHidden"), signature: strdup("(Ljava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentHidden_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/ComponentListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        ComponentListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/ComponentListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> ComponentListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: ComponentListenerBase.self )
    }

    /// public abstract void java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)

    open func componentResized( arg0: ComponentEvent? ) /**/ {
    }

    open func componentResized( _ _arg0: ComponentEvent? ) /**/ {
        componentResized( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)

    open func componentMoved( arg0: ComponentEvent? ) /**/ {
    }

    open func componentMoved( _ _arg0: ComponentEvent? ) /**/ {
        componentMoved( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)

    open func componentShown( arg0: ComponentEvent? ) /**/ {
    }

    open func componentShown( _ _arg0: ComponentEvent? ) /**/ {
        componentShown( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)

    open func componentHidden( arg0: ComponentEvent? ) /**/ {
    }

    open func componentHidden( _ _arg0: ComponentEvent? ) /**/ {
        componentHidden( arg0: _arg0 )
    }

}
