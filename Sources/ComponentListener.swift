
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.awt.event.ComponentListener ///

public protocol ComponentListener: java_util.EventListener {

    /// public abstract void java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)

    func componentResized( e: ComponentEvent? )

    /// public abstract void java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)

    func componentMoved( e: ComponentEvent? )

    /// public abstract void java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)

    func componentShown( e: ComponentEvent? )

    /// public abstract void java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)

    func componentHidden( e: ComponentEvent? )

}


open class ComponentListenerForward: java_util.EventListenerForward, ComponentListener {

    private static var ComponentListenerJNIClass: jclass?

    /// public abstract void java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)

    private static var componentResized_MethodID_5: jmethodID?

    open func componentResized( e: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentResized", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentResized_MethodID_5, args: &__args, locals: &__locals )
    }

    open func componentResized( _ _e: ComponentEvent? ) {
        componentResized( e: _e )
    }

    /// public abstract void java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)

    private static var componentMoved_MethodID_6: jmethodID?

    open func componentMoved( e: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentMoved", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentMoved_MethodID_6, args: &__args, locals: &__locals )
    }

    open func componentMoved( _ _e: ComponentEvent? ) {
        componentMoved( e: _e )
    }

    /// public abstract void java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)

    private static var componentShown_MethodID_7: jmethodID?

    open func componentShown( e: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentShown", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentShown_MethodID_7, args: &__args, locals: &__locals )
    }

    open func componentShown( _ _e: ComponentEvent? ) {
        componentShown( e: _e )
    }

    /// public abstract void java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)

    private static var componentHidden_MethodID_8: jmethodID?

    open func componentHidden( e: ComponentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentHidden", methodSig: "(Ljava/awt/event/ComponentEvent;)V", methodCache: &ComponentListenerForward.componentHidden_MethodID_8, args: &__args, locals: &__locals )
    }

    open func componentHidden( _ _e: ComponentEvent? ) {
        componentHidden( e: _e )
    }

}


private typealias ComponentListener_componentResized_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ComponentListener_componentResized_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    ComponentListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).componentResized( e: e != nil ? ComponentEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias ComponentListener_componentMoved_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ComponentListener_componentMoved_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    ComponentListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).componentMoved( e: e != nil ? ComponentEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias ComponentListener_componentShown_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ComponentListener_componentShown_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    ComponentListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).componentShown( e: e != nil ? ComponentEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias ComponentListener_componentHidden_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ComponentListener_componentHidden_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    ComponentListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).componentHidden( e: e != nil ? ComponentEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

fileprivate class ComponentListenerLocal_: JNILocalProxy<ComponentListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let ComponentListener_componentResized_0_thunk: ComponentListener_componentResized_0_type = ComponentListener_componentResized_0
        natives.append( JNINativeMethod( name: strdup("__componentResized"), signature: strdup("(JLjava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentResized_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let ComponentListener_componentMoved_1_thunk: ComponentListener_componentMoved_1_type = ComponentListener_componentMoved_1
        natives.append( JNINativeMethod( name: strdup("__componentMoved"), signature: strdup("(JLjava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentMoved_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let ComponentListener_componentShown_2_thunk: ComponentListener_componentShown_2_type = ComponentListener_componentShown_2
        natives.append( JNINativeMethod( name: strdup("__componentShown"), signature: strdup("(JLjava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentShown_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let ComponentListener_componentHidden_3_thunk: ComponentListener_componentHidden_3_type = ComponentListener_componentHidden_3
        natives.append( JNINativeMethod( name: strdup("__componentHidden"), signature: strdup("(JLjava/awt/event/ComponentEvent;)V"), fnPtr: unsafeBitCast( ComponentListener_componentHidden_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/ComponentListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension ComponentListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return ComponentListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class ComponentListenerBase: ComponentListener {

    public init() {}

    /// public abstract void java.awt.event.ComponentListener.componentResized(java.awt.event.ComponentEvent)

    open func componentResized( e: ComponentEvent? ) /**/ {
    }

    open func componentResized( _ _e: ComponentEvent? ) /**/ {
        componentResized( e: _e )
    }

    /// public abstract void java.awt.event.ComponentListener.componentMoved(java.awt.event.ComponentEvent)

    open func componentMoved( e: ComponentEvent? ) /**/ {
    }

    open func componentMoved( _ _e: ComponentEvent? ) /**/ {
        componentMoved( e: _e )
    }

    /// public abstract void java.awt.event.ComponentListener.componentShown(java.awt.event.ComponentEvent)

    open func componentShown( e: ComponentEvent? ) /**/ {
    }

    open func componentShown( _ _e: ComponentEvent? ) /**/ {
        componentShown( e: _e )
    }

    /// public abstract void java.awt.event.ComponentListener.componentHidden(java.awt.event.ComponentEvent)

    open func componentHidden( e: ComponentEvent? ) /**/ {
    }

    open func componentHidden( _ _e: ComponentEvent? ) /**/ {
        componentHidden( e: _e )
    }

}
