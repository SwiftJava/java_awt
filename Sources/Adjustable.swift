
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:26 GMT 2016 ///

/// interface java.awt.Adjustable ///

public protocol Adjustable: JavaProtocol {

    /// public static final int java.awt.Adjustable.HORIZONTAL

    static var HORIZONTAL: Int { get }

    /// public static final int java.awt.Adjustable.VERTICAL

    static var VERTICAL: Int { get }

    /// public static final int java.awt.Adjustable.NO_ORIENTATION

    static var NO_ORIENTATION: Int { get }

    /// public abstract int java.awt.Adjustable.getValue()

    func getValue() -> Int

    /// public abstract void java.awt.Adjustable.setValue(int)

    func setValue( arg0: Int )
    func setValue( _ _arg0: Int )

    /// public abstract int java.awt.Adjustable.getOrientation()

    func getOrientation() -> Int

    /// public abstract void java.awt.Adjustable.setMinimum(int)

    func setMinimum( arg0: Int )
    func setMinimum( _ _arg0: Int )

    /// public abstract int java.awt.Adjustable.getMinimum()

    func getMinimum() -> Int

    /// public abstract void java.awt.Adjustable.setMaximum(int)

    func setMaximum( arg0: Int )
    func setMaximum( _ _arg0: Int )

    /// public abstract int java.awt.Adjustable.getMaximum()

    func getMaximum() -> Int

    /// public abstract void java.awt.Adjustable.setUnitIncrement(int)

    func setUnitIncrement( arg0: Int )
    func setUnitIncrement( _ _arg0: Int )

    /// public abstract int java.awt.Adjustable.getUnitIncrement()

    func getUnitIncrement() -> Int

    /// public abstract void java.awt.Adjustable.setBlockIncrement(int)

    func setBlockIncrement( arg0: Int )
    func setBlockIncrement( _ _arg0: Int )

    /// public abstract int java.awt.Adjustable.getBlockIncrement()

    func getBlockIncrement() -> Int

    /// public abstract void java.awt.Adjustable.setVisibleAmount(int)

    func setVisibleAmount( arg0: Int )
    func setVisibleAmount( _ _arg0: Int )

    /// public abstract int java.awt.Adjustable.getVisibleAmount()

    func getVisibleAmount() -> Int

    /// public abstract void java.awt.Adjustable.addAdjustmentListener(java.awt.event.AdjustmentListener)

    func addAdjustmentListener( arg0: AdjustmentListener? )
    func addAdjustmentListener( _ _arg0: AdjustmentListener? )

    /// public abstract void java.awt.Adjustable.removeAdjustmentListener(java.awt.event.AdjustmentListener)

    func removeAdjustmentListener( arg0: AdjustmentListener? )
    func removeAdjustmentListener( _ _arg0: AdjustmentListener? )

}

open class AdjustableForward: JNIObjectForward, Adjustable {

    private static var AdjustableJNIClass: jclass?

    /// public static final int java.awt.Adjustable.HORIZONTAL

    private static var HORIZONTAL_FieldID: jfieldID?

    open static var HORIZONTAL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HORIZONTAL", fieldType: "I", fieldCache: &HORIZONTAL_FieldID, className: "java/awt/Adjustable", classCache: &AdjustableJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Adjustable.VERTICAL

    private static var VERTICAL_FieldID: jfieldID?

    open static var VERTICAL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "VERTICAL", fieldType: "I", fieldCache: &VERTICAL_FieldID, className: "java/awt/Adjustable", classCache: &AdjustableJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Adjustable.NO_ORIENTATION

    private static var NO_ORIENTATION_FieldID: jfieldID?

    open static var NO_ORIENTATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NO_ORIENTATION", fieldType: "I", fieldCache: &NO_ORIENTATION_FieldID, className: "java/awt/Adjustable", classCache: &AdjustableJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public abstract int java.awt.Adjustable.getValue()

    private static var getValue_MethodID_16: jmethodID?

    open func getValue() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getValue", methodSig: "()I", methodCache: &AdjustableForward.getValue_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.awt.Adjustable.setValue(int)

    private static var setValue_MethodID_17: jmethodID?

    open func setValue( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setValue", methodSig: "(I)V", methodCache: &AdjustableForward.setValue_MethodID_17, args: &__args, locals: &__locals )
    }

    open func setValue( _ _arg0: Int ) {
        setValue( arg0: _arg0 )
    }

    /// public abstract int java.awt.Adjustable.getOrientation()

    private static var getOrientation_MethodID_18: jmethodID?

    open func getOrientation() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getOrientation", methodSig: "()I", methodCache: &AdjustableForward.getOrientation_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.awt.Adjustable.setMinimum(int)

    private static var setMinimum_MethodID_19: jmethodID?

    open func setMinimum( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMinimum", methodSig: "(I)V", methodCache: &AdjustableForward.setMinimum_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setMinimum( _ _arg0: Int ) {
        setMinimum( arg0: _arg0 )
    }

    /// public abstract int java.awt.Adjustable.getMinimum()

    private static var getMinimum_MethodID_20: jmethodID?

    open func getMinimum() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMinimum", methodSig: "()I", methodCache: &AdjustableForward.getMinimum_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.awt.Adjustable.setMaximum(int)

    private static var setMaximum_MethodID_21: jmethodID?

    open func setMaximum( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaximum", methodSig: "(I)V", methodCache: &AdjustableForward.setMaximum_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setMaximum( _ _arg0: Int ) {
        setMaximum( arg0: _arg0 )
    }

    /// public abstract int java.awt.Adjustable.getMaximum()

    private static var getMaximum_MethodID_22: jmethodID?

    open func getMaximum() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaximum", methodSig: "()I", methodCache: &AdjustableForward.getMaximum_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.awt.Adjustable.setUnitIncrement(int)

    private static var setUnitIncrement_MethodID_23: jmethodID?

    open func setUnitIncrement( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUnitIncrement", methodSig: "(I)V", methodCache: &AdjustableForward.setUnitIncrement_MethodID_23, args: &__args, locals: &__locals )
    }

    open func setUnitIncrement( _ _arg0: Int ) {
        setUnitIncrement( arg0: _arg0 )
    }

    /// public abstract int java.awt.Adjustable.getUnitIncrement()

    private static var getUnitIncrement_MethodID_24: jmethodID?

    open func getUnitIncrement() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getUnitIncrement", methodSig: "()I", methodCache: &AdjustableForward.getUnitIncrement_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.awt.Adjustable.setBlockIncrement(int)

    private static var setBlockIncrement_MethodID_25: jmethodID?

    open func setBlockIncrement( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlockIncrement", methodSig: "(I)V", methodCache: &AdjustableForward.setBlockIncrement_MethodID_25, args: &__args, locals: &__locals )
    }

    open func setBlockIncrement( _ _arg0: Int ) {
        setBlockIncrement( arg0: _arg0 )
    }

    /// public abstract int java.awt.Adjustable.getBlockIncrement()

    private static var getBlockIncrement_MethodID_26: jmethodID?

    open func getBlockIncrement() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getBlockIncrement", methodSig: "()I", methodCache: &AdjustableForward.getBlockIncrement_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.awt.Adjustable.setVisibleAmount(int)

    private static var setVisibleAmount_MethodID_27: jmethodID?

    open func setVisibleAmount( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisibleAmount", methodSig: "(I)V", methodCache: &AdjustableForward.setVisibleAmount_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setVisibleAmount( _ _arg0: Int ) {
        setVisibleAmount( arg0: _arg0 )
    }

    /// public abstract int java.awt.Adjustable.getVisibleAmount()

    private static var getVisibleAmount_MethodID_28: jmethodID?

    open func getVisibleAmount() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getVisibleAmount", methodSig: "()I", methodCache: &AdjustableForward.getVisibleAmount_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.awt.Adjustable.addAdjustmentListener(java.awt.event.AdjustmentListener)

    private static var addAdjustmentListener_MethodID_29: jmethodID?

    open func addAdjustmentListener( arg0: AdjustmentListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addAdjustmentListener", methodSig: "(Ljava/awt/event/AdjustmentListener;)V", methodCache: &AdjustableForward.addAdjustmentListener_MethodID_29, args: &__args, locals: &__locals )
    }

    open func addAdjustmentListener( _ _arg0: AdjustmentListener? ) {
        addAdjustmentListener( arg0: _arg0 )
    }

    /// public abstract void java.awt.Adjustable.removeAdjustmentListener(java.awt.event.AdjustmentListener)

    private static var removeAdjustmentListener_MethodID_30: jmethodID?

    open func removeAdjustmentListener( arg0: AdjustmentListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeAdjustmentListener", methodSig: "(Ljava/awt/event/AdjustmentListener;)V", methodCache: &AdjustableForward.removeAdjustmentListener_MethodID_30, args: &__args, locals: &__locals )
    }

    open func removeAdjustmentListener( _ _arg0: AdjustmentListener? ) {
        removeAdjustmentListener( arg0: _arg0 )
    }

}


