
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// interface java.awt.event.MouseMotionListener ///

public protocol MouseMotionListener: java_util.EventListener {

    /// public abstract void java.awt.event.MouseMotionListener.mouseMoved(java.awt.event.MouseEvent)

    func mouseMoved( arg0: MouseEvent? )
    func mouseMoved( _ _arg0: MouseEvent? )

    /// public abstract void java.awt.event.MouseMotionListener.mouseDragged(java.awt.event.MouseEvent)

    func mouseDragged( arg0: MouseEvent? )
    func mouseDragged( _ _arg0: MouseEvent? )

}

open class MouseMotionListenerForward: java_util.EventListenerForward, MouseMotionListener {

    private static var MouseMotionListenerJNIClass: jclass?

    /// public abstract void java.awt.event.MouseMotionListener.mouseMoved(java.awt.event.MouseEvent)

    private static var mouseMoved_MethodID_3: jmethodID?

    open func mouseMoved( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseMoved", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseMotionListenerForward.mouseMoved_MethodID_3, args: &__args, locals: &__locals )
    }

    open func mouseMoved( _ _arg0: MouseEvent? ) {
        mouseMoved( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseMotionListener.mouseDragged(java.awt.event.MouseEvent)

    private static var mouseDragged_MethodID_4: jmethodID?

    open func mouseDragged( arg0: MouseEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseDragged", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &MouseMotionListenerForward.mouseDragged_MethodID_4, args: &__args, locals: &__locals )
    }

    open func mouseDragged( _ _arg0: MouseEvent? ) {
        mouseDragged( arg0: _arg0 )
    }

}


private typealias MouseMotionListener_mouseMoved_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseMotionListener_mouseMoved_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseMotionListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseMoved( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

private typealias MouseMotionListener_mouseDragged_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseMotionListener_mouseDragged_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseMotionListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseDragged( arg0 != nil ? MouseEvent( javaObject: arg0 ) : nil )
}

open class MouseMotionListenerBase: JNIObjectProxy, MouseMotionListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let MouseMotionListener_mouseMoved_0_thunk: MouseMotionListener_mouseMoved_0_type = MouseMotionListener_mouseMoved_0
            natives.append( JNINativeMethod( name: strdup("__mouseMoved"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseMotionListener_mouseMoved_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let MouseMotionListener_mouseDragged_1_thunk: MouseMotionListener_mouseDragged_1_type = MouseMotionListener_mouseDragged_1
            natives.append( JNINativeMethod( name: strdup("__mouseDragged"), signature: strdup("(Ljava/awt/event/MouseEvent;)V"), fnPtr: unsafeBitCast( MouseMotionListener_mouseDragged_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/MouseMotionListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        MouseMotionListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/MouseMotionListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> MouseMotionListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: MouseMotionListenerBase.self )
    }

    /// public abstract void java.awt.event.MouseMotionListener.mouseMoved(java.awt.event.MouseEvent)

    open func mouseMoved( arg0: MouseEvent? ) /**/ {
    }

    open func mouseMoved( _ _arg0: MouseEvent? ) /**/ {
        mouseMoved( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.MouseMotionListener.mouseDragged(java.awt.event.MouseEvent)

    open func mouseDragged( arg0: MouseEvent? ) /**/ {
    }

    open func mouseDragged( _ _arg0: MouseEvent? ) /**/ {
        mouseDragged( arg0: _arg0 )
    }

}
