
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:36:05 GMT 2016 ///

/// interface java.awt.event.WindowListener ///

public protocol WindowListener: java_util.EventListener {

    /// public abstract void java.awt.event.WindowListener.windowOpened(java.awt.event.WindowEvent)

    func windowOpened( arg0: WindowEvent? )
    func windowOpened( _ _arg0: WindowEvent? )

    /// public abstract void java.awt.event.WindowListener.windowClosing(java.awt.event.WindowEvent)

    func windowClosing( arg0: WindowEvent? )
    func windowClosing( _ _arg0: WindowEvent? )

    /// public abstract void java.awt.event.WindowListener.windowClosed(java.awt.event.WindowEvent)

    func windowClosed( arg0: WindowEvent? )
    func windowClosed( _ _arg0: WindowEvent? )

    /// public abstract void java.awt.event.WindowListener.windowIconified(java.awt.event.WindowEvent)

    func windowIconified( arg0: WindowEvent? )
    func windowIconified( _ _arg0: WindowEvent? )

    /// public abstract void java.awt.event.WindowListener.windowDeiconified(java.awt.event.WindowEvent)

    func windowDeiconified( arg0: WindowEvent? )
    func windowDeiconified( _ _arg0: WindowEvent? )

    /// public abstract void java.awt.event.WindowListener.windowActivated(java.awt.event.WindowEvent)

    func windowActivated( arg0: WindowEvent? )
    func windowActivated( _ _arg0: WindowEvent? )

    /// public abstract void java.awt.event.WindowListener.windowDeactivated(java.awt.event.WindowEvent)

    func windowDeactivated( arg0: WindowEvent? )
    func windowDeactivated( _ _arg0: WindowEvent? )

}

open class WindowListenerForward: java_util.EventListenerForward, WindowListener {

    private static var WindowListenerJNIClass: jclass?

    /// public abstract void java.awt.event.WindowListener.windowOpened(java.awt.event.WindowEvent)

    private static var windowOpened_MethodID_8: jmethodID?

    open func windowOpened( arg0: WindowEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowOpened", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &WindowListenerForward.windowOpened_MethodID_8, args: &__args, locals: &__locals )
    }

    open func windowOpened( _ _arg0: WindowEvent? ) {
        windowOpened( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowClosing(java.awt.event.WindowEvent)

    private static var windowClosing_MethodID_9: jmethodID?

    open func windowClosing( arg0: WindowEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowClosing", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &WindowListenerForward.windowClosing_MethodID_9, args: &__args, locals: &__locals )
    }

    open func windowClosing( _ _arg0: WindowEvent? ) {
        windowClosing( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowClosed(java.awt.event.WindowEvent)

    private static var windowClosed_MethodID_10: jmethodID?

    open func windowClosed( arg0: WindowEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowClosed", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &WindowListenerForward.windowClosed_MethodID_10, args: &__args, locals: &__locals )
    }

    open func windowClosed( _ _arg0: WindowEvent? ) {
        windowClosed( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowIconified(java.awt.event.WindowEvent)

    private static var windowIconified_MethodID_11: jmethodID?

    open func windowIconified( arg0: WindowEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowIconified", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &WindowListenerForward.windowIconified_MethodID_11, args: &__args, locals: &__locals )
    }

    open func windowIconified( _ _arg0: WindowEvent? ) {
        windowIconified( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowDeiconified(java.awt.event.WindowEvent)

    private static var windowDeiconified_MethodID_12: jmethodID?

    open func windowDeiconified( arg0: WindowEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowDeiconified", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &WindowListenerForward.windowDeiconified_MethodID_12, args: &__args, locals: &__locals )
    }

    open func windowDeiconified( _ _arg0: WindowEvent? ) {
        windowDeiconified( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowActivated(java.awt.event.WindowEvent)

    private static var windowActivated_MethodID_13: jmethodID?

    open func windowActivated( arg0: WindowEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowActivated", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &WindowListenerForward.windowActivated_MethodID_13, args: &__args, locals: &__locals )
    }

    open func windowActivated( _ _arg0: WindowEvent? ) {
        windowActivated( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowDeactivated(java.awt.event.WindowEvent)

    private static var windowDeactivated_MethodID_14: jmethodID?

    open func windowDeactivated( arg0: WindowEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "windowDeactivated", methodSig: "(Ljava/awt/event/WindowEvent;)V", methodCache: &WindowListenerForward.windowDeactivated_MethodID_14, args: &__args, locals: &__locals )
    }

    open func windowDeactivated( _ _arg0: WindowEvent? ) {
        windowDeactivated( arg0: _arg0 )
    }

}


private typealias WindowListener_windowOpened_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func WindowListener_windowOpened_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    WindowListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).windowOpened( arg0 != nil ? WindowEvent( javaObject: arg0 ) : nil )
}

private typealias WindowListener_windowClosing_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func WindowListener_windowClosing_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    WindowListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).windowClosing( arg0 != nil ? WindowEvent( javaObject: arg0 ) : nil )
}

private typealias WindowListener_windowClosed_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func WindowListener_windowClosed_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    WindowListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).windowClosed( arg0 != nil ? WindowEvent( javaObject: arg0 ) : nil )
}

private typealias WindowListener_windowIconified_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func WindowListener_windowIconified_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    WindowListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).windowIconified( arg0 != nil ? WindowEvent( javaObject: arg0 ) : nil )
}

private typealias WindowListener_windowDeiconified_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func WindowListener_windowDeiconified_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    WindowListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).windowDeiconified( arg0 != nil ? WindowEvent( javaObject: arg0 ) : nil )
}

private typealias WindowListener_windowActivated_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func WindowListener_windowActivated_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    WindowListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).windowActivated( arg0 != nil ? WindowEvent( javaObject: arg0 ) : nil )
}

private typealias WindowListener_windowDeactivated_6_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func WindowListener_windowDeactivated_6( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    WindowListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).windowDeactivated( arg0 != nil ? WindowEvent( javaObject: arg0 ) : nil )
}

open class WindowListenerBase: JNIObjectProxy, WindowListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let WindowListener_windowOpened_0_thunk: WindowListener_windowOpened_0_type = WindowListener_windowOpened_0
            natives.append( JNINativeMethod( name: strdup("__windowOpened"), signature: strdup("(Ljava/awt/event/WindowEvent;)V"), fnPtr: unsafeBitCast( WindowListener_windowOpened_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let WindowListener_windowClosing_1_thunk: WindowListener_windowClosing_1_type = WindowListener_windowClosing_1
            natives.append( JNINativeMethod( name: strdup("__windowClosing"), signature: strdup("(Ljava/awt/event/WindowEvent;)V"), fnPtr: unsafeBitCast( WindowListener_windowClosing_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let WindowListener_windowClosed_2_thunk: WindowListener_windowClosed_2_type = WindowListener_windowClosed_2
            natives.append( JNINativeMethod( name: strdup("__windowClosed"), signature: strdup("(Ljava/awt/event/WindowEvent;)V"), fnPtr: unsafeBitCast( WindowListener_windowClosed_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let WindowListener_windowIconified_3_thunk: WindowListener_windowIconified_3_type = WindowListener_windowIconified_3
            natives.append( JNINativeMethod( name: strdup("__windowIconified"), signature: strdup("(Ljava/awt/event/WindowEvent;)V"), fnPtr: unsafeBitCast( WindowListener_windowIconified_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let WindowListener_windowDeiconified_4_thunk: WindowListener_windowDeiconified_4_type = WindowListener_windowDeiconified_4
            natives.append( JNINativeMethod( name: strdup("__windowDeiconified"), signature: strdup("(Ljava/awt/event/WindowEvent;)V"), fnPtr: unsafeBitCast( WindowListener_windowDeiconified_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let WindowListener_windowActivated_5_thunk: WindowListener_windowActivated_5_type = WindowListener_windowActivated_5
            natives.append( JNINativeMethod( name: strdup("__windowActivated"), signature: strdup("(Ljava/awt/event/WindowEvent;)V"), fnPtr: unsafeBitCast( WindowListener_windowActivated_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let WindowListener_windowDeactivated_6_thunk: WindowListener_windowDeactivated_6_type = WindowListener_windowDeactivated_6
            natives.append( JNINativeMethod( name: strdup("__windowDeactivated"), signature: strdup("(Ljava/awt/event/WindowEvent;)V"), fnPtr: unsafeBitCast( WindowListener_windowDeactivated_6_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/WindowListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        WindowListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/WindowListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> WindowListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: WindowListenerBase.self )
    }

    /// public abstract void java.awt.event.WindowListener.windowOpened(java.awt.event.WindowEvent)

    open func windowOpened( arg0: WindowEvent? ) /**/ {
    }

    open func windowOpened( _ _arg0: WindowEvent? ) /**/ {
        windowOpened( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowClosing(java.awt.event.WindowEvent)

    open func windowClosing( arg0: WindowEvent? ) /**/ {
    }

    open func windowClosing( _ _arg0: WindowEvent? ) /**/ {
        windowClosing( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowClosed(java.awt.event.WindowEvent)

    open func windowClosed( arg0: WindowEvent? ) /**/ {
    }

    open func windowClosed( _ _arg0: WindowEvent? ) /**/ {
        windowClosed( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowIconified(java.awt.event.WindowEvent)

    open func windowIconified( arg0: WindowEvent? ) /**/ {
    }

    open func windowIconified( _ _arg0: WindowEvent? ) /**/ {
        windowIconified( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowDeiconified(java.awt.event.WindowEvent)

    open func windowDeiconified( arg0: WindowEvent? ) /**/ {
    }

    open func windowDeiconified( _ _arg0: WindowEvent? ) /**/ {
        windowDeiconified( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowActivated(java.awt.event.WindowEvent)

    open func windowActivated( arg0: WindowEvent? ) /**/ {
    }

    open func windowActivated( _ _arg0: WindowEvent? ) /**/ {
        windowActivated( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.WindowListener.windowDeactivated(java.awt.event.WindowEvent)

    open func windowDeactivated( arg0: WindowEvent? ) /**/ {
    }

    open func windowDeactivated( _ _arg0: WindowEvent? ) /**/ {
        windowDeactivated( arg0: _arg0 )
    }

}
