
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// interface java.awt.event.MouseWheelListener ///

public protocol MouseWheelListener: java_util.EventListener {

    /// public abstract void java.awt.event.MouseWheelListener.mouseWheelMoved(java.awt.event.MouseWheelEvent)

    func mouseWheelMoved( arg0: MouseWheelEvent? )
    func mouseWheelMoved( _ _arg0: MouseWheelEvent? )

}

open class MouseWheelListenerForward: java_util.EventListenerForward, MouseWheelListener {

    private static var MouseWheelListenerJNIClass: jclass?

    /// public abstract void java.awt.event.MouseWheelListener.mouseWheelMoved(java.awt.event.MouseWheelEvent)

    private static var mouseWheelMoved_MethodID_2: jmethodID?

    open func mouseWheelMoved( arg0: MouseWheelEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "mouseWheelMoved", methodSig: "(Ljava/awt/event/MouseWheelEvent;)V", methodCache: &MouseWheelListenerForward.mouseWheelMoved_MethodID_2, args: &__args, locals: &__locals )
    }

    open func mouseWheelMoved( _ _arg0: MouseWheelEvent? ) {
        mouseWheelMoved( arg0: _arg0 )
    }

}


private typealias MouseWheelListener_mouseWheelMoved_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func MouseWheelListener_mouseWheelMoved_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    MouseWheelListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).mouseWheelMoved( arg0 != nil ? MouseWheelEvent( javaObject: arg0 ) : nil )
}

open class MouseWheelListenerBase: JNIObjectProxy, MouseWheelListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let MouseWheelListener_mouseWheelMoved_0_thunk: MouseWheelListener_mouseWheelMoved_0_type = MouseWheelListener_mouseWheelMoved_0
            natives.append( JNINativeMethod( name: strdup("__mouseWheelMoved"), signature: strdup("(Ljava/awt/event/MouseWheelEvent;)V"), fnPtr: unsafeBitCast( MouseWheelListener_mouseWheelMoved_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/MouseWheelListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        MouseWheelListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/MouseWheelListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> MouseWheelListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: MouseWheelListenerBase.self )
    }

    /// public abstract void java.awt.event.MouseWheelListener.mouseWheelMoved(java.awt.event.MouseWheelEvent)

    open func mouseWheelMoved( arg0: MouseWheelEvent? ) /**/ {
    }

    open func mouseWheelMoved( _ _arg0: MouseWheelEvent? ) /**/ {
        mouseWheelMoved( arg0: _arg0 )
    }

}
