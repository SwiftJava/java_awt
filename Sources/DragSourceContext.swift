
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:04 GMT 2016 ///

/// class java.awt.dnd.DragSourceContext ///

open class DragSourceContext: java_lang.JavaObject, DragSourceListener, DragSourceMotionListener, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.dnd.DragSourceContext", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DragSourceContextJNIClass: jclass?

    /// private static final long java.awt.dnd.DragSourceContext.serialVersionUID

    /// protected static final int java.awt.dnd.DragSourceContext.DEFAULT

    /// protected static final int java.awt.dnd.DragSourceContext.ENTER

    /// protected static final int java.awt.dnd.DragSourceContext.OVER

    /// protected static final int java.awt.dnd.DragSourceContext.CHANGED

    /// private static java.awt.datatransfer.Transferable java.awt.dnd.DragSourceContext.emptyTransferable

    /// private transient java.awt.dnd.peer.DragSourceContextPeer java.awt.dnd.DragSourceContext.peer

    /// private java.awt.dnd.DragGestureEvent java.awt.dnd.DragSourceContext.trigger

    /// private java.awt.Cursor java.awt.dnd.DragSourceContext.cursor

    /// private transient java.awt.datatransfer.Transferable java.awt.dnd.DragSourceContext.transferable

    /// private transient java.awt.dnd.DragSourceListener java.awt.dnd.DragSourceContext.listener

    /// private boolean java.awt.dnd.DragSourceContext.useCustomCursor

    /// private final int java.awt.dnd.DragSourceContext.sourceActions

    /// public java.awt.dnd.DragSourceContext(java.awt.dnd.peer.DragSourceContextPeer,java.awt.dnd.DragGestureEvent,java.awt.Cursor,java.awt.Image,java.awt.Point,java.awt.datatransfer.Transferable,java.awt.dnd.DragSourceListener)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: DragSourceContextPeer?, arg1: DragGestureEvent?, arg2: Cursor?, arg3: Image?, arg4: Point?, arg5: Transferable?, arg6: DragSourceListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = jvalue( l: arg5?.localJavaObject( &__locals ) )
        __args[6] = jvalue( l: arg6?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/awt/dnd/DragSourceContext", classCache: &DragSourceContext.DragSourceContextJNIClass, methodSig: "(Ljava/awt/dnd/peer/DragSourceContextPeer;Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V", methodCache: &DragSourceContext.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: DragSourceContextPeer?, _ _arg1: DragGestureEvent?, _ _arg2: Cursor?, _ _arg3: Image?, _ _arg4: Point?, _ _arg5: Transferable?, _ _arg6: DragSourceListener? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// private void java.awt.dnd.DragSourceContext.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// private void java.awt.dnd.DragSourceContext.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// public java.awt.Component java.awt.dnd.DragSourceContext.getComponent()

    private static var getComponent_MethodID_2: jmethodID?

    open func getComponent() -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponent", methodSig: "()Ljava/awt/Component;", methodCache: &DragSourceContext.getComponent_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }


    /// public synchronized void java.awt.dnd.DragSourceContext.setCursor(java.awt.Cursor)

    private static var setCursor_MethodID_3: jmethodID?

    open func setCursor( arg0: Cursor? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCursor", methodSig: "(Ljava/awt/Cursor;)V", methodCache: &DragSourceContext.setCursor_MethodID_3, args: &__args, locals: &__locals )
    }

    open func setCursor( _ _arg0: Cursor? ) {
        setCursor( arg0: _arg0 )
    }

    /// public java.awt.Cursor java.awt.dnd.DragSourceContext.getCursor()

    private static var getCursor_MethodID_4: jmethodID?

    open func getCursor() -> Cursor! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCursor", methodSig: "()Ljava/awt/Cursor;", methodCache: &DragSourceContext.getCursor_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Cursor( javaObject: __return ) : nil
    }


    /// public void java.awt.dnd.DragSourceContext.dragEnter(java.awt.dnd.DragSourceDragEvent)

    private static var dragEnter_MethodID_5: jmethodID?

    open func dragEnter( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragEnter", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceContext.dragEnter_MethodID_5, args: &__args, locals: &__locals )
    }

    open func dragEnter( _ _arg0: DragSourceDragEvent? ) {
        dragEnter( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceContext.dragOver(java.awt.dnd.DragSourceDragEvent)

    private static var dragOver_MethodID_6: jmethodID?

    open func dragOver( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragOver", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceContext.dragOver_MethodID_6, args: &__args, locals: &__locals )
    }

    open func dragOver( _ _arg0: DragSourceDragEvent? ) {
        dragOver( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceContext.dropActionChanged(java.awt.dnd.DragSourceDragEvent)

    private static var dropActionChanged_MethodID_7: jmethodID?

    open func dropActionChanged( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dropActionChanged", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceContext.dropActionChanged_MethodID_7, args: &__args, locals: &__locals )
    }

    open func dropActionChanged( _ _arg0: DragSourceDragEvent? ) {
        dropActionChanged( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceContext.dragExit(java.awt.dnd.DragSourceEvent)

    private static var dragExit_MethodID_8: jmethodID?

    open func dragExit( arg0: DragSourceEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragExit", methodSig: "(Ljava/awt/dnd/DragSourceEvent;)V", methodCache: &DragSourceContext.dragExit_MethodID_8, args: &__args, locals: &__locals )
    }

    open func dragExit( _ _arg0: DragSourceEvent? ) {
        dragExit( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceContext.dragDropEnd(java.awt.dnd.DragSourceDropEvent)

    private static var dragDropEnd_MethodID_9: jmethodID?

    open func dragDropEnd( arg0: DragSourceDropEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragDropEnd", methodSig: "(Ljava/awt/dnd/DragSourceDropEvent;)V", methodCache: &DragSourceContext.dragDropEnd_MethodID_9, args: &__args, locals: &__locals )
    }

    open func dragDropEnd( _ _arg0: DragSourceDropEvent? ) {
        dragDropEnd( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DragSourceContext.dragMouseMoved(java.awt.dnd.DragSourceDragEvent)

    private static var dragMouseMoved_MethodID_10: jmethodID?

    open func dragMouseMoved( arg0: DragSourceDragEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dragMouseMoved", methodSig: "(Ljava/awt/dnd/DragSourceDragEvent;)V", methodCache: &DragSourceContext.dragMouseMoved_MethodID_10, args: &__args, locals: &__locals )
    }

    open func dragMouseMoved( _ _arg0: DragSourceDragEvent? ) {
        dragMouseMoved( arg0: _arg0 )
    }

    /// public java.awt.dnd.DragSource java.awt.dnd.DragSourceContext.getDragSource()

    private static var getDragSource_MethodID_11: jmethodID?

    open func getDragSource() -> DragSource! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDragSource", methodSig: "()Ljava/awt/dnd/DragSource;", methodCache: &DragSourceContext.getDragSource_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DragSource( javaObject: __return ) : nil
    }


    /// public synchronized void java.awt.dnd.DragSourceContext.addDragSourceListener(java.awt.dnd.DragSourceListener) throws java.util.TooManyListenersException

    private static var addDragSourceListener_MethodID_12: jmethodID?

    open func addDragSourceListener( arg0: DragSourceListener? ) throws /* java.util.TooManyListenersException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addDragSourceListener", methodSig: "(Ljava/awt/dnd/DragSourceListener;)V", methodCache: &DragSourceContext.addDragSourceListener_MethodID_12, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_util.TooManyListenersException( javaObject: throwable )
        }
    }

    open func addDragSourceListener( _ _arg0: DragSourceListener? ) throws /* java.util.TooManyListenersException */ {
        try addDragSourceListener( arg0: _arg0 )
    }

    /// public synchronized void java.awt.dnd.DragSourceContext.removeDragSourceListener(java.awt.dnd.DragSourceListener)

    private static var removeDragSourceListener_MethodID_13: jmethodID?

    open func removeDragSourceListener( arg0: DragSourceListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeDragSourceListener", methodSig: "(Ljava/awt/dnd/DragSourceListener;)V", methodCache: &DragSourceContext.removeDragSourceListener_MethodID_13, args: &__args, locals: &__locals )
    }

    open func removeDragSourceListener( _ _arg0: DragSourceListener? ) {
        removeDragSourceListener( arg0: _arg0 )
    }

    /// public int java.awt.dnd.DragSourceContext.getSourceActions()

    private static var getSourceActions_MethodID_14: jmethodID?

    open func getSourceActions() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSourceActions", methodSig: "()I", methodCache: &DragSourceContext.getSourceActions_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.dnd.DragSourceContext.transferablesFlavorsChanged()

    private static var transferablesFlavorsChanged_MethodID_15: jmethodID?

    open func transferablesFlavorsChanged() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transferablesFlavorsChanged", methodSig: "()V", methodCache: &DragSourceContext.transferablesFlavorsChanged_MethodID_15, args: &__args, locals: &__locals )
    }


    /// public java.awt.dnd.DragGestureEvent java.awt.dnd.DragSourceContext.getTrigger()

    private static var getTrigger_MethodID_16: jmethodID?

    open func getTrigger() -> DragGestureEvent! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTrigger", methodSig: "()Ljava/awt/dnd/DragGestureEvent;", methodCache: &DragSourceContext.getTrigger_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DragGestureEvent( javaObject: __return ) : nil
    }


    /// public java.awt.datatransfer.Transferable java.awt.dnd.DragSourceContext.getTransferable()

    private static var getTransferable_MethodID_17: jmethodID?

    open func getTransferable() -> Transferable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransferable", methodSig: "()Ljava/awt/datatransfer/Transferable;", methodCache: &DragSourceContext.getTransferable_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TransferableForward( javaObject: __return ) : nil
    }


    /// protected synchronized void java.awt.dnd.DragSourceContext.updateCurrentCursor(int,int,int)

    private static var updateCurrentCursor_MethodID_18: jmethodID?

    open func updateCurrentCursor( arg0: Int, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateCurrentCursor", methodSig: "(III)V", methodCache: &DragSourceContext.updateCurrentCursor_MethodID_18, args: &__args, locals: &__locals )
    }

    open func updateCurrentCursor( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
        updateCurrentCursor( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private void java.awt.dnd.DragSourceContext.setCursorImpl(java.awt.Cursor)

}
