
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:10 GMT 2016 ///

/// class java.awt.image.ComponentColorModel ///

open class ComponentColorModel: ColorModel {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.ComponentColorModel", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ComponentColorModelJNIClass: jclass?

    /// private boolean java.awt.image.ComponentColorModel.signed

    /// private boolean java.awt.image.ComponentColorModel.is_sRGB_stdScale

    /// private boolean java.awt.image.ComponentColorModel.is_LinearRGB_stdScale

    /// private boolean java.awt.image.ComponentColorModel.is_LinearGray_stdScale

    /// private boolean java.awt.image.ComponentColorModel.is_ICCGray_stdScale

    /// private byte[] java.awt.image.ComponentColorModel.tosRGB8LUT

    /// private byte[] java.awt.image.ComponentColorModel.fromsRGB8LUT8

    /// private short[] java.awt.image.ComponentColorModel.fromsRGB8LUT16

    /// private byte[] java.awt.image.ComponentColorModel.fromLinearGray16ToOtherGray8LUT

    /// private short[] java.awt.image.ComponentColorModel.fromLinearGray16ToOtherGray16LUT

    /// private boolean java.awt.image.ComponentColorModel.needScaleInit

    /// private boolean java.awt.image.ComponentColorModel.noUnnorm

    /// private boolean java.awt.image.ComponentColorModel.nonStdScale

    /// private float[] java.awt.image.ComponentColorModel.min

    /// private float[] java.awt.image.ComponentColorModel.diffMinMax

    /// private float[] java.awt.image.ComponentColorModel.compOffset

    /// private float[] java.awt.image.ComponentColorModel.compScale

    /// private long java.awt.image.ColorModel.pData

    /// protected int java.awt.image.ColorModel.pixel_bits

    private static var pixel_bits_FieldID: jfieldID?

    override open var pixel_bits: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "pixel_bits", fieldType: "I", fieldCache: &ComponentColorModel.pixel_bits_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "pixel_bits", fieldType: "I", fieldCache: &ComponentColorModel.pixel_bits_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// int[] java.awt.image.ColorModel.nBits

    /// int java.awt.image.ColorModel.transparency

    /// boolean java.awt.image.ColorModel.supportsAlpha

    /// boolean java.awt.image.ColorModel.isAlphaPremultiplied

    /// int java.awt.image.ColorModel.numComponents

    /// int java.awt.image.ColorModel.numColorComponents

    /// java.awt.color.ColorSpace java.awt.image.ColorModel.colorSpace

    /// int java.awt.image.ColorModel.colorSpaceType

    /// int java.awt.image.ColorModel.maxBits

    /// boolean java.awt.image.ColorModel.is_sRGB

    /// protected int java.awt.image.ColorModel.transferType

    private static var transferType_FieldID: jfieldID?

    override open var transferType: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "transferType", fieldType: "I", fieldCache: &ComponentColorModel.transferType_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "transferType", fieldType: "I", fieldCache: &ComponentColorModel.transferType_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// private static boolean java.awt.image.ColorModel.loaded

    /// private static java.awt.image.ColorModel java.awt.image.ColorModel.RGBdefault

    /// static byte[] java.awt.image.ColorModel.l8Tos8

    /// static byte[] java.awt.image.ColorModel.s8Tol8

    /// static byte[] java.awt.image.ColorModel.l16Tos8

    /// static short[] java.awt.image.ColorModel.s8Tol16

    /// static java.util.Map java.awt.image.ColorModel.g8Tos8Map

    /// static java.util.Map java.awt.image.ColorModel.lg16Toog8Map

    /// static java.util.Map java.awt.image.ColorModel.g16Tos8Map

    /// static java.util.Map java.awt.image.ColorModel.lg16Toog16Map

    /// public static final int java.awt.Transparency.OPAQUE

    /// public static final int java.awt.Transparency.BITMASK

    /// public static final int java.awt.Transparency.TRANSLUCENT

    /// public java.awt.image.ComponentColorModel(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: ColorSpace?, arg1: [Int32]?, arg2: Bool, arg3: Bool, arg4: Int, arg5: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/ComponentColorModel", classCache: &ComponentColorModel.ComponentColorModelJNIClass, methodSig: "(Ljava/awt/color/ColorSpace;[IZZII)V", methodCache: &ComponentColorModel.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: ColorSpace?, _ _arg1: [Int32]?, _ _arg2: Bool, _ _arg3: Bool, _ _arg4: Int, _ _arg5: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public java.awt.image.ComponentColorModel(java.awt.color.ColorSpace,boolean,boolean,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: ColorSpace?, arg1: Bool, arg2: Bool, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/ComponentColorModel", classCache: &ComponentColorModel.ComponentColorModelJNIClass, methodSig: "(Ljava/awt/color/ColorSpace;ZZII)V", methodCache: &ComponentColorModel.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: ColorSpace?, _ _arg1: Bool, _ _arg2: Bool, _ _arg3: Int, _ _arg4: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public boolean java.awt.image.ComponentColorModel.equals(java.lang.Object)

    /// public int[] java.awt.image.ComponentColorModel.getComponents(int,int[],int)

    /// public int[] java.awt.image.ComponentColorModel.getComponents(java.lang.Object,int[],int)

    /// public int java.awt.image.ComponentColorModel.getRed(java.lang.Object)

    /// public int java.awt.image.ComponentColorModel.getRed(int)

    /// public int java.awt.image.ComponentColorModel.getGreen(int)

    /// public int java.awt.image.ComponentColorModel.getGreen(java.lang.Object)

    /// public int java.awt.image.ComponentColorModel.getBlue(int)

    /// public int java.awt.image.ComponentColorModel.getBlue(java.lang.Object)

    /// public int java.awt.image.ComponentColorModel.getAlpha(java.lang.Object)

    /// public int java.awt.image.ComponentColorModel.getAlpha(int)

    /// public int java.awt.image.ComponentColorModel.getRGB(int)

    /// public int java.awt.image.ComponentColorModel.getRGB(java.lang.Object)

    /// public java.awt.image.WritableRaster java.awt.image.ComponentColorModel.createCompatibleWritableRaster(int,int)

    /// public java.lang.Object java.awt.image.ComponentColorModel.getDataElements(int[],int,java.lang.Object)

    /// public java.lang.Object java.awt.image.ComponentColorModel.getDataElements(float[],int,java.lang.Object)

    /// public java.lang.Object java.awt.image.ComponentColorModel.getDataElements(int,java.lang.Object)

    /// public int[] java.awt.image.ComponentColorModel.getUnnormalizedComponents(float[],int,int[],int)

    /// public float[] java.awt.image.ComponentColorModel.getNormalizedComponents(java.lang.Object,float[],int)

    /// public float[] java.awt.image.ComponentColorModel.getNormalizedComponents(int[],int,float[],int)

    /// public int java.awt.image.ComponentColorModel.getDataElement(int[],int)

    /// public int java.awt.image.ComponentColorModel.getDataElement(float[],int)

    /// public java.awt.image.ColorModel java.awt.image.ComponentColorModel.coerceData(java.awt.image.WritableRaster,boolean)

    /// public boolean java.awt.image.ComponentColorModel.isCompatibleRaster(java.awt.image.Raster)

    /// public java.awt.image.SampleModel java.awt.image.ComponentColorModel.createCompatibleSampleModel(int,int)

    /// public boolean java.awt.image.ComponentColorModel.isCompatibleSampleModel(java.awt.image.SampleModel)

    /// public java.awt.image.WritableRaster java.awt.image.ComponentColorModel.getAlphaRaster(java.awt.image.WritableRaster)

    /// private static int java.awt.image.ComponentColorModel.bitsHelper(int,java.awt.color.ColorSpace,boolean)

    /// private static int[] java.awt.image.ComponentColorModel.bitsArrayHelper(int[],int,java.awt.color.ColorSpace,boolean)

    /// private void java.awt.image.ComponentColorModel.setupLUTs()

    /// private void java.awt.image.ComponentColorModel.initScale()

    /// private int java.awt.image.ComponentColorModel.getRGBComponent(java.lang.Object,int)

    /// private int java.awt.image.ComponentColorModel.getRGBComponent(int,int)

    /// private int java.awt.image.ComponentColorModel.extractComponent(java.lang.Object,int,int)

}
