
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:27 GMT 2016 ///

/// class java.awt.dnd.DropTargetContext ///

open class DropTargetContext: java_lang.JavaObject, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.dnd.DropTargetContext", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DropTargetContextJNIClass: jclass?

    /// private static final long java.awt.dnd.DropTargetContext.serialVersionUID

    /// private java.awt.dnd.DropTarget java.awt.dnd.DropTargetContext.dropTarget

    /// private transient java.awt.dnd.peer.DropTargetContextPeer java.awt.dnd.DropTargetContext.dropTargetContextPeer

    /// private transient java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.transferable

    /// java.awt.dnd.DropTargetContext(java.awt.dnd.DropTarget)

    /// public java.awt.Component java.awt.dnd.DropTargetContext.getComponent()

    private static var getComponent_MethodID_1: jmethodID?

    open func getComponent() -> Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponent", methodSig: "()Ljava/awt/Component;", methodCache: &DropTargetContext.getComponent_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }


    /// public void java.awt.dnd.DropTargetContext.addNotify(java.awt.dnd.peer.DropTargetContextPeer)

    private static var addNotify_MethodID_2: jmethodID?

    open func addNotify( arg0: DropTargetContextPeer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addNotify", methodSig: "(Ljava/awt/dnd/peer/DropTargetContextPeer;)V", methodCache: &DropTargetContext.addNotify_MethodID_2, args: &__args, locals: &__locals )
    }

    open func addNotify( _ _arg0: DropTargetContextPeer? ) {
        addNotify( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DropTargetContext.removeNotify()

    private static var removeNotify_MethodID_3: jmethodID?

    open func removeNotify() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeNotify", methodSig: "()V", methodCache: &DropTargetContext.removeNotify_MethodID_3, args: &__args, locals: &__locals )
    }


    /// public java.awt.dnd.DropTarget java.awt.dnd.DropTargetContext.getDropTarget()

    private static var getDropTarget_MethodID_4: jmethodID?

    open func getDropTarget() -> DropTarget! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDropTarget", methodSig: "()Ljava/awt/dnd/DropTarget;", methodCache: &DropTargetContext.getDropTarget_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DropTarget( javaObject: __return ) : nil
    }


    /// protected void java.awt.dnd.DropTargetContext.setTargetActions(int)

    private static var setTargetActions_MethodID_5: jmethodID?

    open func setTargetActions( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTargetActions", methodSig: "(I)V", methodCache: &DropTargetContext.setTargetActions_MethodID_5, args: &__args, locals: &__locals )
    }

    open func setTargetActions( _ _arg0: Int ) {
        setTargetActions( arg0: _arg0 )
    }

    /// protected void java.awt.dnd.DropTargetContext.rejectDrop()

    private static var rejectDrop_MethodID_6: jmethodID?

    open func rejectDrop() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rejectDrop", methodSig: "()V", methodCache: &DropTargetContext.rejectDrop_MethodID_6, args: &__args, locals: &__locals )
    }


    /// protected boolean java.awt.dnd.DropTargetContext.isDataFlavorSupported(java.awt.datatransfer.DataFlavor)

    private static var isDataFlavorSupported_MethodID_7: jmethodID?

    open func isDataFlavorSupported( arg0: DataFlavor? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isDataFlavorSupported", methodSig: "(Ljava/awt/datatransfer/DataFlavor;)Z", methodCache: &DropTargetContext.isDataFlavorSupported_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func isDataFlavorSupported( _ _arg0: DataFlavor? ) -> Bool {
        return isDataFlavorSupported( arg0: _arg0 )
    }

    /// protected java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.getTransferable() throws java.awt.dnd.InvalidDnDOperationException

    private static var getTransferable_MethodID_8: jmethodID?

    open func getTransferable() throws /* java.awt.dnd.InvalidDnDOperationException */ -> Transferable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransferable", methodSig: "()Ljava/awt/datatransfer/Transferable;", methodCache: &DropTargetContext.getTransferable_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw InvalidDnDOperationException( javaObject: throwable )
        }
        return __return != nil ? TransferableForward( javaObject: __return ) : nil
    }


    /// protected int java.awt.dnd.DropTargetContext.getTargetActions()

    private static var getTargetActions_MethodID_9: jmethodID?

    open func getTargetActions() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTargetActions", methodSig: "()I", methodCache: &DropTargetContext.getTargetActions_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// protected java.awt.datatransfer.DataFlavor[] java.awt.dnd.DropTargetContext.getCurrentDataFlavors()

    private static var getCurrentDataFlavors_MethodID_10: jmethodID?

    open func getCurrentDataFlavors() -> [DataFlavor]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCurrentDataFlavors", methodSig: "()[Ljava/awt/datatransfer/DataFlavor;", methodCache: &DropTargetContext.getCurrentDataFlavors_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: [DataFlavor](), from: __return )
    }


    /// protected java.util.List java.awt.dnd.DropTargetContext.getCurrentDataFlavorsAsList()

    private static var getCurrentDataFlavorsAsList_MethodID_11: jmethodID?

    open func getCurrentDataFlavorsAsList() -> java_util.List! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCurrentDataFlavorsAsList", methodSig: "()Ljava/util/List;", methodCache: &DropTargetContext.getCurrentDataFlavorsAsList_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.ListForward( javaObject: __return ) : nil
    }


    /// protected void java.awt.dnd.DropTargetContext.acceptDrag(int)

    private static var acceptDrag_MethodID_12: jmethodID?

    open func acceptDrag( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "acceptDrag", methodSig: "(I)V", methodCache: &DropTargetContext.acceptDrag_MethodID_12, args: &__args, locals: &__locals )
    }

    open func acceptDrag( _ _arg0: Int ) {
        acceptDrag( arg0: _arg0 )
    }

    /// protected void java.awt.dnd.DropTargetContext.rejectDrag()

    private static var rejectDrag_MethodID_13: jmethodID?

    open func rejectDrag() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "rejectDrag", methodSig: "()V", methodCache: &DropTargetContext.rejectDrag_MethodID_13, args: &__args, locals: &__locals )
    }


    /// protected void java.awt.dnd.DropTargetContext.acceptDrop(int)

    private static var acceptDrop_MethodID_14: jmethodID?

    open func acceptDrop( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "acceptDrop", methodSig: "(I)V", methodCache: &DropTargetContext.acceptDrop_MethodID_14, args: &__args, locals: &__locals )
    }

    open func acceptDrop( _ _arg0: Int ) {
        acceptDrop( arg0: _arg0 )
    }

    /// public void java.awt.dnd.DropTargetContext.dropComplete(boolean) throws java.awt.dnd.InvalidDnDOperationException

    private static var dropComplete_MethodID_15: jmethodID?

    open func dropComplete( arg0: Bool ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dropComplete", methodSig: "(Z)V", methodCache: &DropTargetContext.dropComplete_MethodID_15, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw InvalidDnDOperationException( javaObject: throwable )
        }
    }

    open func dropComplete( _ _arg0: Bool ) throws /* java.awt.dnd.InvalidDnDOperationException */ {
        try dropComplete( arg0: _arg0 )
    }

    /// java.awt.dnd.peer.DropTargetContextPeer java.awt.dnd.DropTargetContext.getDropTargetContextPeer()

    /// protected java.awt.datatransfer.Transferable java.awt.dnd.DropTargetContext.createTransferableProxy(java.awt.datatransfer.Transferable,boolean)

    private static var createTransferableProxy_MethodID_16: jmethodID?

    open func createTransferableProxy( arg0: Transferable?, arg1: Bool ) -> Transferable! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createTransferableProxy", methodSig: "(Ljava/awt/datatransfer/Transferable;Z)Ljava/awt/datatransfer/Transferable;", methodCache: &DropTargetContext.createTransferableProxy_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TransferableForward( javaObject: __return ) : nil
    }

    open func createTransferableProxy( _ _arg0: Transferable?, _ _arg1: Bool ) -> Transferable! {
        return createTransferableProxy( arg0: _arg0, arg1: _arg1 )
    }

}
