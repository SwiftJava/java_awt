
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.event.ActionEvent ///

open class ActionEvent: AWTEvent {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ActionEventJNIClass: jclass?

    /// public static final int java.awt.event.ActionEvent.SHIFT_MASK

    private static var SHIFT_MASK_FieldID: jfieldID?

    open static var SHIFT_MASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SHIFT_MASK", fieldType: "I", fieldCache: &SHIFT_MASK_FieldID, className: "java/awt/event/ActionEvent", classCache: &ActionEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.ActionEvent.CTRL_MASK

    private static var CTRL_MASK_FieldID: jfieldID?

    open static var CTRL_MASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CTRL_MASK", fieldType: "I", fieldCache: &CTRL_MASK_FieldID, className: "java/awt/event/ActionEvent", classCache: &ActionEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.ActionEvent.META_MASK

    private static var META_MASK_FieldID: jfieldID?

    open static var META_MASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "META_MASK", fieldType: "I", fieldCache: &META_MASK_FieldID, className: "java/awt/event/ActionEvent", classCache: &ActionEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.ActionEvent.ALT_MASK

    private static var ALT_MASK_FieldID: jfieldID?

    open static var ALT_MASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ALT_MASK", fieldType: "I", fieldCache: &ALT_MASK_FieldID, className: "java/awt/event/ActionEvent", classCache: &ActionEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.ActionEvent.ACTION_FIRST

    private static var ACTION_FIRST_FieldID: jfieldID?

    open static var ACTION_FIRST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ACTION_FIRST", fieldType: "I", fieldCache: &ACTION_FIRST_FieldID, className: "java/awt/event/ActionEvent", classCache: &ActionEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.ActionEvent.ACTION_LAST

    private static var ACTION_LAST_FieldID: jfieldID?

    open static var ACTION_LAST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ACTION_LAST", fieldType: "I", fieldCache: &ACTION_LAST_FieldID, className: "java/awt/event/ActionEvent", classCache: &ActionEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.event.ActionEvent.ACTION_PERFORMED

    private static var ACTION_PERFORMED_FieldID: jfieldID?

    open static var ACTION_PERFORMED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ACTION_PERFORMED", fieldType: "I", fieldCache: &ACTION_PERFORMED_FieldID, className: "java/awt/event/ActionEvent", classCache: &ActionEventJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// java.lang.String java.awt.event.ActionEvent.actionCommand

    /// long java.awt.event.ActionEvent.when

    /// int java.awt.event.ActionEvent.modifiers

    /// private static final long java.awt.event.ActionEvent.serialVersionUID

    /// private static final sun.util.logging.PlatformLogger java.awt.AWTEvent.log

    /// private byte[] java.awt.AWTEvent.bdata

    /// protected int java.awt.AWTEvent.id

    private static var id_FieldID: jfieldID?

    override open var id: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "id", fieldType: "I", fieldCache: &ActionEvent.id_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "id", fieldType: "I", fieldCache: &ActionEvent.id_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean java.awt.AWTEvent.consumed

    private static var consumed_FieldID: jfieldID?

    override open var consumed: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &ActionEvent.consumed_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "consumed", fieldType: "Z", fieldCache: &ActionEvent.consumed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private transient volatile java.security.AccessControlContext java.awt.AWTEvent.acc

    /// transient boolean java.awt.AWTEvent.focusManagerIsDispatching

    /// transient boolean java.awt.AWTEvent.isPosted

    /// private transient boolean java.awt.AWTEvent.isSystemGenerated

    /// public static final long java.awt.AWTEvent.COMPONENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.CONTAINER_EVENT_MASK

    /// public static final long java.awt.AWTEvent.FOCUS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.KEY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_MOTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ACTION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ADJUSTMENT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.ITEM_EVENT_MASK

    /// public static final long java.awt.AWTEvent.TEXT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INPUT_METHOD_EVENT_MASK

    /// static final long java.awt.AWTEvent.INPUT_METHODS_ENABLED_MASK

    /// public static final long java.awt.AWTEvent.PAINT_EVENT_MASK

    /// public static final long java.awt.AWTEvent.INVOCATION_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_EVENT_MASK

    /// public static final long java.awt.AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK

    /// public static final long java.awt.AWTEvent.MOUSE_WHEEL_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_STATE_EVENT_MASK

    /// public static final long java.awt.AWTEvent.WINDOW_FOCUS_EVENT_MASK

    /// public static final int java.awt.AWTEvent.RESERVED_ID_MAX

    /// private static java.lang.reflect.Field java.awt.AWTEvent.inputEvent_CanAccessSystemClipboard_Field

    /// private static final long java.awt.AWTEvent.serialVersionUID

    /// private static final long java.util.EventObject.serialVersionUID

    /// protected transient java.lang.Object java.util.EventObject.source

    private static var source_FieldID: jfieldID?

    override open var source: java_swift.JavaObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &ActionEvent.source_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_swift.JavaObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "source", fieldType: "Ljava/lang/Object;", fieldCache: &ActionEvent.source_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public java.awt.event.ActionEvent(java.lang.Object,int,java.lang.String,long,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( source: java_swift.JavaObject?, id: Int, command: String?, when: Int64, modifiers: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: id, locals: &__locals )
        __args[2] = JNIType.toJava( value: command, locals: &__locals )
        __args[3] = JNIType.toJava( value: when, locals: &__locals )
        __args[4] = JNIType.toJava( value: modifiers, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/ActionEvent", classCache: &ActionEvent.ActionEventJNIClass, methodSig: "(Ljava/lang/Object;ILjava/lang/String;JI)V", methodCache: &ActionEvent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: java_swift.JavaObject?, _ _id: Int, _ _command: String?, _ _when: Int64, _ _modifiers: Int ) {
        self.init( source: _source, id: _id, command: _command, when: _when, modifiers: _modifiers )
    }

    /// public java.awt.event.ActionEvent(java.lang.Object,int,java.lang.String,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( source: java_swift.JavaObject?, id: Int, command: String?, modifiers: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: id, locals: &__locals )
        __args[2] = JNIType.toJava( value: command, locals: &__locals )
        __args[3] = JNIType.toJava( value: modifiers, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/ActionEvent", classCache: &ActionEvent.ActionEventJNIClass, methodSig: "(Ljava/lang/Object;ILjava/lang/String;I)V", methodCache: &ActionEvent.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: java_swift.JavaObject?, _ _id: Int, _ _command: String?, _ _modifiers: Int ) {
        self.init( source: _source, id: _id, command: _command, modifiers: _modifiers )
    }

    /// public java.awt.event.ActionEvent(java.lang.Object,int,java.lang.String)

    private static var new_MethodID_3: jmethodID?

    public convenience init( source: java_swift.JavaObject?, id: Int, command: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: source != nil ? source! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: id, locals: &__locals )
        __args[2] = JNIType.toJava( value: command, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/event/ActionEvent", classCache: &ActionEvent.ActionEventJNIClass, methodSig: "(Ljava/lang/Object;ILjava/lang/String;)V", methodCache: &ActionEvent.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _source: java_swift.JavaObject?, _ _id: Int, _ _command: String? ) {
        self.init( source: _source, id: _id, command: _command )
    }

    /// public int java.awt.event.ActionEvent.getModifiers()

    private static var getModifiers_MethodID_4: jmethodID?

    open func getModifiers() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getModifiers", methodSig: "()I", methodCache: &ActionEvent.getModifiers_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public java.lang.String java.awt.event.ActionEvent.paramString()

    /// public java.lang.String java.awt.event.ActionEvent.getActionCommand()

    private static var getActionCommand_MethodID_5: jmethodID?

    open func getActionCommand() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActionCommand", methodSig: "()Ljava/lang/String;", methodCache: &ActionEvent.getActionCommand_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// public long java.awt.event.ActionEvent.getWhen()

    private static var getWhen_MethodID_6: jmethodID?

    open func getWhen() -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getWhen", methodSig: "()J", methodCache: &ActionEvent.getWhen_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int64(), from: __return )
    }


}

