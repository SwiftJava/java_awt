
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// class java.awt.geom.Path2D ///

open class Path2D: java_lang.JavaObject, Shape, java_lang.Cloneable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.Path2D", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Path2DJNIClass: jclass?

    /// public static final int java.awt.geom.Path2D.WIND_EVEN_ODD

    private static var WIND_EVEN_ODD_FieldID: jfieldID?

    open static var WIND_EVEN_ODD: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WIND_EVEN_ODD", fieldType: "I", fieldCache: &WIND_EVEN_ODD_FieldID, className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.geom.Path2D.WIND_NON_ZERO

    private static var WIND_NON_ZERO_FieldID: jfieldID?

    open static var WIND_NON_ZERO: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WIND_NON_ZERO", fieldType: "I", fieldCache: &WIND_NON_ZERO_FieldID, className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// private static final byte java.awt.geom.Path2D.SEG_MOVETO

    /// private static final byte java.awt.geom.Path2D.SEG_LINETO

    /// private static final byte java.awt.geom.Path2D.SEG_QUADTO

    /// private static final byte java.awt.geom.Path2D.SEG_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SEG_CLOSE

    /// transient byte[] java.awt.geom.Path2D.pointTypes

    /// transient int java.awt.geom.Path2D.numTypes

    /// transient int java.awt.geom.Path2D.numCoords

    /// transient int java.awt.geom.Path2D.windingRule

    /// static final int java.awt.geom.Path2D.INIT_SIZE

    /// static final int java.awt.geom.Path2D.EXPAND_MAX

    /// private static final byte java.awt.geom.Path2D.SERIAL_STORAGE_FLT_ARRAY

    /// private static final byte java.awt.geom.Path2D.SERIAL_STORAGE_DBL_ARRAY

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_MOVETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_LINETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_QUADTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_MOVETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_LINETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_QUADTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_CLOSE

    /// private static final byte java.awt.geom.Path2D.SERIAL_PATH_END

    /// java.awt.geom.Path2D()

    /// java.awt.geom.Path2D(int,int)

    /// public final void java.awt.geom.Path2D.append(java.awt.Shape,boolean)

    private static var append_MethodID_1: jmethodID?

    open func append( arg0: Shape?, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/awt/Shape;Z)V", methodCache: &Path2D.append_MethodID_1, args: &__args, locals: &__locals )
    }

    open func append( _ _arg0: Shape?, _ _arg1: Bool ) {
        append( arg0: _arg0, arg1: _arg1 )
    }

    /// abstract void java.awt.geom.Path2D.append(double,double)

    /// abstract void java.awt.geom.Path2D.append(float,float)

    /// public abstract void java.awt.geom.Path2D.append(java.awt.geom.PathIterator,boolean)

    private static var append_MethodID_2: jmethodID?

    open func append( arg0: PathIterator?, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/awt/geom/PathIterator;Z)V", methodCache: &Path2D.append_MethodID_2, args: &__args, locals: &__locals )
    }

    open func append( _ _arg0: PathIterator?, _ _arg1: Bool ) {
        append( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.awt.geom.Path2D.clone()

    private static var clone_MethodID_3: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &Path2D.clone_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public static boolean java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,double,double)

    private static var contains_MethodID_4: jmethodID?

    open class func contains( arg0: PathIterator?, arg1: Double, arg2: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass, methodName: "contains", methodSig: "(Ljava/awt/geom/PathIterator;DD)Z", methodCache: &contains_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func contains( _ _arg0: PathIterator?, _ _arg1: Double, _ _arg2: Double ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public final boolean java.awt.geom.Path2D.contains(double,double,double,double)

    private static var contains_MethodID_5: jmethodID?

    open func contains( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(DDDD)Z", methodCache: &Path2D.contains_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public final boolean java.awt.geom.Path2D.contains(java.awt.geom.Rectangle2D)

    private static var contains_MethodID_6: jmethodID?

    open func contains( arg0: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/geom/Rectangle2D;)Z", methodCache: &Path2D.contains_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Rectangle2D? ) -> Bool {
        return contains( arg0: _arg0 )
    }

    /// public static boolean java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,java.awt.geom.Rectangle2D)

    private static var contains_MethodID_7: jmethodID?

    open class func contains( arg0: PathIterator?, arg1: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass, methodName: "contains", methodSig: "(Ljava/awt/geom/PathIterator;Ljava/awt/geom/Rectangle2D;)Z", methodCache: &contains_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func contains( _ _arg0: PathIterator?, _ _arg1: Rectangle2D? ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1 )
    }

    /// public static boolean java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,double,double,double,double)

    private static var contains_MethodID_8: jmethodID?

    open class func contains( arg0: PathIterator?, arg1: Double, arg2: Double, arg3: Double, arg4: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass, methodName: "contains", methodSig: "(Ljava/awt/geom/PathIterator;DDDD)Z", methodCache: &contains_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func contains( _ _arg0: PathIterator?, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public final boolean java.awt.geom.Path2D.contains(java.awt.geom.Point2D)

    private static var contains_MethodID_9: jmethodID?

    open func contains( arg0: Point2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/geom/Point2D;)Z", methodCache: &Path2D.contains_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Point2D? ) -> Bool {
        return contains( arg0: _arg0 )
    }

    /// public final boolean java.awt.geom.Path2D.contains(double,double)

    private static var contains_MethodID_10: jmethodID?

    open func contains( arg0: Double, arg1: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(DD)Z", methodCache: &Path2D.contains_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func contains( _ _arg0: Double, _ _arg1: Double ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1 )
    }

    /// public static boolean java.awt.geom.Path2D.contains(java.awt.geom.PathIterator,java.awt.geom.Point2D)

    private static var contains_MethodID_11: jmethodID?

    open class func contains( arg0: PathIterator?, arg1: Point2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass, methodName: "contains", methodSig: "(Ljava/awt/geom/PathIterator;Ljava/awt/geom/Point2D;)Z", methodCache: &contains_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func contains( _ _arg0: PathIterator?, _ _arg1: Point2D? ) -> Bool {
        return contains( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.geom.Path2D.transform(java.awt.geom.AffineTransform)

    private static var transform_MethodID_12: jmethodID?

    open func transform( arg0: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "transform", methodSig: "(Ljava/awt/geom/AffineTransform;)V", methodCache: &Path2D.transform_MethodID_12, args: &__args, locals: &__locals )
    }

    open func transform( _ _arg0: AffineTransform? ) {
        transform( arg0: _arg0 )
    }

    /// final void java.awt.geom.Path2D.writeObject(java.io.ObjectOutputStream,boolean) throws java.io.IOException

    /// final void java.awt.geom.Path2D.readObject(java.io.ObjectInputStream,boolean) throws java.lang.ClassNotFoundException,java.io.IOException

    /// public final synchronized void java.awt.geom.Path2D.reset()

    private static var reset_MethodID_13: jmethodID?

    open func reset() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reset", methodSig: "()V", methodCache: &Path2D.reset_MethodID_13, args: &__args, locals: &__locals )
    }


    /// public static boolean java.awt.geom.Path2D.intersects(java.awt.geom.PathIterator,double,double,double,double)

    private static var intersects_MethodID_14: jmethodID?

    open class func intersects( arg0: PathIterator?, arg1: Double, arg2: Double, arg3: Double, arg4: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass, methodName: "intersects", methodSig: "(Ljava/awt/geom/PathIterator;DDDD)Z", methodCache: &intersects_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func intersects( _ _arg0: PathIterator?, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double ) -> Bool {
        return intersects( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public final boolean java.awt.geom.Path2D.intersects(java.awt.geom.Rectangle2D)

    private static var intersects_MethodID_15: jmethodID?

    open func intersects( arg0: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "intersects", methodSig: "(Ljava/awt/geom/Rectangle2D;)Z", methodCache: &Path2D.intersects_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func intersects( _ _arg0: Rectangle2D? ) -> Bool {
        return intersects( arg0: _arg0 )
    }

    /// public final boolean java.awt.geom.Path2D.intersects(double,double,double,double)

    private static var intersects_MethodID_16: jmethodID?

    open func intersects( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "intersects", methodSig: "(DDDD)Z", methodCache: &Path2D.intersects_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func intersects( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) -> Bool {
        return intersects( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public static boolean java.awt.geom.Path2D.intersects(java.awt.geom.PathIterator,java.awt.geom.Rectangle2D)

    private static var intersects_MethodID_17: jmethodID?

    open class func intersects( arg0: PathIterator?, arg1: Rectangle2D? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "java/awt/geom/Path2D", classCache: &Path2DJNIClass, methodName: "intersects", methodSig: "(Ljava/awt/geom/PathIterator;Ljava/awt/geom/Rectangle2D;)Z", methodCache: &intersects_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open class func intersects( _ _arg0: PathIterator?, _ _arg1: Rectangle2D? ) -> Bool {
        return intersects( arg0: _arg0, arg1: _arg1 )
    }

    /// public final java.awt.Rectangle java.awt.geom.Path2D.getBounds()

    private static var getBounds_MethodID_18: jmethodID?

    open func getBounds() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &Path2D.getBounds_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


    /// public final synchronized void java.awt.geom.Path2D.closePath()

    private static var closePath_MethodID_19: jmethodID?

    open func closePath() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "closePath", methodSig: "()V", methodCache: &Path2D.closePath_MethodID_19, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.geom.Path2D.moveTo(double,double)

    private static var moveTo_MethodID_20: jmethodID?

    open func moveTo( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "moveTo", methodSig: "(DD)V", methodCache: &Path2D.moveTo_MethodID_20, args: &__args, locals: &__locals )
    }

    open func moveTo( _ _arg0: Double, _ _arg1: Double ) {
        moveTo( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.geom.Path2D.lineTo(double,double)

    private static var lineTo_MethodID_21: jmethodID?

    open func lineTo( arg0: Double, arg1: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "lineTo", methodSig: "(DD)V", methodCache: &Path2D.lineTo_MethodID_21, args: &__args, locals: &__locals )
    }

    open func lineTo( _ _arg0: Double, _ _arg1: Double ) {
        lineTo( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.awt.geom.Path2D.quadTo(double,double,double,double)

    private static var quadTo_MethodID_22: jmethodID?

    open func quadTo( arg0: Double, arg1: Double, arg2: Double, arg3: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "quadTo", methodSig: "(DDDD)V", methodCache: &Path2D.quadTo_MethodID_22, args: &__args, locals: &__locals )
    }

    open func quadTo( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double ) {
        quadTo( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.geom.Path2D.curveTo(double,double,double,double,double,double)

    private static var curveTo_MethodID_23: jmethodID?

    open func curveTo( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "curveTo", methodSig: "(DDDDDD)V", methodCache: &Path2D.curveTo_MethodID_23, args: &__args, locals: &__locals )
    }

    open func curveTo( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double ) {
        curveTo( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public java.awt.geom.PathIterator java.awt.geom.Path2D.getPathIterator(java.awt.geom.AffineTransform,double)

    private static var getPathIterator_MethodID_24: jmethodID?

    open func getPathIterator( arg0: AffineTransform?, arg1: Double ) -> PathIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPathIterator", methodSig: "(Ljava/awt/geom/AffineTransform;D)Ljava/awt/geom/PathIterator;", methodCache: &Path2D.getPathIterator_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PathIteratorForward( javaObject: __return ) : nil
    }

    open func getPathIterator( _ _arg0: AffineTransform?, _ _arg1: Double ) -> PathIterator! {
        return getPathIterator( arg0: _arg0, arg1: _arg1 )
    }

    /// public final synchronized java.awt.Shape java.awt.geom.Path2D.createTransformedShape(java.awt.geom.AffineTransform)

    private static var createTransformedShape_MethodID_25: jmethodID?

    open func createTransformedShape( arg0: AffineTransform? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createTransformedShape", methodSig: "(Ljava/awt/geom/AffineTransform;)Ljava/awt/Shape;", methodCache: &Path2D.createTransformedShape_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func createTransformedShape( _ _arg0: AffineTransform? ) -> Shape! {
        return createTransformedShape( arg0: _arg0 )
    }

    /// public final synchronized int java.awt.geom.Path2D.getWindingRule()

    private static var getWindingRule_MethodID_26: jmethodID?

    open func getWindingRule() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getWindingRule", methodSig: "()I", methodCache: &Path2D.getWindingRule_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// abstract java.awt.geom.Point2D java.awt.geom.Path2D.getPoint(int)

    /// abstract float[] java.awt.geom.Path2D.cloneCoordsFloat(java.awt.geom.AffineTransform)

    /// abstract double[] java.awt.geom.Path2D.cloneCoordsDouble(java.awt.geom.AffineTransform)

    /// abstract void java.awt.geom.Path2D.needRoom(boolean,int)

    /// abstract int java.awt.geom.Path2D.pointCrossings(double,double)

    /// abstract int java.awt.geom.Path2D.rectCrossings(double,double,double,double)

    /// public final void java.awt.geom.Path2D.setWindingRule(int)

    private static var setWindingRule_MethodID_27: jmethodID?

    open func setWindingRule( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setWindingRule", methodSig: "(I)V", methodCache: &Path2D.setWindingRule_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setWindingRule( _ _arg0: Int ) {
        setWindingRule( arg0: _arg0 )
    }

    /// public final synchronized java.awt.geom.Point2D java.awt.geom.Path2D.getCurrentPoint()

    private static var getCurrentPoint_MethodID_28: jmethodID?

    open func getCurrentPoint() -> Point2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCurrentPoint", methodSig: "()Ljava/awt/geom/Point2D;", methodCache: &Path2D.getCurrentPoint_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point2D( javaObject: __return ) : nil
    }


    /// In declared protocol but not defined.. ///

    /// public abstract java.awt.geom.Rectangle2D java.awt.Shape.getBounds2D()

    private static var getBounds2D_MethodID_29: jmethodID?

    open func getBounds2D() -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds2D", methodSig: "()Ljava/awt/geom/Rectangle2D;", methodCache: &Path2D.getBounds2D_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }


    /// public abstract java.awt.geom.PathIterator java.awt.Shape.getPathIterator(java.awt.geom.AffineTransform)

    private static var getPathIterator_MethodID_30: jmethodID?

    open func getPathIterator( arg0: AffineTransform? ) -> PathIterator! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPathIterator", methodSig: "(Ljava/awt/geom/AffineTransform;)Ljava/awt/geom/PathIterator;", methodCache: &Path2D.getPathIterator_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PathIteratorForward( javaObject: __return ) : nil
    }

    open func getPathIterator( _ _arg0: AffineTransform? ) -> PathIterator! {
        return getPathIterator( arg0: _arg0 )
    }

}
