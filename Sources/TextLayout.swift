
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:29 GMT 2016 ///

/// class java.awt.font.TextLayout ///

open class TextLayout: java_lang.JavaObject, java_lang.Cloneable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.font.TextLayout", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TextLayoutJNIClass: jclass?

    /// private int java.awt.font.TextLayout.characterCount

    /// private boolean java.awt.font.TextLayout.isVerticalLine

    /// private byte java.awt.font.TextLayout.baseline

    /// private float[] java.awt.font.TextLayout.baselineOffsets

    /// private java.awt.font.TextLine java.awt.font.TextLayout.textLine

    /// private java.awt.font.TextLine$TextLineMetrics java.awt.font.TextLayout.lineMetrics

    /// private float java.awt.font.TextLayout.visibleAdvance

    /// private int java.awt.font.TextLayout.hashCodeCache

    /// private boolean java.awt.font.TextLayout.cacheIsValid

    /// private float java.awt.font.TextLayout.justifyRatio

    /// private static final float java.awt.font.TextLayout.ALREADY_JUSTIFIED

    /// private static float java.awt.font.TextLayout.dx

    /// private static float java.awt.font.TextLayout.dy

    /// private java.awt.geom.Rectangle2D java.awt.font.TextLayout.naturalBounds

    /// private java.awt.geom.Rectangle2D java.awt.font.TextLayout.boundsRect

    /// private boolean java.awt.font.TextLayout.caretsInLigaturesAreAllowed

    /// public static final java.awt.font.TextLayout$CaretPolicy java.awt.font.TextLayout.DEFAULT_CARET_POLICY

    private static var DEFAULT_CARET_POLICY_FieldID: jfieldID?

    open static var DEFAULT_CARET_POLICY: TextLayout_CaretPolicy! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DEFAULT_CARET_POLICY", fieldType: "Ljava/awt/font/TextLayout$CaretPolicy;", fieldCache: &DEFAULT_CARET_POLICY_FieldID, className: "java/awt/font/TextLayout", classCache: &TextLayoutJNIClass )
            return __value != nil ? TextLayout_CaretPolicy( javaObject: __value ) : nil
        }
    }

    /// public java.awt.font.TextLayout(java.lang.String,java.awt.Font,java.awt.font.FontRenderContext)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: String?, arg1: Font?, arg2: FontRenderContext? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/font/TextLayout", classCache: &TextLayout.TextLayoutJNIClass, methodSig: "(Ljava/lang/String;Ljava/awt/Font;Ljava/awt/font/FontRenderContext;)V", methodCache: &TextLayout.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: Font?, _ _arg2: FontRenderContext? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.font.TextLayout(java.lang.String,java.util.Map,java.awt.font.FontRenderContext)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: String?, arg1: java_util.Map?, arg2: FontRenderContext? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/font/TextLayout", classCache: &TextLayout.TextLayoutJNIClass, methodSig: "(Ljava/lang/String;Ljava/util/Map;Ljava/awt/font/FontRenderContext;)V", methodCache: &TextLayout.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: java_util.Map?, _ _arg2: FontRenderContext? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.font.TextLayout(java.text.AttributedCharacterIterator,java.awt.font.FontRenderContext)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: /* java.text.AttributedCharacterIterator */ UnclassedProtocol?, arg1: FontRenderContext? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/font/TextLayout", classCache: &TextLayout.TextLayoutJNIClass, methodSig: "(Ljava/text/AttributedCharacterIterator;Ljava/awt/font/FontRenderContext;)V", methodCache: &TextLayout.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: /* java.text.AttributedCharacterIterator */ UnclassedProtocol?, _ _arg1: FontRenderContext? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// java.awt.font.TextLayout(java.awt.font.TextLine,byte,float[],float)

    /// public boolean java.awt.font.TextLayout.equals(java.awt.font.TextLayout)

    private static var equals_MethodID_4: jmethodID?

    open func equals( arg0: TextLayout? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/awt/font/TextLayout;)Z", methodCache: &TextLayout.equals_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func equals( _ _arg0: TextLayout? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public boolean java.awt.font.TextLayout.equals(java.lang.Object)

    /// public java.lang.String java.awt.font.TextLayout.toString()

    /// public int java.awt.font.TextLayout.hashCode()

    /// protected java.lang.Object java.awt.font.TextLayout.clone()

    private static var clone_MethodID_5: jmethodID?

    override open func clone() -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &TextLayout.clone_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// static java.awt.font.TextHitInfo java.awt.font.TextLayout.access$000(java.awt.font.TextLayout,java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)

    /// public java.awt.geom.Rectangle2D java.awt.font.TextLayout.getBounds()

    private static var getBounds_MethodID_6: jmethodID?

    open func getBounds() -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "()Ljava/awt/geom/Rectangle2D;", methodCache: &TextLayout.getBounds_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }


    /// public float java.awt.font.TextLayout.getLeading()

    private static var getLeading_MethodID_7: jmethodID?

    open func getLeading() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getLeading", methodSig: "()F", methodCache: &TextLayout.getLeading_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public float java.awt.font.TextLayout.getAscent()

    private static var getAscent_MethodID_8: jmethodID?

    open func getAscent() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getAscent", methodSig: "()F", methodCache: &TextLayout.getAscent_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public float java.awt.font.TextLayout.getDescent()

    private static var getDescent_MethodID_9: jmethodID?

    open func getDescent() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getDescent", methodSig: "()F", methodCache: &TextLayout.getDescent_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public byte java.awt.font.TextLayout.getBaseline()

    private static var getBaseline_MethodID_10: jmethodID?

    open func getBaseline() -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallByteMethod( object: javaObject, methodName: "getBaseline", methodSig: "()B", methodCache: &TextLayout.getBaseline_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int8(), from: __return )
    }


    /// public boolean java.awt.font.TextLayout.isLeftToRight()

    private static var isLeftToRight_MethodID_11: jmethodID?

    open func isLeftToRight() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isLeftToRight", methodSig: "()Z", methodCache: &TextLayout.isLeftToRight_MethodID_11, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public float java.awt.font.TextLayout.getAdvance()

    private static var getAdvance_MethodID_12: jmethodID?

    open func getAdvance() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getAdvance", methodSig: "()F", methodCache: &TextLayout.getAdvance_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public void java.awt.font.TextLayout.draw(java.awt.Graphics2D,float,float)

    private static var draw_MethodID_13: jmethodID?

    open func draw( arg0: Graphics2D?, arg1: Float, arg2: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "draw", methodSig: "(Ljava/awt/Graphics2D;FF)V", methodCache: &TextLayout.draw_MethodID_13, args: &__args, locals: &__locals )
    }

    open func draw( _ _arg0: Graphics2D?, _ _arg1: Float, _ _arg2: Float ) {
        draw( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public float[] java.awt.font.TextLayout.getBaselineOffsets()

    private static var getBaselineOffsets_MethodID_14: jmethodID?

    open func getBaselineOffsets() -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBaselineOffsets", methodSig: "()[F", methodCache: &TextLayout.getBaselineOffsets_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }


    /// static byte java.awt.font.TextLayout.getBaselineFromGraphic(java.awt.font.GraphicAttribute)

    /// private static java.awt.Font java.awt.font.TextLayout.singleFont(char[],int,int,java.util.Map)

    /// private void java.awt.font.TextLayout.paragraphInit(byte,sun.font.CoreMetrics,java.util.Map,char[])

    /// private void java.awt.font.TextLayout.fastInit(char[],java.awt.Font,java.util.Map,java.awt.font.FontRenderContext)

    /// private void java.awt.font.TextLayout.standardInit(java.text.AttributedCharacterIterator,char[],java.awt.font.FontRenderContext)

    /// private void java.awt.font.TextLayout.ensureCache()

    /// private void java.awt.font.TextLayout.buildCache()

    /// private java.awt.geom.Rectangle2D java.awt.font.TextLayout.getNaturalBounds()

    /// private void java.awt.font.TextLayout.checkTextHit(java.awt.font.TextHitInfo)

    /// public java.awt.font.TextLayout java.awt.font.TextLayout.getJustifiedLayout(float)

    private static var getJustifiedLayout_MethodID_15: jmethodID?

    open func getJustifiedLayout( arg0: Float ) -> TextLayout! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getJustifiedLayout", methodSig: "(F)Ljava/awt/font/TextLayout;", methodCache: &TextLayout.getJustifiedLayout_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextLayout( javaObject: __return ) : nil
    }

    open func getJustifiedLayout( _ _arg0: Float ) -> TextLayout! {
        return getJustifiedLayout( arg0: _arg0 )
    }

    /// protected void java.awt.font.TextLayout.handleJustify(float)

    private static var handleJustify_MethodID_16: jmethodID?

    open func handleJustify( arg0: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "handleJustify", methodSig: "(F)V", methodCache: &TextLayout.handleJustify_MethodID_16, args: &__args, locals: &__locals )
    }

    open func handleJustify( _ _arg0: Float ) {
        handleJustify( arg0: _arg0 )
    }

    /// public float java.awt.font.TextLayout.getVisibleAdvance()

    private static var getVisibleAdvance_MethodID_17: jmethodID?

    open func getVisibleAdvance() -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getVisibleAdvance", methodSig: "()F", methodCache: &TextLayout.getVisibleAdvance_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Float(), from: __return )
    }


    /// public java.awt.Rectangle java.awt.font.TextLayout.getPixelBounds(java.awt.font.FontRenderContext,float,float)

    private static var getPixelBounds_MethodID_18: jmethodID?

    open func getPixelBounds( arg0: FontRenderContext?, arg1: Float, arg2: Float ) -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPixelBounds", methodSig: "(Ljava/awt/font/FontRenderContext;FF)Ljava/awt/Rectangle;", methodCache: &TextLayout.getPixelBounds_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }

    open func getPixelBounds( _ _arg0: FontRenderContext?, _ _arg1: Float, _ _arg2: Float ) -> Rectangle! {
        return getPixelBounds( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public boolean java.awt.font.TextLayout.isVertical()

    private static var isVertical_MethodID_19: jmethodID?

    open func isVertical() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isVertical", methodSig: "()Z", methodCache: &TextLayout.isVertical_MethodID_19, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.awt.font.TextLayout.getCharacterCount()

    private static var getCharacterCount_MethodID_20: jmethodID?

    open func getCharacterCount() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getCharacterCount", methodSig: "()I", methodCache: &TextLayout.getCharacterCount_MethodID_20, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public float[] java.awt.font.TextLayout.getCaretInfo(java.awt.font.TextHitInfo)

    private static var getCaretInfo_MethodID_21: jmethodID?

    open func getCaretInfo( arg0: TextHitInfo? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretInfo", methodSig: "(Ljava/awt/font/TextHitInfo;)[F", methodCache: &TextLayout.getCaretInfo_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getCaretInfo( _ _arg0: TextHitInfo? ) -> [Float]! {
        return getCaretInfo( arg0: _arg0 )
    }

    /// private float[] java.awt.font.TextLayout.getCaretInfo(int,java.awt.geom.Rectangle2D,float[])

    /// public float[] java.awt.font.TextLayout.getCaretInfo(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)

    private static var getCaretInfo_MethodID_22: jmethodID?

    open func getCaretInfo( arg0: TextHitInfo?, arg1: Rectangle2D? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretInfo", methodSig: "(Ljava/awt/font/TextHitInfo;Ljava/awt/geom/Rectangle2D;)[F", methodCache: &TextLayout.getCaretInfo_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getCaretInfo( _ _arg0: TextHitInfo?, _ _arg1: Rectangle2D? ) -> [Float]! {
        return getCaretInfo( arg0: _arg0, arg1: _arg1 )
    }

    /// private float[] java.awt.font.TextLayout.getCaretInfoTestInternal(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)

    /// private int java.awt.font.TextLayout.hitToCaret(java.awt.font.TextHitInfo)

    /// private java.awt.font.TextHitInfo java.awt.font.TextLayout.caretToHit(int)

    /// private boolean java.awt.font.TextLayout.caretIsValid(int)

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.getNextRightHit(int)

    private static var getNextRightHit_MethodID_23: jmethodID?

    open func getNextRightHit( arg0: Int ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNextRightHit", methodSig: "(I)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.getNextRightHit_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func getNextRightHit( _ _arg0: Int ) -> TextHitInfo! {
        return getNextRightHit( arg0: _arg0 )
    }

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.getNextRightHit(java.awt.font.TextHitInfo)

    private static var getNextRightHit_MethodID_24: jmethodID?

    open func getNextRightHit( arg0: TextHitInfo? ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNextRightHit", methodSig: "(Ljava/awt/font/TextHitInfo;)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.getNextRightHit_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func getNextRightHit( _ _arg0: TextHitInfo? ) -> TextHitInfo! {
        return getNextRightHit( arg0: _arg0 )
    }

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.getNextRightHit(int,java.awt.font.TextLayout$CaretPolicy)

    private static var getNextRightHit_MethodID_25: jmethodID?

    open func getNextRightHit( arg0: Int, arg1: TextLayout_CaretPolicy? ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNextRightHit", methodSig: "(ILjava/awt/font/TextLayout$CaretPolicy;)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.getNextRightHit_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func getNextRightHit( _ _arg0: Int, _ _arg1: TextLayout_CaretPolicy? ) -> TextHitInfo! {
        return getNextRightHit( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.getNextLeftHit(java.awt.font.TextHitInfo)

    private static var getNextLeftHit_MethodID_26: jmethodID?

    open func getNextLeftHit( arg0: TextHitInfo? ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNextLeftHit", methodSig: "(Ljava/awt/font/TextHitInfo;)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.getNextLeftHit_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func getNextLeftHit( _ _arg0: TextHitInfo? ) -> TextHitInfo! {
        return getNextLeftHit( arg0: _arg0 )
    }

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.getNextLeftHit(int,java.awt.font.TextLayout$CaretPolicy)

    private static var getNextLeftHit_MethodID_27: jmethodID?

    open func getNextLeftHit( arg0: Int, arg1: TextLayout_CaretPolicy? ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNextLeftHit", methodSig: "(ILjava/awt/font/TextLayout$CaretPolicy;)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.getNextLeftHit_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func getNextLeftHit( _ _arg0: Int, _ _arg1: TextLayout_CaretPolicy? ) -> TextHitInfo! {
        return getNextLeftHit( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.getNextLeftHit(int)

    private static var getNextLeftHit_MethodID_28: jmethodID?

    open func getNextLeftHit( arg0: Int ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNextLeftHit", methodSig: "(I)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.getNextLeftHit_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func getNextLeftHit( _ _arg0: Int ) -> TextHitInfo! {
        return getNextLeftHit( arg0: _arg0 )
    }

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.getVisualOtherHit(java.awt.font.TextHitInfo)

    private static var getVisualOtherHit_MethodID_29: jmethodID?

    open func getVisualOtherHit( arg0: TextHitInfo? ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVisualOtherHit", methodSig: "(Ljava/awt/font/TextHitInfo;)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.getVisualOtherHit_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func getVisualOtherHit( _ _arg0: TextHitInfo? ) -> TextHitInfo! {
        return getVisualOtherHit( arg0: _arg0 )
    }

    /// private double[] java.awt.font.TextLayout.getCaretPath(int,java.awt.geom.Rectangle2D,boolean)

    /// private double[] java.awt.font.TextLayout.getCaretPath(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)

    /// private static java.awt.geom.GeneralPath java.awt.font.TextLayout.pathToShape(double[],boolean,sun.font.LayoutPathImpl)

    /// public java.awt.Shape java.awt.font.TextLayout.getCaretShape(java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)

    private static var getCaretShape_MethodID_30: jmethodID?

    open func getCaretShape( arg0: TextHitInfo?, arg1: Rectangle2D? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretShape", methodSig: "(Ljava/awt/font/TextHitInfo;Ljava/awt/geom/Rectangle2D;)Ljava/awt/Shape;", methodCache: &TextLayout.getCaretShape_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getCaretShape( _ _arg0: TextHitInfo?, _ _arg1: Rectangle2D? ) -> Shape! {
        return getCaretShape( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Shape java.awt.font.TextLayout.getCaretShape(java.awt.font.TextHitInfo)

    private static var getCaretShape_MethodID_31: jmethodID?

    open func getCaretShape( arg0: TextHitInfo? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretShape", methodSig: "(Ljava/awt/font/TextHitInfo;)Ljava/awt/Shape;", methodCache: &TextLayout.getCaretShape_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getCaretShape( _ _arg0: TextHitInfo? ) -> Shape! {
        return getCaretShape( arg0: _arg0 )
    }

    /// private final java.awt.font.TextHitInfo java.awt.font.TextLayout.getStrongHit(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)

    /// public byte java.awt.font.TextLayout.getCharacterLevel(int)

    private static var getCharacterLevel_MethodID_32: jmethodID?

    open func getCharacterLevel( arg0: Int ) -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallByteMethod( object: javaObject, methodName: "getCharacterLevel", methodSig: "(I)B", methodCache: &TextLayout.getCharacterLevel_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int8(), from: __return )
    }

    open func getCharacterLevel( _ _arg0: Int ) -> Int8 {
        return getCharacterLevel( arg0: _arg0 )
    }

    /// public java.awt.Shape[] java.awt.font.TextLayout.getCaretShapes(int)

    private static var getCaretShapes_MethodID_33: jmethodID?

    open func getCaretShapes( arg0: Int ) -> [Shape]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretShapes", methodSig: "(I)[Ljava/awt/Shape;", methodCache: &TextLayout.getCaretShapes_MethodID_33, args: &__args, locals: &__locals )
        return JNIType.decode( type: [ShapeForward](), from: __return )
    }

    open func getCaretShapes( _ _arg0: Int ) -> [Shape]! {
        return getCaretShapes( arg0: _arg0 )
    }

    /// public java.awt.Shape[] java.awt.font.TextLayout.getCaretShapes(int,java.awt.geom.Rectangle2D)

    private static var getCaretShapes_MethodID_34: jmethodID?

    open func getCaretShapes( arg0: Int, arg1: Rectangle2D? ) -> [Shape]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretShapes", methodSig: "(ILjava/awt/geom/Rectangle2D;)[Ljava/awt/Shape;", methodCache: &TextLayout.getCaretShapes_MethodID_34, args: &__args, locals: &__locals )
        return JNIType.decode( type: [ShapeForward](), from: __return )
    }

    open func getCaretShapes( _ _arg0: Int, _ _arg1: Rectangle2D? ) -> [Shape]! {
        return getCaretShapes( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Shape[] java.awt.font.TextLayout.getCaretShapes(int,java.awt.geom.Rectangle2D,java.awt.font.TextLayout$CaretPolicy)

    private static var getCaretShapes_MethodID_35: jmethodID?

    open func getCaretShapes( arg0: Int, arg1: Rectangle2D?, arg2: TextLayout_CaretPolicy? ) -> [Shape]! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretShapes", methodSig: "(ILjava/awt/geom/Rectangle2D;Ljava/awt/font/TextLayout$CaretPolicy;)[Ljava/awt/Shape;", methodCache: &TextLayout.getCaretShapes_MethodID_35, args: &__args, locals: &__locals )
        return JNIType.decode( type: [ShapeForward](), from: __return )
    }

    open func getCaretShapes( _ _arg0: Int, _ _arg1: Rectangle2D?, _ _arg2: TextLayout_CaretPolicy? ) -> [Shape]! {
        return getCaretShapes( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private java.awt.geom.GeneralPath java.awt.font.TextLayout.boundingShape(double[],double[])

    /// private java.awt.geom.GeneralPath java.awt.font.TextLayout.caretBoundingShape(int,int,java.awt.geom.Rectangle2D)

    /// private java.awt.geom.GeneralPath java.awt.font.TextLayout.leftShape(java.awt.geom.Rectangle2D)

    /// private java.awt.geom.GeneralPath java.awt.font.TextLayout.rightShape(java.awt.geom.Rectangle2D)

    /// public int[] java.awt.font.TextLayout.getLogicalRangesForVisualSelection(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)

    private static var getLogicalRangesForVisualSelection_MethodID_36: jmethodID?

    open func getLogicalRangesForVisualSelection( arg0: TextHitInfo?, arg1: TextHitInfo? ) -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLogicalRangesForVisualSelection", methodSig: "(Ljava/awt/font/TextHitInfo;Ljava/awt/font/TextHitInfo;)[I", methodCache: &TextLayout.getLogicalRangesForVisualSelection_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }

    open func getLogicalRangesForVisualSelection( _ _arg0: TextHitInfo?, _ _arg1: TextHitInfo? ) -> [Int32]! {
        return getLogicalRangesForVisualSelection( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Shape java.awt.font.TextLayout.getVisualHighlightShape(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo,java.awt.geom.Rectangle2D)

    private static var getVisualHighlightShape_MethodID_37: jmethodID?

    open func getVisualHighlightShape( arg0: TextHitInfo?, arg1: TextHitInfo?, arg2: Rectangle2D? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVisualHighlightShape", methodSig: "(Ljava/awt/font/TextHitInfo;Ljava/awt/font/TextHitInfo;Ljava/awt/geom/Rectangle2D;)Ljava/awt/Shape;", methodCache: &TextLayout.getVisualHighlightShape_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getVisualHighlightShape( _ _arg0: TextHitInfo?, _ _arg1: TextHitInfo?, _ _arg2: Rectangle2D? ) -> Shape! {
        return getVisualHighlightShape( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Shape java.awt.font.TextLayout.getVisualHighlightShape(java.awt.font.TextHitInfo,java.awt.font.TextHitInfo)

    private static var getVisualHighlightShape_MethodID_38: jmethodID?

    open func getVisualHighlightShape( arg0: TextHitInfo?, arg1: TextHitInfo? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVisualHighlightShape", methodSig: "(Ljava/awt/font/TextHitInfo;Ljava/awt/font/TextHitInfo;)Ljava/awt/Shape;", methodCache: &TextLayout.getVisualHighlightShape_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getVisualHighlightShape( _ _arg0: TextHitInfo?, _ _arg1: TextHitInfo? ) -> Shape! {
        return getVisualHighlightShape( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Shape java.awt.font.TextLayout.getLogicalHighlightShape(int,int,java.awt.geom.Rectangle2D)

    private static var getLogicalHighlightShape_MethodID_39: jmethodID?

    open func getLogicalHighlightShape( arg0: Int, arg1: Int, arg2: Rectangle2D? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLogicalHighlightShape", methodSig: "(IILjava/awt/geom/Rectangle2D;)Ljava/awt/Shape;", methodCache: &TextLayout.getLogicalHighlightShape_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getLogicalHighlightShape( _ _arg0: Int, _ _arg1: Int, _ _arg2: Rectangle2D? ) -> Shape! {
        return getLogicalHighlightShape( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Shape java.awt.font.TextLayout.getLogicalHighlightShape(int,int)

    private static var getLogicalHighlightShape_MethodID_40: jmethodID?

    open func getLogicalHighlightShape( arg0: Int, arg1: Int ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLogicalHighlightShape", methodSig: "(II)Ljava/awt/Shape;", methodCache: &TextLayout.getLogicalHighlightShape_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getLogicalHighlightShape( _ _arg0: Int, _ _arg1: Int ) -> Shape! {
        return getLogicalHighlightShape( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Shape java.awt.font.TextLayout.getBlackBoxBounds(int,int)

    private static var getBlackBoxBounds_MethodID_41: jmethodID?

    open func getBlackBoxBounds( arg0: Int, arg1: Int ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBlackBoxBounds", methodSig: "(II)Ljava/awt/Shape;", methodCache: &TextLayout.getBlackBoxBounds_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getBlackBoxBounds( _ _arg0: Int, _ _arg1: Int ) -> Shape! {
        return getBlackBoxBounds( arg0: _arg0, arg1: _arg1 )
    }

    /// private float java.awt.font.TextLayout.caretToPointDistance(float[],float,float)

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.hitTestChar(float,float,java.awt.geom.Rectangle2D)

    private static var hitTestChar_MethodID_42: jmethodID?

    open func hitTestChar( arg0: Float, arg1: Float, arg2: Rectangle2D? ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "hitTestChar", methodSig: "(FFLjava/awt/geom/Rectangle2D;)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.hitTestChar_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func hitTestChar( _ _arg0: Float, _ _arg1: Float, _ _arg2: Rectangle2D? ) -> TextHitInfo! {
        return hitTestChar( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.font.TextHitInfo java.awt.font.TextLayout.hitTestChar(float,float)

    private static var hitTestChar_MethodID_43: jmethodID?

    open func hitTestChar( arg0: Float, arg1: Float ) -> TextHitInfo! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "hitTestChar", methodSig: "(FF)Ljava/awt/font/TextHitInfo;", methodCache: &TextLayout.hitTestChar_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextHitInfo( javaObject: __return ) : nil
    }

    open func hitTestChar( _ _arg0: Float, _ _arg1: Float ) -> TextHitInfo! {
        return hitTestChar( arg0: _arg0, arg1: _arg1 )
    }

    /// java.awt.font.TextLine java.awt.font.TextLayout.getTextLineForTesting()

    /// private static int java.awt.font.TextLayout.sameBaselineUpTo(java.awt.Font,char[],int,int)

    /// public java.awt.Shape java.awt.font.TextLayout.getOutline(java.awt.geom.AffineTransform)

    private static var getOutline_MethodID_44: jmethodID?

    open func getOutline( arg0: AffineTransform? ) -> Shape! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOutline", methodSig: "(Ljava/awt/geom/AffineTransform;)Ljava/awt/Shape;", methodCache: &TextLayout.getOutline_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ShapeForward( javaObject: __return ) : nil
    }

    open func getOutline( _ _arg0: AffineTransform? ) -> Shape! {
        return getOutline( arg0: _arg0 )
    }

    /// public java.awt.font.LayoutPath java.awt.font.TextLayout.getLayoutPath()

    private static var getLayoutPath_MethodID_45: jmethodID?

    open func getLayoutPath() -> LayoutPath! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLayoutPath", methodSig: "()Ljava/awt/font/LayoutPath;", methodCache: &TextLayout.getLayoutPath_MethodID_45, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? LayoutPath( javaObject: __return ) : nil
    }


    /// public void java.awt.font.TextLayout.hitToPoint(java.awt.font.TextHitInfo,java.awt.geom.Point2D)

    private static var hitToPoint_MethodID_46: jmethodID?

    open func hitToPoint( arg0: TextHitInfo?, arg1: Point2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "hitToPoint", methodSig: "(Ljava/awt/font/TextHitInfo;Ljava/awt/geom/Point2D;)V", methodCache: &TextLayout.hitToPoint_MethodID_46, args: &__args, locals: &__locals )
    }

    open func hitToPoint( _ _arg0: TextHitInfo?, _ _arg1: Point2D? ) {
        hitToPoint( arg0: _arg0, arg1: _arg1 )
    }

}
