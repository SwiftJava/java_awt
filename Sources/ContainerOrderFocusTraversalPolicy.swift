
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.ContainerOrderFocusTraversalPolicy ///

open class ContainerOrderFocusTraversalPolicy: FocusTraversalPolicy, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ContainerOrderFocusTraversalPolicyJNIClass: jclass?

    /// private static final sun.util.logging.PlatformLogger java.awt.ContainerOrderFocusTraversalPolicy.log

    /// private static final long java.awt.ContainerOrderFocusTraversalPolicy.serialVersionUID

    /// private final int java.awt.ContainerOrderFocusTraversalPolicy.BACKWARD_TRAVERSAL

    /// private final int java.awt.ContainerOrderFocusTraversalPolicy.FORWARD_TRAVERSAL

    /// private transient java.util.List java.awt.ContainerOrderFocusTraversalPolicy.cachedCycle

    /// private transient java.awt.Container java.awt.ContainerOrderFocusTraversalPolicy.cachedRoot

    /// private boolean java.awt.ContainerOrderFocusTraversalPolicy.implicitDownCycleTraversal

    /// public java.awt.ContainerOrderFocusTraversalPolicy()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "java/awt/ContainerOrderFocusTraversalPolicy", classCache: &ContainerOrderFocusTraversalPolicy.ContainerOrderFocusTraversalPolicyJNIClass, methodSig: "()V", methodCache: &ContainerOrderFocusTraversalPolicy.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// protected boolean java.awt.ContainerOrderFocusTraversalPolicy.accept(java.awt.Component)

    private static var accept_MethodID_2: jmethodID?

    open func accept( arg0: Component? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "accept", methodSig: "(Ljava/awt/Component;)Z", methodCache: &ContainerOrderFocusTraversalPolicy.accept_MethodID_2, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func accept( _ _arg0: Component? ) -> Bool {
        return accept( arg0: _arg0 )
    }

    /// private void java.awt.ContainerOrderFocusTraversalPolicy.enumerateCycle(java.awt.Container,java.util.List)

    /// public java.awt.Component java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(java.awt.Container,java.awt.Component)

    private static var getComponentAfter_MethodID_3: jmethodID?

    open func getComponentAfter( arg0: Container?, arg1: Component? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponentAfter", methodSig: "(Ljava/awt/Container;Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &ContainerOrderFocusTraversalPolicy.getComponentAfter_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    override open func getComponentAfter( _ _arg0: Container?, _ _arg1: Component? ) -> Component! {
        return getComponentAfter( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.Component java.awt.ContainerOrderFocusTraversalPolicy.getComponentBefore(java.awt.Container,java.awt.Component)

    private static var getComponentBefore_MethodID_4: jmethodID?

    open func getComponentBefore( arg0: Container?, arg1: Component? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponentBefore", methodSig: "(Ljava/awt/Container;Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &ContainerOrderFocusTraversalPolicy.getComponentBefore_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    override open func getComponentBefore( _ _arg0: Container?, _ _arg1: Component? ) -> Component! {
        return getComponentBefore( arg0: _arg0, arg1: _arg1 )
    }

    /// private java.awt.Component java.awt.ContainerOrderFocusTraversalPolicy.getComponentDownCycle(java.awt.Component,int)

    /// private int java.awt.ContainerOrderFocusTraversalPolicy.getComponentIndex(java.util.List,java.awt.Component)

    /// public java.awt.Component java.awt.ContainerOrderFocusTraversalPolicy.getDefaultComponent(java.awt.Container)

    private static var getDefaultComponent_MethodID_5: jmethodID?

    open func getDefaultComponent( arg0: Container? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultComponent", methodSig: "(Ljava/awt/Container;)Ljava/awt/Component;", methodCache: &ContainerOrderFocusTraversalPolicy.getDefaultComponent_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    override open func getDefaultComponent( _ _arg0: Container? ) -> Component! {
        return getDefaultComponent( arg0: _arg0 )
    }

    /// public java.awt.Component java.awt.ContainerOrderFocusTraversalPolicy.getFirstComponent(java.awt.Container)

    private static var getFirstComponent_MethodID_6: jmethodID?

    open func getFirstComponent( arg0: Container? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFirstComponent", methodSig: "(Ljava/awt/Container;)Ljava/awt/Component;", methodCache: &ContainerOrderFocusTraversalPolicy.getFirstComponent_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    override open func getFirstComponent( _ _arg0: Container? ) -> Component! {
        return getFirstComponent( arg0: _arg0 )
    }

    /// private java.util.List java.awt.ContainerOrderFocusTraversalPolicy.getFocusTraversalCycle(java.awt.Container)

    /// public boolean java.awt.ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal()

    private static var getImplicitDownCycleTraversal_MethodID_7: jmethodID?

    open func getImplicitDownCycleTraversal() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getImplicitDownCycleTraversal", methodSig: "()Z", methodCache: &ContainerOrderFocusTraversalPolicy.getImplicitDownCycleTraversal_MethodID_7, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public java.awt.Component java.awt.ContainerOrderFocusTraversalPolicy.getLastComponent(java.awt.Container)

    private static var getLastComponent_MethodID_8: jmethodID?

    open func getLastComponent( arg0: Container? ) -> Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLastComponent", methodSig: "(Ljava/awt/Container;)Ljava/awt/Component;", methodCache: &ContainerOrderFocusTraversalPolicy.getLastComponent_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Component( javaObject: __return ) : nil
    }

    override open func getLastComponent( _ _arg0: Container? ) -> Component! {
        return getLastComponent( arg0: _arg0 )
    }

    /// private java.awt.Container java.awt.ContainerOrderFocusTraversalPolicy.getTopmostProvider(java.awt.Container,java.awt.Component)

    /// public void java.awt.ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal(boolean)

    private static var setImplicitDownCycleTraversal_MethodID_9: jmethodID?

    open func setImplicitDownCycleTraversal( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setImplicitDownCycleTraversal", methodSig: "(Z)V", methodCache: &ContainerOrderFocusTraversalPolicy.setImplicitDownCycleTraversal_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setImplicitDownCycleTraversal( _ _arg0: Bool ) {
        setImplicitDownCycleTraversal( arg0: _arg0 )
    }

}

