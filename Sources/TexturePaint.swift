
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:26 GMT 2016 ///

/// class java.awt.TexturePaint ///

open class TexturePaint: java_lang.JavaObject, Paint {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.TexturePaint", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TexturePaintJNIClass: jclass?

    /// java.awt.image.BufferedImage java.awt.TexturePaint.bufImg

    /// double java.awt.TexturePaint.tx

    /// double java.awt.TexturePaint.ty

    /// double java.awt.TexturePaint.sx

    /// double java.awt.TexturePaint.sy

    /// public static final int java.awt.Transparency.OPAQUE

    private static var OPAQUE_FieldID: jfieldID?

    open static var OPAQUE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "OPAQUE", fieldType: "I", fieldCache: &OPAQUE_FieldID, className: "java/awt/TexturePaint", classCache: &TexturePaintJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.BITMASK

    private static var BITMASK_FieldID: jfieldID?

    open static var BITMASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BITMASK", fieldType: "I", fieldCache: &BITMASK_FieldID, className: "java/awt/TexturePaint", classCache: &TexturePaintJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.TRANSLUCENT

    private static var TRANSLUCENT_FieldID: jfieldID?

    open static var TRANSLUCENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TRANSLUCENT", fieldType: "I", fieldCache: &TRANSLUCENT_FieldID, className: "java/awt/TexturePaint", classCache: &TexturePaintJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public java.awt.TexturePaint(java.awt.image.BufferedImage,java.awt.geom.Rectangle2D)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: BufferedImage?, arg1: Rectangle2D? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/TexturePaint", classCache: &TexturePaint.TexturePaintJNIClass, methodSig: "(Ljava/awt/image/BufferedImage;Ljava/awt/geom/Rectangle2D;)V", methodCache: &TexturePaint.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: BufferedImage?, _ _arg1: Rectangle2D? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.image.BufferedImage java.awt.TexturePaint.getImage()

    private static var getImage_MethodID_2: jmethodID?

    open func getImage() -> BufferedImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getImage", methodSig: "()Ljava/awt/image/BufferedImage;", methodCache: &TexturePaint.getImage_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BufferedImage( javaObject: __return ) : nil
    }


    /// public java.awt.PaintContext java.awt.TexturePaint.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)

    private static var createContext_MethodID_3: jmethodID?

    open func createContext( arg0: ColorModel?, arg1: Rectangle?, arg2: Rectangle2D?, arg3: AffineTransform?, arg4: RenderingHints? ) -> PaintContext! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createContext", methodSig: "(Ljava/awt/image/ColorModel;Ljava/awt/Rectangle;Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/AffineTransform;Ljava/awt/RenderingHints;)Ljava/awt/PaintContext;", methodCache: &TexturePaint.createContext_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PaintContextForward( javaObject: __return ) : nil
    }

    open func createContext( _ _arg0: ColorModel?, _ _arg1: Rectangle?, _ _arg2: Rectangle2D?, _ _arg3: AffineTransform?, _ _arg4: RenderingHints? ) -> PaintContext! {
        return createContext( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public int java.awt.TexturePaint.getTransparency()

    private static var getTransparency_MethodID_4: jmethodID?

    open func getTransparency() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTransparency", methodSig: "()I", methodCache: &TexturePaint.getTransparency_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.awt.geom.Rectangle2D java.awt.TexturePaint.getAnchorRect()

    private static var getAnchorRect_MethodID_5: jmethodID?

    open func getAnchorRect() -> Rectangle2D! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAnchorRect", methodSig: "()Ljava/awt/geom/Rectangle2D;", methodCache: &TexturePaint.getAnchorRect_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle2D( javaObject: __return ) : nil
    }


}
