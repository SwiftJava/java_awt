
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:22 GMT 2016 ///

/// class java.awt.geom.CubicCurve2D$Double ///

open class CubicCurve2D_Double: CubicCurve2D, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.CubicCurve2D$Double", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CubicCurve2D_DoubleJNIClass: jclass?

    /// public double java.awt.geom.CubicCurve2D$Double.x1

    private static var x1_FieldID: jfieldID?

    open var x1: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "x1", fieldType: "D", fieldCache: &CubicCurve2D_Double.x1_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "x1", fieldType: "D", fieldCache: &CubicCurve2D_Double.x1_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// public double java.awt.geom.CubicCurve2D$Double.y1

    private static var y1_FieldID: jfieldID?

    open var y1: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "y1", fieldType: "D", fieldCache: &CubicCurve2D_Double.y1_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "y1", fieldType: "D", fieldCache: &CubicCurve2D_Double.y1_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// public double java.awt.geom.CubicCurve2D$Double.ctrlx1

    private static var ctrlx1_FieldID: jfieldID?

    open var ctrlx1: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "ctrlx1", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrlx1_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "ctrlx1", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrlx1_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// public double java.awt.geom.CubicCurve2D$Double.ctrly1

    private static var ctrly1_FieldID: jfieldID?

    open var ctrly1: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "ctrly1", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrly1_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "ctrly1", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrly1_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// public double java.awt.geom.CubicCurve2D$Double.ctrlx2

    private static var ctrlx2_FieldID: jfieldID?

    open var ctrlx2: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "ctrlx2", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrlx2_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "ctrlx2", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrlx2_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// public double java.awt.geom.CubicCurve2D$Double.ctrly2

    private static var ctrly2_FieldID: jfieldID?

    open var ctrly2: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "ctrly2", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrly2_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "ctrly2", fieldType: "D", fieldCache: &CubicCurve2D_Double.ctrly2_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// public double java.awt.geom.CubicCurve2D$Double.x2

    private static var x2_FieldID: jfieldID?

    open var x2: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "x2", fieldType: "D", fieldCache: &CubicCurve2D_Double.x2_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "x2", fieldType: "D", fieldCache: &CubicCurve2D_Double.x2_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// public double java.awt.geom.CubicCurve2D$Double.y2

    private static var y2_FieldID: jfieldID?

    open var y2: Double {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetDoubleField( fieldName: "y2", fieldType: "D", fieldCache: &CubicCurve2D_Double.y2_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Double(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetDoubleField( fieldName: "y2", fieldType: "D", fieldCache: &CubicCurve2D_Double.y2_FieldID, object: javaObject, value: __value.d, locals: &__locals )
        }
    }

    /// private static final long java.awt.geom.CubicCurve2D$Double.serialVersionUID

    /// private static final int java.awt.geom.CubicCurve2D.BELOW

    /// private static final int java.awt.geom.CubicCurve2D.LOWEDGE

    /// private static final int java.awt.geom.CubicCurve2D.INSIDE

    /// private static final int java.awt.geom.CubicCurve2D.HIGHEDGE

    /// private static final int java.awt.geom.CubicCurve2D.ABOVE

    /// public java.awt.geom.CubicCurve2D$Double()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/CubicCurve2D$Double", classCache: &CubicCurve2D_Double.CubicCurve2D_DoubleJNIClass, methodSig: "()V", methodCache: &CubicCurve2D_Double.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.awt.geom.CubicCurve2D$Double(double,double,double,double,double,double,double,double)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double ) {
        var __args = [jvalue]( repeating: jvalue(), count: 8 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        __args[7] = JNIType.encode( value: arg7, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/CubicCurve2D$Double", classCache: &CubicCurve2D_Double.CubicCurve2D_DoubleJNIClass, methodSig: "(DDDDDDDD)V", methodCache: &CubicCurve2D_Double.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Double, _ _arg1: Double, _ _arg2: Double, _ _arg3: Double, _ _arg4: Double, _ _arg5: Double, _ _arg6: Double, _ _arg7: Double ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6, arg7: _arg7 )
    }

    /// public java.awt.geom.Rectangle2D java.awt.geom.CubicCurve2D$Double.getBounds2D()

    /// public double java.awt.geom.CubicCurve2D$Double.getX1()

    /// public double java.awt.geom.CubicCurve2D$Double.getY1()

    /// public double java.awt.geom.CubicCurve2D$Double.getX2()

    /// public double java.awt.geom.CubicCurve2D$Double.getY2()

    /// public double java.awt.geom.CubicCurve2D$Double.getCtrlX1()

    /// public double java.awt.geom.CubicCurve2D$Double.getCtrlY1()

    /// public double java.awt.geom.CubicCurve2D$Double.getCtrlX2()

    /// public double java.awt.geom.CubicCurve2D$Double.getCtrlY2()

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Double.getP1()

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Double.getP2()

    /// public void java.awt.geom.CubicCurve2D$Double.setCurve(double,double,double,double,double,double,double,double)

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Double.getCtrlP1()

    /// public java.awt.geom.Point2D java.awt.geom.CubicCurve2D$Double.getCtrlP2()

}
