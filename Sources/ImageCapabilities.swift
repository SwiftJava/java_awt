
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.ImageCapabilities ///

open class ImageCapabilities: java_swift.JavaObject, java_lang.Cloneable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.ImageCapabilities", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ImageCapabilitiesJNIClass: jclass?

    /// private boolean java.awt.ImageCapabilities.accelerated

    /// public java.awt.ImageCapabilities(boolean)

    private static var new_MethodID_1: jmethodID?

    public convenience init( accelerated: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: accelerated, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/ImageCapabilities", classCache: &ImageCapabilities.ImageCapabilitiesJNIClass, methodSig: "(Z)V", methodCache: &ImageCapabilities.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _accelerated: Bool ) {
        self.init( accelerated: _accelerated )
    }

    /// public java.lang.Object java.awt.ImageCapabilities.clone()

    private static var clone_MethodID_2: jmethodID?

    override open func clone() -> java_swift.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "clone", methodSig: "()Ljava/lang/Object;", methodCache: &ImageCapabilities.clone_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// public boolean java.awt.ImageCapabilities.isAccelerated()

    private static var isAccelerated_MethodID_3: jmethodID?

    open func isAccelerated() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAccelerated", methodSig: "()Z", methodCache: &ImageCapabilities.isAccelerated_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public boolean java.awt.ImageCapabilities.isTrueVolatile()

    private static var isTrueVolatile_MethodID_4: jmethodID?

    open func isTrueVolatile() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTrueVolatile", methodSig: "()Z", methodCache: &ImageCapabilities.isTrueVolatile_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


}

