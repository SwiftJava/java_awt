
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.Frame ///

open class Frame: Window {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FrameJNIClass: jclass?

    /// public static final int java.awt.Frame.DEFAULT_CURSOR

    private static var DEFAULT_CURSOR_FieldID: jfieldID?

    open static var DEFAULT_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT_CURSOR", fieldType: "I", fieldCache: &DEFAULT_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.CROSSHAIR_CURSOR

    private static var CROSSHAIR_CURSOR_FieldID: jfieldID?

    open static var CROSSHAIR_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "CROSSHAIR_CURSOR", fieldType: "I", fieldCache: &CROSSHAIR_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.TEXT_CURSOR

    private static var TEXT_CURSOR_FieldID: jfieldID?

    open static var TEXT_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TEXT_CURSOR", fieldType: "I", fieldCache: &TEXT_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.WAIT_CURSOR

    private static var WAIT_CURSOR_FieldID: jfieldID?

    open static var WAIT_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WAIT_CURSOR", fieldType: "I", fieldCache: &WAIT_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.SW_RESIZE_CURSOR

    private static var SW_RESIZE_CURSOR_FieldID: jfieldID?

    open static var SW_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SW_RESIZE_CURSOR", fieldType: "I", fieldCache: &SW_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.SE_RESIZE_CURSOR

    private static var SE_RESIZE_CURSOR_FieldID: jfieldID?

    open static var SE_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SE_RESIZE_CURSOR", fieldType: "I", fieldCache: &SE_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.NW_RESIZE_CURSOR

    private static var NW_RESIZE_CURSOR_FieldID: jfieldID?

    open static var NW_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NW_RESIZE_CURSOR", fieldType: "I", fieldCache: &NW_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.NE_RESIZE_CURSOR

    private static var NE_RESIZE_CURSOR_FieldID: jfieldID?

    open static var NE_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NE_RESIZE_CURSOR", fieldType: "I", fieldCache: &NE_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.N_RESIZE_CURSOR

    private static var N_RESIZE_CURSOR_FieldID: jfieldID?

    open static var N_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "N_RESIZE_CURSOR", fieldType: "I", fieldCache: &N_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.S_RESIZE_CURSOR

    private static var S_RESIZE_CURSOR_FieldID: jfieldID?

    open static var S_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "S_RESIZE_CURSOR", fieldType: "I", fieldCache: &S_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.W_RESIZE_CURSOR

    private static var W_RESIZE_CURSOR_FieldID: jfieldID?

    open static var W_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "W_RESIZE_CURSOR", fieldType: "I", fieldCache: &W_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.E_RESIZE_CURSOR

    private static var E_RESIZE_CURSOR_FieldID: jfieldID?

    open static var E_RESIZE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "E_RESIZE_CURSOR", fieldType: "I", fieldCache: &E_RESIZE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.HAND_CURSOR

    private static var HAND_CURSOR_FieldID: jfieldID?

    open static var HAND_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HAND_CURSOR", fieldType: "I", fieldCache: &HAND_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.MOVE_CURSOR

    private static var MOVE_CURSOR_FieldID: jfieldID?

    open static var MOVE_CURSOR: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MOVE_CURSOR", fieldType: "I", fieldCache: &MOVE_CURSOR_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.NORMAL

    private static var NORMAL_FieldID: jfieldID?

    open static var NORMAL: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NORMAL", fieldType: "I", fieldCache: &NORMAL_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.ICONIFIED

    private static var ICONIFIED_FieldID: jfieldID?

    open static var ICONIFIED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ICONIFIED", fieldType: "I", fieldCache: &ICONIFIED_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.MAXIMIZED_HORIZ

    private static var MAXIMIZED_HORIZ_FieldID: jfieldID?

    open static var MAXIMIZED_HORIZ: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAXIMIZED_HORIZ", fieldType: "I", fieldCache: &MAXIMIZED_HORIZ_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.MAXIMIZED_VERT

    private static var MAXIMIZED_VERT_FieldID: jfieldID?

    open static var MAXIMIZED_VERT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAXIMIZED_VERT", fieldType: "I", fieldCache: &MAXIMIZED_VERT_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Frame.MAXIMIZED_BOTH

    private static var MAXIMIZED_BOTH_FieldID: jfieldID?

    open static var MAXIMIZED_BOTH: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MAXIMIZED_BOTH", fieldType: "I", fieldCache: &MAXIMIZED_BOTH_FieldID, className: "java/awt/Frame", classCache: &FrameJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// java.awt.Rectangle java.awt.Frame.maximizedBounds

    /// java.lang.String java.awt.Frame.title

    /// java.awt.MenuBar java.awt.Frame.menuBar

    /// boolean java.awt.Frame.resizable

    /// boolean java.awt.Frame.undecorated

    /// boolean java.awt.Frame.mbManagement

    /// private int java.awt.Frame.state

    /// java.util.Vector java.awt.Frame.ownedWindows

    /// private static final java.lang.String java.awt.Frame.base

    /// private static int java.awt.Frame.nameCounter

    /// private static final long java.awt.Frame.serialVersionUID

    /// private int java.awt.Frame.frameSerializedDataVersion

    /// java.lang.String java.awt.Window.warningString

    /// transient java.util.List java.awt.Window.icons

    /// private transient java.awt.Component java.awt.Window.temporaryLostComponent

    /// static boolean java.awt.Window.systemSyncLWRequests

    /// boolean java.awt.Window.syncLWRequests

    /// transient boolean java.awt.Window.beforeFirstShow

    /// private transient boolean java.awt.Window.disposing

    /// transient java.awt.Window$WindowDisposerRecord java.awt.Window.disposerRecord

    /// static final int java.awt.Window.OPENED

    /// int java.awt.Window.state

    /// private boolean java.awt.Window.alwaysOnTop

    /// private static final sun.awt.util.IdentityArrayList java.awt.Window.allWindows

    /// transient java.util.Vector java.awt.Window.ownedWindowList

    /// private transient java.lang.ref.WeakReference java.awt.Window.weakThis

    /// transient boolean java.awt.Window.showWithParent

    /// transient java.awt.Dialog java.awt.Window.modalBlocker

    /// java.awt.Dialog$ModalExclusionType java.awt.Window.modalExclusionType

    /// transient java.awt.event.WindowListener java.awt.Window.windowListener

    /// transient java.awt.event.WindowStateListener java.awt.Window.windowStateListener

    /// transient java.awt.event.WindowFocusListener java.awt.Window.windowFocusListener

    /// transient java.awt.im.InputContext java.awt.Window.inputContext

    /// private transient java.lang.Object java.awt.Window.inputContextLock

    /// private java.awt.FocusManager java.awt.Window.focusMgr

    /// private boolean java.awt.Window.focusableWindowState

    /// private volatile boolean java.awt.Window.autoRequestFocus

    /// transient boolean java.awt.Window.isInShow

    /// private volatile float java.awt.Window.opacity

    /// private java.awt.Shape java.awt.Window.shape

    /// private static final java.lang.String java.awt.Window.base

    /// private static int java.awt.Window.nameCounter

    /// private static final long java.awt.Window.serialVersionUID

    /// private static final sun.util.logging.PlatformLogger java.awt.Window.log

    /// private static final boolean java.awt.Window.locationByPlatformProp

    /// transient boolean java.awt.Window.isTrayIconWindow

    /// private transient volatile int java.awt.Window.securityWarningWidth

    /// private transient volatile int java.awt.Window.securityWarningHeight

    /// private transient double java.awt.Window.securityWarningPointX

    /// private transient double java.awt.Window.securityWarningPointY

    /// private transient float java.awt.Window.securityWarningAlignmentX

    /// private transient float java.awt.Window.securityWarningAlignmentY

    /// transient java.lang.Object java.awt.Window.anchor

    /// private static final java.util.concurrent.atomic.AtomicBoolean java.awt.Window.beforeFirstWindowShown

    /// private java.awt.Window$Type java.awt.Window.type

    /// private int java.awt.Window.windowSerializedDataVersion

    /// private volatile boolean java.awt.Window.locationByPlatform

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// private java.util.List java.awt.Container.component

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusCycleRoot

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// private transient boolean java.awt.Container.printing

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    /// transient int java.awt.Container.listeningChildren

    /// transient int java.awt.Container.listeningBoundsChildren

    /// transient int java.awt.Container.descendantsCount

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    /// private static final long java.awt.Container.serialVersionUID

    /// static final boolean java.awt.Container.INCLUDE_SELF

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// transient java.awt.Component java.awt.Container.modalComp

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    /// private int java.awt.Container.containerSerializedDataVersion

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    /// transient java.awt.Container java.awt.Component.parent

    /// transient sun.awt.AppContext java.awt.Component.appContext

    /// int java.awt.Component.x

    /// int java.awt.Component.y

    /// int java.awt.Component.width

    /// int java.awt.Component.height

    /// java.awt.Color java.awt.Component.foreground

    /// java.awt.Color java.awt.Component.background

    /// volatile java.awt.Font java.awt.Component.font

    /// java.awt.Font java.awt.Component.peerFont

    /// java.awt.Cursor java.awt.Component.cursor

    /// java.util.Locale java.awt.Component.locale

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    /// boolean java.awt.Component.ignoreRepaint

    /// boolean java.awt.Component.visible

    /// boolean java.awt.Component.enabled

    /// private volatile boolean java.awt.Component.valid

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    /// java.util.Vector java.awt.Component.popups

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// private boolean java.awt.Component.focusable

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// static final java.lang.Object java.awt.Component.LOCK

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// java.awt.Dimension java.awt.Component.minSize

    /// boolean java.awt.Component.minSizeSet

    /// java.awt.Dimension java.awt.Component.prefSize

    /// boolean java.awt.Component.prefSizeSet

    /// java.awt.Dimension java.awt.Component.maxSize

    /// boolean java.awt.Component.maxSizeSet

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    /// boolean java.awt.Component.newEventsOnly

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    /// static final java.lang.String java.awt.Component.actionListenerK

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    /// static final java.lang.String java.awt.Component.componentListenerK

    /// static final java.lang.String java.awt.Component.containerListenerK

    /// static final java.lang.String java.awt.Component.focusListenerK

    /// static final java.lang.String java.awt.Component.itemListenerK

    /// static final java.lang.String java.awt.Component.keyListenerK

    /// static final java.lang.String java.awt.Component.mouseListenerK

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    /// static final java.lang.String java.awt.Component.textListenerK

    /// static final java.lang.String java.awt.Component.ownedWindowK

    /// static final java.lang.String java.awt.Component.windowListenerK

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    /// long java.awt.Component.eventMask

    /// static boolean java.awt.Component.isInc

    /// static int java.awt.Component.incRate

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    /// private static final long java.awt.Component.serialVersionUID

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// boolean java.awt.Component.isPacked

    /// private int java.awt.Component.boundsOp

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// private int java.awt.Component.componentSerializedDataVersion

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* javax.accessibility.AccessibleContext */ UnclassedObject! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &Frame.accessibleContext_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* javax.accessibility.AccessibleContext */ UnclassedObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &Frame.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// static final boolean java.awt.Component.$assertionsDisabled

    /// public static final int java.awt.image.ImageObserver.WIDTH

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    /// public static final int java.awt.image.ImageObserver.ERROR

    /// public static final int java.awt.image.ImageObserver.ABORT

    /// public java.awt.Frame(java.lang.String,java.awt.GraphicsConfiguration)

    private static var new_MethodID_1: jmethodID?

    public convenience init( title: String?, gc: GraphicsConfiguration? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: title, locals: &__locals )
        __args[1] = JNIType.toJava( value: gc, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Frame", classCache: &Frame.FrameJNIClass, methodSig: "(Ljava/lang/String;Ljava/awt/GraphicsConfiguration;)V", methodCache: &Frame.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _title: String?, _ _gc: GraphicsConfiguration? ) {
        self.init( title: _title, gc: _gc )
    }

    /// public java.awt.Frame(java.lang.String) throws java.awt.HeadlessException

    private static var new_MethodID_2: jmethodID?

    public convenience init( title: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: title, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Frame", classCache: &Frame.FrameJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &Frame.new_MethodID_2, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _title: String? ) throws {
        try self.init( title: _title )
    }

    /// public java.awt.Frame(java.awt.GraphicsConfiguration)

    private static var new_MethodID_3: jmethodID?

    public convenience init( gc: GraphicsConfiguration? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: gc, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Frame", classCache: &Frame.FrameJNIClass, methodSig: "(Ljava/awt/GraphicsConfiguration;)V", methodCache: &Frame.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _gc: GraphicsConfiguration? ) {
        self.init( gc: _gc )
    }

    /// public java.awt.Frame() throws java.awt.HeadlessException

    private static var new_MethodID_4: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/Frame", classCache: &Frame.FrameJNIClass, methodSig: "()V", methodCache: &Frame.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.Frame.remove(java.awt.MenuComponent)

    private static var remove_MethodID_5: jmethodID?

    override open func remove( comp: MenuComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: comp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/awt/MenuComponent;)V", methodCache: &Frame.remove_MethodID_5, args: &__args, locals: &__locals )
    }

    override open func remove( _ _comp: MenuComponent? ) {
        remove( comp: _comp )
    }

    /// static int java.awt.Frame.access$000(java.awt.Frame)

    /// private void java.awt.Frame.init(java.lang.String,java.awt.GraphicsConfiguration)

    /// private void java.awt.Frame.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException,java.awt.HeadlessException

    /// private void java.awt.Frame.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public synchronized int java.awt.Frame.getState()

    private static var getState_MethodID_6: jmethodID?

    open func getState() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getState", methodSig: "()I", methodCache: &Frame.getState_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// static int java.awt.Frame.access$002(java.awt.Frame,int)

    /// protected java.lang.String java.awt.Frame.paramString()

    private static var paramString_MethodID_7: jmethodID?

    override open func paramString() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &Frame.paramString_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// private static native void java.awt.Frame.initIDs()

    /// java.lang.String java.awt.Frame.constructComponentName()

    /// public void java.awt.Frame.setCursor(int)

    private static var setCursor_MethodID_8: jmethodID?

    open func setCursor( cursorType: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cursorType, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCursor", methodSig: "(I)V", methodCache: &Frame.setCursor_MethodID_8, args: &__args, locals: &__locals )
    }

    open func setCursor( _ _cursorType: Int ) {
        setCursor( cursorType: _cursorType )
    }

    /// public java.lang.String java.awt.Frame.getTitle()

    private static var getTitle_MethodID_9: jmethodID?

    open func getTitle() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTitle", methodSig: "()Ljava/lang/String;", methodCache: &Frame.getTitle_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// public void java.awt.Frame.setTitle(java.lang.String)

    private static var setTitle_MethodID_10: jmethodID?

    open func setTitle( title: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: title, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTitle", methodSig: "(Ljava/lang/String;)V", methodCache: &Frame.setTitle_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setTitle( _ _title: String? ) {
        setTitle( title: _title )
    }

    /// public void java.awt.Frame.setBackground(java.awt.Color)

    private static var setBackground_MethodID_11: jmethodID?

    open func setBackground( bgColor: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: bgColor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &Frame.setBackground_MethodID_11, args: &__args, locals: &__locals )
    }

    override open func setBackground( _ _bgColor: Color? ) {
        setBackground( bgColor: _bgColor )
    }

    /// public javax.accessibility.AccessibleContext java.awt.Frame.getAccessibleContext()

    /// public boolean java.awt.Frame.isResizable()

    private static var isResizable_MethodID_12: jmethodID?

    open func isResizable() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isResizable", methodSig: "()Z", methodCache: &Frame.isResizable_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public void java.awt.Frame.setResizable(boolean)

    private static var setResizable_MethodID_13: jmethodID?

    open func setResizable( resizable: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: resizable, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setResizable", methodSig: "(Z)V", methodCache: &Frame.setResizable_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setResizable( _ _resizable: Bool ) {
        setResizable( resizable: _resizable )
    }

    /// public boolean java.awt.Frame.isUndecorated()

    private static var isUndecorated_MethodID_14: jmethodID?

    open func isUndecorated() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isUndecorated", methodSig: "()Z", methodCache: &Frame.isUndecorated_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }


    /// public void java.awt.Frame.setOpacity(float)

    private static var setOpacity_MethodID_15: jmethodID?

    open func setOpacity( opacity: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: opacity, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setOpacity", methodSig: "(F)V", methodCache: &Frame.setOpacity_MethodID_15, args: &__args, locals: &__locals )
    }

    override open func setOpacity( _ _opacity: Float ) {
        setOpacity( opacity: _opacity )
    }

    /// public void java.awt.Frame.setShape(java.awt.Shape)

    private static var setShape_MethodID_16: jmethodID?

    open func setShape( shape: Shape? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: shape, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setShape", methodSig: "(Ljava/awt/Shape;)V", methodCache: &Frame.setShape_MethodID_16, args: &__args, locals: &__locals )
    }

    override open func setShape( _ _shape: Shape? ) {
        setShape( shape: _shape )
    }

    /// public void java.awt.Frame.setIconImage(java.awt.Image)

    private static var setIconImage_MethodID_17: jmethodID?

    open func setIconImage( image: Image? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: image, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setIconImage", methodSig: "(Ljava/awt/Image;)V", methodCache: &Frame.setIconImage_MethodID_17, args: &__args, locals: &__locals )
    }

    override open func setIconImage( _ _image: Image? ) {
        setIconImage( image: _image )
    }

    /// public java.awt.Image java.awt.Frame.getIconImage()

    private static var getIconImage_MethodID_18: jmethodID?

    open func getIconImage() -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getIconImage", methodSig: "()Ljava/awt/Image;", methodCache: &Frame.getIconImage_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }


    /// public java.awt.MenuBar java.awt.Frame.getMenuBar()

    private static var getMenuBar_MethodID_19: jmethodID?

    open func getMenuBar() -> MenuBar! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMenuBar", methodSig: "()Ljava/awt/MenuBar;", methodCache: &Frame.getMenuBar_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MenuBar( javaObject: __return ) : nil
    }


    /// public void java.awt.Frame.setMenuBar(java.awt.MenuBar)

    private static var setMenuBar_MethodID_20: jmethodID?

    open func setMenuBar( mb: MenuBar? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: mb, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMenuBar", methodSig: "(Ljava/awt/MenuBar;)V", methodCache: &Frame.setMenuBar_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setMenuBar( _ _mb: MenuBar? ) {
        setMenuBar( mb: _mb )
    }

    /// public void java.awt.Frame.setExtendedState(int)

    private static var setExtendedState_MethodID_21: jmethodID?

    open func setExtendedState( state: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: state, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setExtendedState", methodSig: "(I)V", methodCache: &Frame.setExtendedState_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setExtendedState( _ _state: Int ) {
        setExtendedState( state: _state )
    }

    /// public void java.awt.Frame.setMaximizedBounds(java.awt.Rectangle)

    private static var setMaximizedBounds_MethodID_22: jmethodID?

    open func setMaximizedBounds( bounds: Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: bounds, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaximizedBounds", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &Frame.setMaximizedBounds_MethodID_22, args: &__args, locals: &__locals )
    }

    open func setMaximizedBounds( _ _bounds: Rectangle? ) {
        setMaximizedBounds( bounds: _bounds )
    }

    /// public java.awt.Rectangle java.awt.Frame.getMaximizedBounds()

    private static var getMaximizedBounds_MethodID_23: jmethodID?

    open func getMaximizedBounds() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMaximizedBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &Frame.getMaximizedBounds_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


    /// public int java.awt.Frame.getCursorType()

    private static var getCursorType_MethodID_24: jmethodID?

    open func getCursorType() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getCursorType", methodSig: "()I", methodCache: &Frame.getCursorType_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public synchronized void java.awt.Frame.setState(int)

    private static var setState_MethodID_25: jmethodID?

    open func setState( state: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: state, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setState", methodSig: "(I)V", methodCache: &Frame.setState_MethodID_25, args: &__args, locals: &__locals )
    }

    open func setState( _ _state: Int ) {
        setState( state: _state )
    }

    /// public void java.awt.Frame.addNotify()

    /// public void java.awt.Frame.removeNotify()

    /// void java.awt.Frame.postProcessKeyEvent(java.awt.event.KeyEvent)

    /// private boolean java.awt.Frame.isFrameStateSupported(int)

    /// public static java.awt.Frame[] java.awt.Frame.getFrames()

    private static var getFrames_MethodID_26: jmethodID?

    open class func getFrames() -> [Frame]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Frame", classCache: &FrameJNIClass, methodName: "getFrames", methodSig: "()[Ljava/awt/Frame;", methodCache: &getFrames_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Frame](), from: __return )
    }


    /// public void java.awt.Frame.setUndecorated(boolean)

    private static var setUndecorated_MethodID_27: jmethodID?

    open func setUndecorated( undecorated: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: undecorated, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUndecorated", methodSig: "(Z)V", methodCache: &Frame.setUndecorated_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setUndecorated( _ _undecorated: Bool ) {
        setUndecorated( undecorated: _undecorated )
    }

    /// public int java.awt.Frame.getExtendedState()

    private static var getExtendedState_MethodID_28: jmethodID?

    open func getExtendedState() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getExtendedState", methodSig: "()I", methodCache: &Frame.getExtendedState_MethodID_28, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// In declared protocol but not defined.. ///

    /// public abstract java.awt.Font java.awt.MenuContainer.getFont()

    /// public abstract boolean java.awt.MenuContainer.postEvent(java.awt.Event)

    private static var postEvent_MethodID_29: jmethodID?

    override open func postEvent( evt: Event? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "postEvent", methodSig: "(Ljava/awt/Event;)Z", methodCache: &Frame.postEvent_MethodID_29, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func postEvent( _ _evt: Event? ) -> Bool {
        return postEvent( evt: _evt )
    }

}

private typealias Frame_paint_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func Frame_paint_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> () {
    JNI.inNative = true;
    FrameLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).paint( arg0: arg0 != nil ? Graphics( javaObject: arg0 ) : nil )
    JNI.inNative = false;
}

fileprivate class FrameLocal_: JNIObjectProxy<Frame> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let Frame_paint_0_thunk: Frame_paint_0_type = Frame_paint_0
        natives.append( JNINativeMethod( name: strdup("__paint"), signature: strdup("(JLjava/awt/Graphics;)V"), fnPtr: unsafeBitCast( Frame_paint_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/java_awt/FrameProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

open class FrameBase: Frame {

    private static var FrameBaseJNIClass: jclass? = FrameLocal_.proxyClass()

    private lazy var __local: FrameLocal_? = FrameLocal_( owned: self, proto: self )

    override open func clearLocal() {
        __local = nil
    }

    open func inherit( _ parent: JNIObjectProtocol ) {
        parent.withJavaObject {
            self.javaObject = $0
            self.__local?.takeOwnership(javaObject: $0)
        }
    }

    /// public java.awt.Frame(java.lang.String,java.awt.GraphicsConfiguration)

    private static var new_MethodID_30: jmethodID?

    public convenience init( title: String?, gc: GraphicsConfiguration? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: title, locals: &__locals )
        __args[1] = JNIType.toJava( value: gc, locals: &__locals )

        self.init( javaObject: nil )
        __args[2] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/FrameProxy", classCache: &FrameBase.FrameBaseJNIClass, methodSig: "(Ljava/lang/String;Ljava/awt/GraphicsConfiguration;J)V", methodCache: &FrameBase.new_MethodID_30, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _title: String?, _ _gc: GraphicsConfiguration? ) {
        self.init( title: _title, gc: _gc )
    }

    /// public java.awt.Frame(java.lang.String) throws java.awt.HeadlessException

    private static var new_MethodID_31: jmethodID?

    public convenience init( title: String? ) throws {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: title, locals: &__locals )

        self.init( javaObject: nil )
        __args[1] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/FrameProxy", classCache: &FrameBase.FrameBaseJNIClass, methodSig: "(Ljava/lang/String;J)V", methodCache: &FrameBase.new_MethodID_31, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw HeadlessException( javaObject: throwable )
        }
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _title: String? ) throws {
        try self.init( title: _title )
    }

    /// public java.awt.Frame(java.awt.GraphicsConfiguration)

    private static var new_MethodID_32: jmethodID?

    public convenience init( gc: GraphicsConfiguration? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: gc, locals: &__locals )

        self.init( javaObject: nil )
        __args[1] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/FrameProxy", classCache: &FrameBase.FrameBaseJNIClass, methodSig: "(Ljava/awt/GraphicsConfiguration;J)V", methodCache: &FrameBase.new_MethodID_32, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _gc: GraphicsConfiguration? ) {
        self.init( gc: _gc )
    }

    /// public java.awt.Frame() throws java.awt.HeadlessException

    private static var new_MethodID_33: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/java_awt/FrameProxy", classCache: &FrameBase.FrameBaseJNIClass, methodSig: "(J)V", methodCache: &FrameBase.new_MethodID_33, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
