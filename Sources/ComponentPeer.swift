
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:42 GMT 2016 ///

/// interface java.awt.peer.ComponentPeer ///

public protocol ComponentPeer: JavaProtocol {

    /// public static final int java.awt.peer.ComponentPeer.SET_LOCATION

    static var SET_LOCATION: Int { get }

    /// public static final int java.awt.peer.ComponentPeer.SET_SIZE

    static var SET_SIZE: Int { get }

    /// public static final int java.awt.peer.ComponentPeer.SET_BOUNDS

    static var SET_BOUNDS: Int { get }

    /// public static final int java.awt.peer.ComponentPeer.SET_CLIENT_SIZE

    static var SET_CLIENT_SIZE: Int { get }

    /// public static final int java.awt.peer.ComponentPeer.RESET_OPERATION

    static var RESET_OPERATION: Int { get }

    /// public static final int java.awt.peer.ComponentPeer.NO_EMBEDDED_CHECK

    static var NO_EMBEDDED_CHECK: Int { get }

    /// public static final int java.awt.peer.ComponentPeer.DEFAULT_OPERATION

    static var DEFAULT_OPERATION: Int { get }

    /// public abstract void java.awt.peer.ComponentPeer.print(java.awt.Graphics)

    func print( arg0: Graphics? )
    func print( _ _arg0: Graphics? )

    /// public abstract void java.awt.peer.ComponentPeer.flip(int,int,int,int,java.awt.BufferCapabilities$FlipContents)

    func flip( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: BufferCapabilities_FlipContents? )
    func flip( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: BufferCapabilities_FlipContents? )

    /// public abstract void java.awt.peer.ComponentPeer.enable()

    func enable()

    /// public abstract void java.awt.peer.ComponentPeer.disable()

    func disable()

    /// public abstract java.awt.image.ColorModel java.awt.peer.ComponentPeer.getColorModel()

    func getColorModel() -> ColorModel!

    /// public abstract boolean java.awt.peer.ComponentPeer.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    func prepareImage( arg0: Image?, arg1: Int, arg2: Int, arg3: ImageObserver? ) -> Bool
    func prepareImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: ImageObserver? ) -> Bool

    /// public abstract int java.awt.peer.ComponentPeer.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    func checkImage( arg0: Image?, arg1: Int, arg2: Int, arg3: ImageObserver? ) -> Int
    func checkImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: ImageObserver? ) -> Int

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(java.awt.image.ImageProducer)

    func createImage( arg0: ImageProducer? ) -> Image!
    func createImage( _ _arg0: ImageProducer? ) -> Image!

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(int,int)

    func createImage( arg0: Int, arg1: Int ) -> Image!
    func createImage( _ _arg0: Int, _ _arg1: Int ) -> Image!

    /// public abstract java.awt.FontMetrics java.awt.peer.ComponentPeer.getFontMetrics(java.awt.Font)

    func getFontMetrics( arg0: Font? ) -> FontMetrics!
    func getFontMetrics( _ _arg0: Font? ) -> FontMetrics!

    /// public abstract java.awt.Rectangle java.awt.peer.ComponentPeer.getBounds()

    func getBounds() -> Rectangle!

    /// public abstract void java.awt.peer.ComponentPeer.dispose()

    func dispose()

    /// public abstract void java.awt.peer.ComponentPeer.coalescePaintEvent(java.awt.event.PaintEvent)

    func coalescePaintEvent( arg0: PaintEvent? )
    func coalescePaintEvent( _ _arg0: PaintEvent? )

    /// public abstract void java.awt.peer.ComponentPeer.setVisible(boolean)

    func setVisible( arg0: Bool )
    func setVisible( _ _arg0: Bool )

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getPreferredSize()

    func getPreferredSize() -> Dimension!

    /// public abstract void java.awt.peer.ComponentPeer.setBackground(java.awt.Color)

    func setBackground( arg0: Color? )
    func setBackground( _ _arg0: Color? )

    /// public abstract void java.awt.peer.ComponentPeer.setForeground(java.awt.Color)

    func setForeground( arg0: Color? )
    func setForeground( _ _arg0: Color? )

    /// public abstract void java.awt.peer.ComponentPeer.setFont(java.awt.Font)

    func setFont( arg0: Font? )
    func setFont( _ _arg0: Font? )

    /// public abstract void java.awt.peer.ComponentPeer.repaint(long,int,int,int,int)

    func repaint( arg0: Int64, arg1: Int, arg2: Int, arg3: Int, arg4: Int )
    func repaint( _ _arg0: Int64, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int )

    /// public abstract void java.awt.peer.ComponentPeer.paint(java.awt.Graphics)

    func paint( arg0: Graphics? )
    func paint( _ _arg0: Graphics? )

    /// public abstract boolean java.awt.peer.ComponentPeer.requestFocus(java.awt.Component,boolean,boolean,long,sun.awt.CausedFocusEvent$Cause)

    func requestFocus( arg0: Component?, arg1: Bool, arg2: Bool, arg3: Int64, arg4: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool
    func requestFocus( _ _arg0: Component?, _ _arg1: Bool, _ _arg2: Bool, _ _arg3: Int64, _ _arg4: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getMinimumSize()

    func getMinimumSize() -> Dimension!

    /// public abstract java.awt.Graphics java.awt.peer.ComponentPeer.getGraphics()

    func getGraphics() -> Graphics!

    /// public abstract void java.awt.peer.ComponentPeer.setEnabled(boolean)

    func setEnabled( arg0: Bool )
    func setEnabled( _ _arg0: Bool )

    /// public abstract void java.awt.peer.ComponentPeer.reshape(int,int,int,int)

    func reshape( arg0: Int, arg1: Int, arg2: Int, arg3: Int )
    func reshape( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int )

    /// public abstract void java.awt.peer.ComponentPeer.setBounds(int,int,int,int,int)

    func setBounds( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int )
    func setBounds( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int )

    /// public abstract void java.awt.peer.ComponentPeer.layout()

    func layout()

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.preferredSize()

    func preferredSize() -> Dimension!

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.minimumSize()

    func minimumSize() -> Dimension!

    /// public abstract java.awt.GraphicsConfiguration java.awt.peer.ComponentPeer.getGraphicsConfiguration()

    func getGraphicsConfiguration() -> GraphicsConfiguration!

    /// public abstract void java.awt.peer.ComponentPeer.updateCursorImmediately()

    func updateCursorImmediately()

    /// public abstract boolean java.awt.peer.ComponentPeer.isFocusable()

    func isFocusable() -> Bool

    /// public abstract boolean java.awt.peer.ComponentPeer.isReparentSupported()

    func isReparentSupported() -> Bool

    /// public abstract void java.awt.peer.ComponentPeer.reparent(java.awt.peer.ContainerPeer)

    func reparent( arg0: ContainerPeer? )
    func reparent( _ _arg0: ContainerPeer? )

    /// public abstract void java.awt.peer.ComponentPeer.handleEvent(java.awt.AWTEvent)

    func handleEvent( arg0: AWTEvent? )
    func handleEvent( _ _arg0: AWTEvent? )

    /// public abstract java.awt.Toolkit java.awt.peer.ComponentPeer.getToolkit()

    func getToolkit() -> Toolkit!

    /// public abstract void java.awt.peer.ComponentPeer.show()

    func show()

    /// public abstract void java.awt.peer.ComponentPeer.hide()

    func hide()

    /// public abstract java.awt.Point java.awt.peer.ComponentPeer.getLocationOnScreen()

    func getLocationOnScreen() -> Point!

    /// public abstract java.awt.image.VolatileImage java.awt.peer.ComponentPeer.createVolatileImage(int,int)

    func createVolatileImage( arg0: Int, arg1: Int ) -> VolatileImage!
    func createVolatileImage( _ _arg0: Int, _ _arg1: Int ) -> VolatileImage!

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.getBackBuffer()

    func getBackBuffer() -> Image!

    /// public abstract boolean java.awt.peer.ComponentPeer.handlesWheelScrolling()

    func handlesWheelScrolling() -> Bool

    /// public abstract void java.awt.peer.ComponentPeer.destroyBuffers()

    func destroyBuffers()

    /// public abstract void java.awt.peer.ComponentPeer.applyShape(sun.java2d.pipe.Region)

    func applyShape( arg0: /* sun.java2d.pipe.Region */ UnclassedObject? )
    func applyShape( _ _arg0: /* sun.java2d.pipe.Region */ UnclassedObject? )

    /// public abstract boolean java.awt.peer.ComponentPeer.isObscured()

    func isObscured() -> Bool

    /// public abstract boolean java.awt.peer.ComponentPeer.canDetermineObscurity()

    func canDetermineObscurity() -> Bool

    /// public abstract void java.awt.peer.ComponentPeer.createBuffers(int,java.awt.BufferCapabilities) throws java.awt.AWTException

    func createBuffers( arg0: Int, arg1: BufferCapabilities? ) throws /* java.awt.AWTException */
    func createBuffers( _ _arg0: Int, _ _arg1: BufferCapabilities? ) throws /* java.awt.AWTException */

}

open class ComponentPeerForward: JNIObjectForward, ComponentPeer {

    private static var ComponentPeerJNIClass: jclass?

    /// public static final int java.awt.peer.ComponentPeer.SET_LOCATION

    private static var SET_LOCATION_FieldID: jfieldID?

    open static var SET_LOCATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SET_LOCATION", fieldType: "I", fieldCache: &SET_LOCATION_FieldID, className: "java/awt/peer/ComponentPeer", classCache: &ComponentPeerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.peer.ComponentPeer.SET_SIZE

    private static var SET_SIZE_FieldID: jfieldID?

    open static var SET_SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SET_SIZE", fieldType: "I", fieldCache: &SET_SIZE_FieldID, className: "java/awt/peer/ComponentPeer", classCache: &ComponentPeerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.peer.ComponentPeer.SET_BOUNDS

    private static var SET_BOUNDS_FieldID: jfieldID?

    open static var SET_BOUNDS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SET_BOUNDS", fieldType: "I", fieldCache: &SET_BOUNDS_FieldID, className: "java/awt/peer/ComponentPeer", classCache: &ComponentPeerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.peer.ComponentPeer.SET_CLIENT_SIZE

    private static var SET_CLIENT_SIZE_FieldID: jfieldID?

    open static var SET_CLIENT_SIZE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SET_CLIENT_SIZE", fieldType: "I", fieldCache: &SET_CLIENT_SIZE_FieldID, className: "java/awt/peer/ComponentPeer", classCache: &ComponentPeerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.peer.ComponentPeer.RESET_OPERATION

    private static var RESET_OPERATION_FieldID: jfieldID?

    open static var RESET_OPERATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "RESET_OPERATION", fieldType: "I", fieldCache: &RESET_OPERATION_FieldID, className: "java/awt/peer/ComponentPeer", classCache: &ComponentPeerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.peer.ComponentPeer.NO_EMBEDDED_CHECK

    private static var NO_EMBEDDED_CHECK_FieldID: jfieldID?

    open static var NO_EMBEDDED_CHECK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "NO_EMBEDDED_CHECK", fieldType: "I", fieldCache: &NO_EMBEDDED_CHECK_FieldID, className: "java/awt/peer/ComponentPeer", classCache: &ComponentPeerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.peer.ComponentPeer.DEFAULT_OPERATION

    private static var DEFAULT_OPERATION_FieldID: jfieldID?

    open static var DEFAULT_OPERATION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT_OPERATION", fieldType: "I", fieldCache: &DEFAULT_OPERATION_FieldID, className: "java/awt/peer/ComponentPeer", classCache: &ComponentPeerJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public abstract void java.awt.peer.ComponentPeer.print(java.awt.Graphics)

    private static var print_MethodID_48: jmethodID?

    open func print( arg0: Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "print", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &ComponentPeerForward.print_MethodID_48, args: &__args, locals: &__locals )
    }

    open func print( _ _arg0: Graphics? ) {
        print( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.flip(int,int,int,int,java.awt.BufferCapabilities$FlipContents)

    private static var flip_MethodID_49: jmethodID?

    open func flip( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: BufferCapabilities_FlipContents? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "flip", methodSig: "(IIIILjava/awt/BufferCapabilities$FlipContents;)V", methodCache: &ComponentPeerForward.flip_MethodID_49, args: &__args, locals: &__locals )
    }

    open func flip( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: BufferCapabilities_FlipContents? ) {
        flip( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.enable()

    private static var enable_MethodID_50: jmethodID?

    open func enable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "enable", methodSig: "()V", methodCache: &ComponentPeerForward.enable_MethodID_50, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.disable()

    private static var disable_MethodID_51: jmethodID?

    open func disable() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "disable", methodSig: "()V", methodCache: &ComponentPeerForward.disable_MethodID_51, args: &__args, locals: &__locals )
    }


    /// public abstract java.awt.image.ColorModel java.awt.peer.ComponentPeer.getColorModel()

    private static var getColorModel_MethodID_52: jmethodID?

    open func getColorModel() -> ColorModel! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColorModel", methodSig: "()Ljava/awt/image/ColorModel;", methodCache: &ComponentPeerForward.getColorModel_MethodID_52, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ColorModel( javaObject: __return ) : nil
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.prepareImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    private static var prepareImage_MethodID_53: jmethodID?

    open func prepareImage( arg0: Image?, arg1: Int, arg2: Int, arg3: ImageObserver? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "prepareImage", methodSig: "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z", methodCache: &ComponentPeerForward.prepareImage_MethodID_53, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func prepareImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: ImageObserver? ) -> Bool {
        return prepareImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract int java.awt.peer.ComponentPeer.checkImage(java.awt.Image,int,int,java.awt.image.ImageObserver)

    private static var checkImage_MethodID_54: jmethodID?

    open func checkImage( arg0: Image?, arg1: Int, arg2: Int, arg3: ImageObserver? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "checkImage", methodSig: "(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)I", methodCache: &ComponentPeerForward.checkImage_MethodID_54, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func checkImage( _ _arg0: Image?, _ _arg1: Int, _ _arg2: Int, _ _arg3: ImageObserver? ) -> Int {
        return checkImage( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(java.awt.image.ImageProducer)

    private static var createImage_MethodID_55: jmethodID?

    open func createImage( arg0: ImageProducer? ) -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createImage", methodSig: "(Ljava/awt/image/ImageProducer;)Ljava/awt/Image;", methodCache: &ComponentPeerForward.createImage_MethodID_55, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    open func createImage( _ _arg0: ImageProducer? ) -> Image! {
        return createImage( arg0: _arg0 )
    }

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.createImage(int,int)

    private static var createImage_MethodID_56: jmethodID?

    open func createImage( arg0: Int, arg1: Int ) -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createImage", methodSig: "(II)Ljava/awt/Image;", methodCache: &ComponentPeerForward.createImage_MethodID_56, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }

    open func createImage( _ _arg0: Int, _ _arg1: Int ) -> Image! {
        return createImage( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.awt.FontMetrics java.awt.peer.ComponentPeer.getFontMetrics(java.awt.Font)

    private static var getFontMetrics_MethodID_57: jmethodID?

    open func getFontMetrics( arg0: Font? ) -> FontMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", methodCache: &ComponentPeerForward.getFontMetrics_MethodID_57, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FontMetrics( javaObject: __return ) : nil
    }

    open func getFontMetrics( _ _arg0: Font? ) -> FontMetrics! {
        return getFontMetrics( arg0: _arg0 )
    }

    /// public abstract java.awt.Rectangle java.awt.peer.ComponentPeer.getBounds()

    private static var getBounds_MethodID_58: jmethodID?

    open func getBounds() -> Rectangle! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &ComponentPeerForward.getBounds_MethodID_58, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Rectangle( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.dispose()

    private static var dispose_MethodID_59: jmethodID?

    open func dispose() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "dispose", methodSig: "()V", methodCache: &ComponentPeerForward.dispose_MethodID_59, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.coalescePaintEvent(java.awt.event.PaintEvent)

    private static var coalescePaintEvent_MethodID_60: jmethodID?

    open func coalescePaintEvent( arg0: PaintEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "coalescePaintEvent", methodSig: "(Ljava/awt/event/PaintEvent;)V", methodCache: &ComponentPeerForward.coalescePaintEvent_MethodID_60, args: &__args, locals: &__locals )
    }

    open func coalescePaintEvent( _ _arg0: PaintEvent? ) {
        coalescePaintEvent( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setVisible(boolean)

    private static var setVisible_MethodID_61: jmethodID?

    open func setVisible( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &ComponentPeerForward.setVisible_MethodID_61, args: &__args, locals: &__locals )
    }

    open func setVisible( _ _arg0: Bool ) {
        setVisible( arg0: _arg0 )
    }

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getPreferredSize()

    private static var getPreferredSize_MethodID_62: jmethodID?

    open func getPreferredSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &ComponentPeerForward.getPreferredSize_MethodID_62, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.setBackground(java.awt.Color)

    private static var setBackground_MethodID_63: jmethodID?

    open func setBackground( arg0: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &ComponentPeerForward.setBackground_MethodID_63, args: &__args, locals: &__locals )
    }

    open func setBackground( _ _arg0: Color? ) {
        setBackground( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setForeground(java.awt.Color)

    private static var setForeground_MethodID_64: jmethodID?

    open func setForeground( arg0: Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setForeground", methodSig: "(Ljava/awt/Color;)V", methodCache: &ComponentPeerForward.setForeground_MethodID_64, args: &__args, locals: &__locals )
    }

    open func setForeground( _ _arg0: Color? ) {
        setForeground( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setFont(java.awt.Font)

    private static var setFont_MethodID_65: jmethodID?

    open func setFont( arg0: Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &ComponentPeerForward.setFont_MethodID_65, args: &__args, locals: &__locals )
    }

    open func setFont( _ _arg0: Font? ) {
        setFont( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.repaint(long,int,int,int,int)

    private static var repaint_MethodID_66: jmethodID?

    open func repaint( arg0: Int64, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "repaint", methodSig: "(JIIII)V", methodCache: &ComponentPeerForward.repaint_MethodID_66, args: &__args, locals: &__locals )
    }

    open func repaint( _ _arg0: Int64, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        repaint( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.paint(java.awt.Graphics)

    private static var paint_MethodID_67: jmethodID?

    open func paint( arg0: Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &ComponentPeerForward.paint_MethodID_67, args: &__args, locals: &__locals )
    }

    open func paint( _ _arg0: Graphics? ) {
        paint( arg0: _arg0 )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.requestFocus(java.awt.Component,boolean,boolean,long,sun.awt.CausedFocusEvent$Cause)

    private static var requestFocus_MethodID_68: jmethodID?

    open func requestFocus( arg0: Component?, arg1: Bool, arg2: Bool, arg3: Int64, arg4: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestFocus", methodSig: "(Ljava/awt/Component;ZZJLsun/awt/CausedFocusEvent$Cause;)Z", methodCache: &ComponentPeerForward.requestFocus_MethodID_68, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func requestFocus( _ _arg0: Component?, _ _arg1: Bool, _ _arg2: Bool, _ _arg3: Int64, _ _arg4: /* sun.awt.CausedFocusEvent$Cause */ UnclassedObject? ) -> Bool {
        return requestFocus( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.getMinimumSize()

    private static var getMinimumSize_MethodID_69: jmethodID?

    open func getMinimumSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMinimumSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &ComponentPeerForward.getMinimumSize_MethodID_69, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Graphics java.awt.peer.ComponentPeer.getGraphics()

    private static var getGraphics_MethodID_70: jmethodID?

    open func getGraphics() -> Graphics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphics", methodSig: "()Ljava/awt/Graphics;", methodCache: &ComponentPeerForward.getGraphics_MethodID_70, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Graphics( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.setEnabled(boolean)

    private static var setEnabled_MethodID_71: jmethodID?

    open func setEnabled( arg0: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &ComponentPeerForward.setEnabled_MethodID_71, args: &__args, locals: &__locals )
    }

    open func setEnabled( _ _arg0: Bool ) {
        setEnabled( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.reshape(int,int,int,int)

    private static var reshape_MethodID_72: jmethodID?

    open func reshape( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reshape", methodSig: "(IIII)V", methodCache: &ComponentPeerForward.reshape_MethodID_72, args: &__args, locals: &__locals )
    }

    open func reshape( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        reshape( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.setBounds(int,int,int,int,int)

    private static var setBounds_MethodID_73: jmethodID?

    open func setBounds( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBounds", methodSig: "(IIIII)V", methodCache: &ComponentPeerForward.setBounds_MethodID_73, args: &__args, locals: &__locals )
    }

    open func setBounds( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int ) {
        setBounds( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.layout()

    private static var layout_MethodID_74: jmethodID?

    open func layout() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layout", methodSig: "()V", methodCache: &ComponentPeerForward.layout_MethodID_74, args: &__args, locals: &__locals )
    }


    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.preferredSize()

    private static var preferredSize_MethodID_75: jmethodID?

    open func preferredSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "preferredSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &ComponentPeerForward.preferredSize_MethodID_75, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract java.awt.Dimension java.awt.peer.ComponentPeer.minimumSize()

    private static var minimumSize_MethodID_76: jmethodID?

    open func minimumSize() -> Dimension! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "minimumSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &ComponentPeerForward.minimumSize_MethodID_76, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Dimension( javaObject: __return ) : nil
    }


    /// public abstract java.awt.GraphicsConfiguration java.awt.peer.ComponentPeer.getGraphicsConfiguration()

    private static var getGraphicsConfiguration_MethodID_77: jmethodID?

    open func getGraphicsConfiguration() -> GraphicsConfiguration! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGraphicsConfiguration", methodSig: "()Ljava/awt/GraphicsConfiguration;", methodCache: &ComponentPeerForward.getGraphicsConfiguration_MethodID_77, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GraphicsConfiguration( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.updateCursorImmediately()

    private static var updateCursorImmediately_MethodID_78: jmethodID?

    open func updateCursorImmediately() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateCursorImmediately", methodSig: "()V", methodCache: &ComponentPeerForward.updateCursorImmediately_MethodID_78, args: &__args, locals: &__locals )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.isFocusable()

    private static var isFocusable_MethodID_79: jmethodID?

    open func isFocusable() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusable", methodSig: "()Z", methodCache: &ComponentPeerForward.isFocusable_MethodID_79, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.isReparentSupported()

    private static var isReparentSupported_MethodID_80: jmethodID?

    open func isReparentSupported() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isReparentSupported", methodSig: "()Z", methodCache: &ComponentPeerForward.isReparentSupported_MethodID_80, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.reparent(java.awt.peer.ContainerPeer)

    private static var reparent_MethodID_81: jmethodID?

    open func reparent( arg0: ContainerPeer? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reparent", methodSig: "(Ljava/awt/peer/ContainerPeer;)V", methodCache: &ComponentPeerForward.reparent_MethodID_81, args: &__args, locals: &__locals )
    }

    open func reparent( _ _arg0: ContainerPeer? ) {
        reparent( arg0: _arg0 )
    }

    /// public abstract void java.awt.peer.ComponentPeer.handleEvent(java.awt.AWTEvent)

    private static var handleEvent_MethodID_82: jmethodID?

    open func handleEvent( arg0: AWTEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "handleEvent", methodSig: "(Ljava/awt/AWTEvent;)V", methodCache: &ComponentPeerForward.handleEvent_MethodID_82, args: &__args, locals: &__locals )
    }

    open func handleEvent( _ _arg0: AWTEvent? ) {
        handleEvent( arg0: _arg0 )
    }

    /// public abstract java.awt.Toolkit java.awt.peer.ComponentPeer.getToolkit()

    private static var getToolkit_MethodID_83: jmethodID?

    open func getToolkit() -> Toolkit! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getToolkit", methodSig: "()Ljava/awt/Toolkit;", methodCache: &ComponentPeerForward.getToolkit_MethodID_83, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Toolkit( javaObject: __return ) : nil
    }


    /// public abstract void java.awt.peer.ComponentPeer.show()

    private static var show_MethodID_84: jmethodID?

    open func show() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "show", methodSig: "()V", methodCache: &ComponentPeerForward.show_MethodID_84, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.hide()

    private static var hide_MethodID_85: jmethodID?

    open func hide() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "hide", methodSig: "()V", methodCache: &ComponentPeerForward.hide_MethodID_85, args: &__args, locals: &__locals )
    }


    /// public abstract java.awt.Point java.awt.peer.ComponentPeer.getLocationOnScreen()

    private static var getLocationOnScreen_MethodID_86: jmethodID?

    open func getLocationOnScreen() -> Point! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocationOnScreen", methodSig: "()Ljava/awt/Point;", methodCache: &ComponentPeerForward.getLocationOnScreen_MethodID_86, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Point( javaObject: __return ) : nil
    }


    /// public abstract java.awt.image.VolatileImage java.awt.peer.ComponentPeer.createVolatileImage(int,int)

    private static var createVolatileImage_MethodID_87: jmethodID?

    open func createVolatileImage( arg0: Int, arg1: Int ) -> VolatileImage! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createVolatileImage", methodSig: "(II)Ljava/awt/image/VolatileImage;", methodCache: &ComponentPeerForward.createVolatileImage_MethodID_87, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? VolatileImage( javaObject: __return ) : nil
    }

    open func createVolatileImage( _ _arg0: Int, _ _arg1: Int ) -> VolatileImage! {
        return createVolatileImage( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.awt.Image java.awt.peer.ComponentPeer.getBackBuffer()

    private static var getBackBuffer_MethodID_88: jmethodID?

    open func getBackBuffer() -> Image! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBackBuffer", methodSig: "()Ljava/awt/Image;", methodCache: &ComponentPeerForward.getBackBuffer_MethodID_88, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Image( javaObject: __return ) : nil
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.handlesWheelScrolling()

    private static var handlesWheelScrolling_MethodID_89: jmethodID?

    open func handlesWheelScrolling() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "handlesWheelScrolling", methodSig: "()Z", methodCache: &ComponentPeerForward.handlesWheelScrolling_MethodID_89, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.destroyBuffers()

    private static var destroyBuffers_MethodID_90: jmethodID?

    open func destroyBuffers() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "destroyBuffers", methodSig: "()V", methodCache: &ComponentPeerForward.destroyBuffers_MethodID_90, args: &__args, locals: &__locals )
    }


    /// public abstract void java.awt.peer.ComponentPeer.applyShape(sun.java2d.pipe.Region)

    private static var applyShape_MethodID_91: jmethodID?

    open func applyShape( arg0: /* sun.java2d.pipe.Region */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applyShape", methodSig: "(Lsun/java2d/pipe/Region;)V", methodCache: &ComponentPeerForward.applyShape_MethodID_91, args: &__args, locals: &__locals )
    }

    open func applyShape( _ _arg0: /* sun.java2d.pipe.Region */ UnclassedObject? ) {
        applyShape( arg0: _arg0 )
    }

    /// public abstract boolean java.awt.peer.ComponentPeer.isObscured()

    private static var isObscured_MethodID_92: jmethodID?

    open func isObscured() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isObscured", methodSig: "()Z", methodCache: &ComponentPeerForward.isObscured_MethodID_92, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract boolean java.awt.peer.ComponentPeer.canDetermineObscurity()

    private static var canDetermineObscurity_MethodID_93: jmethodID?

    open func canDetermineObscurity() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "canDetermineObscurity", methodSig: "()Z", methodCache: &ComponentPeerForward.canDetermineObscurity_MethodID_93, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract void java.awt.peer.ComponentPeer.createBuffers(int,java.awt.BufferCapabilities) throws java.awt.AWTException

    private static var createBuffers_MethodID_94: jmethodID?

    open func createBuffers( arg0: Int, arg1: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createBuffers", methodSig: "(ILjava/awt/BufferCapabilities;)V", methodCache: &ComponentPeerForward.createBuffers_MethodID_94, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw AWTException( javaObject: throwable )
        }
    }

    open func createBuffers( _ _arg0: Int, _ _arg1: BufferCapabilities? ) throws /* java.awt.AWTException */ {
        try createBuffers( arg0: _arg0, arg1: _arg1 )
    }

}


