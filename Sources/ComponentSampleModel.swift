
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:31 GMT 2016 ///

/// class java.awt.image.ComponentSampleModel ///

open class ComponentSampleModel: SampleModel {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.image.ComponentSampleModel", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ComponentSampleModelJNIClass: jclass?

    /// protected int[] java.awt.image.ComponentSampleModel.bandOffsets

    private static var bandOffsets_FieldID: jfieldID?

    open var bandOffsets: [Int32]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "bandOffsets", fieldType: "[I", fieldCache: &ComponentSampleModel.bandOffsets_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int32](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "bandOffsets", fieldType: "[I", fieldCache: &ComponentSampleModel.bandOffsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int[] java.awt.image.ComponentSampleModel.bankIndices

    private static var bankIndices_FieldID: jfieldID?

    open var bankIndices: [Int32]! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "bankIndices", fieldType: "[I", fieldCache: &ComponentSampleModel.bankIndices_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: [Int32](), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "bankIndices", fieldType: "[I", fieldCache: &ComponentSampleModel.bankIndices_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int java.awt.image.ComponentSampleModel.numBands

    private static var numBands_FieldID: jfieldID?

    override open var numBands: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &ComponentSampleModel.numBands_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numBands", fieldType: "I", fieldCache: &ComponentSampleModel.numBands_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.ComponentSampleModel.numBanks

    private static var numBanks_FieldID: jfieldID?

    open var numBanks: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "numBanks", fieldType: "I", fieldCache: &ComponentSampleModel.numBanks_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "numBanks", fieldType: "I", fieldCache: &ComponentSampleModel.numBanks_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.ComponentSampleModel.scanlineStride

    private static var scanlineStride_FieldID: jfieldID?

    open var scanlineStride: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "scanlineStride", fieldType: "I", fieldCache: &ComponentSampleModel.scanlineStride_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "scanlineStride", fieldType: "I", fieldCache: &ComponentSampleModel.scanlineStride_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.ComponentSampleModel.pixelStride

    private static var pixelStride_FieldID: jfieldID?

    open var pixelStride: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "pixelStride", fieldType: "I", fieldCache: &ComponentSampleModel.pixelStride_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "pixelStride", fieldType: "I", fieldCache: &ComponentSampleModel.pixelStride_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.SampleModel.width

    private static var width_FieldID: jfieldID?

    override open var width: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "width", fieldType: "I", fieldCache: &ComponentSampleModel.width_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "width", fieldType: "I", fieldCache: &ComponentSampleModel.width_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.SampleModel.height

    private static var height_FieldID: jfieldID?

    override open var height: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "height", fieldType: "I", fieldCache: &ComponentSampleModel.height_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "height", fieldType: "I", fieldCache: &ComponentSampleModel.height_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int java.awt.image.SampleModel.numBands

    /// protected int java.awt.image.SampleModel.dataType

    private static var dataType_FieldID: jfieldID?

    override open var dataType: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "dataType", fieldType: "I", fieldCache: &ComponentSampleModel.dataType_FieldID, object: javaObject, locals: &__locals )
            return JNIType.decode( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.encode( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "dataType", fieldType: "I", fieldCache: &ComponentSampleModel.dataType_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public java.awt.image.ComponentSampleModel(int,int,int,int,int,int[],int[])

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]?, arg6: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/ComponentSampleModel", classCache: &ComponentSampleModel.ComponentSampleModelJNIClass, methodSig: "(IIIII[I[I)V", methodCache: &ComponentSampleModel.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]?, _ _arg6: [Int32]? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public java.awt.image.ComponentSampleModel(int,int,int,int,int,int[])

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: [Int32]? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/image/ComponentSampleModel", classCache: &ComponentSampleModel.ComponentSampleModelJNIClass, methodSig: "(IIIII[I)V", methodCache: &ComponentSampleModel.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: [Int32]? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public boolean java.awt.image.ComponentSampleModel.equals(java.lang.Object)

    /// public int java.awt.image.ComponentSampleModel.hashCode()

    /// public int java.awt.image.ComponentSampleModel.getOffset(int,int)

    private static var getOffset_MethodID_3: jmethodID?

    open func getOffset( arg0: Int, arg1: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getOffset", methodSig: "(II)I", methodCache: &ComponentSampleModel.getOffset_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getOffset( _ _arg0: Int, _ _arg1: Int ) -> Int {
        return getOffset( arg0: _arg0, arg1: _arg1 )
    }

    /// public int java.awt.image.ComponentSampleModel.getOffset(int,int,int)

    private static var getOffset_MethodID_4: jmethodID?

    open func getOffset( arg0: Int, arg1: Int, arg2: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getOffset", methodSig: "(III)I", methodCache: &ComponentSampleModel.getOffset_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getOffset( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) -> Int {
        return getOffset( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private static native void java.awt.image.ComponentSampleModel.initIDs()

    /// public java.lang.Object java.awt.image.ComponentSampleModel.getDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)

    /// public java.awt.image.SampleModel java.awt.image.ComponentSampleModel.createCompatibleSampleModel(int,int)

    /// public final int java.awt.image.ComponentSampleModel.getNumDataElements()

    /// public int[] java.awt.image.ComponentSampleModel.getPixel(int,int,int[],java.awt.image.DataBuffer)

    /// public int[] java.awt.image.ComponentSampleModel.getPixels(int,int,int,int,int[],java.awt.image.DataBuffer)

    /// public int java.awt.image.ComponentSampleModel.getSample(int,int,int,java.awt.image.DataBuffer)

    /// public float java.awt.image.ComponentSampleModel.getSampleFloat(int,int,int,java.awt.image.DataBuffer)

    /// public double java.awt.image.ComponentSampleModel.getSampleDouble(int,int,int,java.awt.image.DataBuffer)

    /// public int[] java.awt.image.ComponentSampleModel.getSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)

    /// public final int java.awt.image.ComponentSampleModel.getSampleSize(int)

    /// public final int[] java.awt.image.ComponentSampleModel.getSampleSize()

    /// public java.awt.image.DataBuffer java.awt.image.ComponentSampleModel.createDataBuffer()

    /// public java.awt.image.SampleModel java.awt.image.ComponentSampleModel.createSubsetSampleModel(int[])

    /// public void java.awt.image.ComponentSampleModel.setDataElements(int,int,java.lang.Object,java.awt.image.DataBuffer)

    /// public void java.awt.image.ComponentSampleModel.setPixel(int,int,int[],java.awt.image.DataBuffer)

    /// public void java.awt.image.ComponentSampleModel.setPixels(int,int,int,int,int[],java.awt.image.DataBuffer)

    /// public void java.awt.image.ComponentSampleModel.setSample(int,int,int,float,java.awt.image.DataBuffer)

    /// public void java.awt.image.ComponentSampleModel.setSample(int,int,int,int,java.awt.image.DataBuffer)

    /// public void java.awt.image.ComponentSampleModel.setSample(int,int,int,double,java.awt.image.DataBuffer)

    /// public void java.awt.image.ComponentSampleModel.setSamples(int,int,int,int,int,int[],java.awt.image.DataBuffer)

    /// public final int java.awt.image.ComponentSampleModel.getScanlineStride()

    private static var getScanlineStride_MethodID_5: jmethodID?

    open func getScanlineStride() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getScanlineStride", methodSig: "()I", methodCache: &ComponentSampleModel.getScanlineStride_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final int java.awt.image.ComponentSampleModel.getPixelStride()

    private static var getPixelStride_MethodID_6: jmethodID?

    open func getPixelStride() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getPixelStride", methodSig: "()I", methodCache: &ComponentSampleModel.getPixelStride_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public final int[] java.awt.image.ComponentSampleModel.getBandOffsets()

    private static var getBandOffsets_MethodID_7: jmethodID?

    open func getBandOffsets() -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBandOffsets", methodSig: "()[I", methodCache: &ComponentSampleModel.getBandOffsets_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }


    /// int[] java.awt.image.ComponentSampleModel.orderBands(int[],int)

    /// private long java.awt.image.ComponentSampleModel.getBufferSize()

    /// public final int[] java.awt.image.ComponentSampleModel.getBankIndices()

    private static var getBankIndices_MethodID_8: jmethodID?

    open func getBankIndices() -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBankIndices", methodSig: "()[I", methodCache: &ComponentSampleModel.getBankIndices_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Int32](), from: __return )
    }


}
