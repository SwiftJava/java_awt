
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// interface java.awt.event.AdjustmentListener ///

public protocol AdjustmentListener: java_util.EventListener {

    /// public abstract void java.awt.event.AdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent)

    func adjustmentValueChanged( arg0: AdjustmentEvent? )
    func adjustmentValueChanged( _ _arg0: AdjustmentEvent? )

}

open class AdjustmentListenerForward: java_util.EventListenerForward, AdjustmentListener {

    private static var AdjustmentListenerJNIClass: jclass?

    /// public abstract void java.awt.event.AdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent)

    private static var adjustmentValueChanged_MethodID_2: jmethodID?

    open func adjustmentValueChanged( arg0: AdjustmentEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "adjustmentValueChanged", methodSig: "(Ljava/awt/event/AdjustmentEvent;)V", methodCache: &AdjustmentListenerForward.adjustmentValueChanged_MethodID_2, args: &__args, locals: &__locals )
    }

    open func adjustmentValueChanged( _ _arg0: AdjustmentEvent? ) {
        adjustmentValueChanged( arg0: _arg0 )
    }

}


private typealias AdjustmentListener_adjustmentValueChanged_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func AdjustmentListener_adjustmentValueChanged_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    AdjustmentListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).adjustmentValueChanged( arg0 != nil ? AdjustmentEvent( javaObject: arg0 ) : nil )
}

open class AdjustmentListenerBase: JNIObjectProxy, AdjustmentListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let AdjustmentListener_adjustmentValueChanged_0_thunk: AdjustmentListener_adjustmentValueChanged_0_type = AdjustmentListener_adjustmentValueChanged_0
            natives.append( JNINativeMethod( name: strdup("__adjustmentValueChanged"), signature: strdup("(Ljava/awt/event/AdjustmentEvent;)V"), fnPtr: unsafeBitCast( AdjustmentListener_adjustmentValueChanged_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/AdjustmentListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        AdjustmentListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/AdjustmentListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> AdjustmentListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: AdjustmentListenerBase.self )
    }

    /// public abstract void java.awt.event.AdjustmentListener.adjustmentValueChanged(java.awt.event.AdjustmentEvent)

    open func adjustmentValueChanged( arg0: AdjustmentEvent? ) /**/ {
    }

    open func adjustmentValueChanged( _ _arg0: AdjustmentEvent? ) /**/ {
        adjustmentValueChanged( arg0: _arg0 )
    }

}
