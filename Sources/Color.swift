
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:51 GMT 2016 ///

/// class java.awt.Color ///

open class Color: java_lang.JavaObject, Paint, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.Color", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ColorJNIClass: jclass?

    /// public static final java.awt.Color java.awt.Color.white

    private static var white_FieldID: jfieldID?

    open static var white: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "white", fieldType: "Ljava/awt/Color;", fieldCache: &white_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.WHITE

    private static var WHITE_FieldID: jfieldID?

    open static var WHITE: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "WHITE", fieldType: "Ljava/awt/Color;", fieldCache: &WHITE_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.lightGray

    private static var lightGray_FieldID: jfieldID?

    open static var lightGray: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "lightGray", fieldType: "Ljava/awt/Color;", fieldCache: &lightGray_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.LIGHT_GRAY

    private static var LIGHT_GRAY_FieldID: jfieldID?

    open static var LIGHT_GRAY: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LIGHT_GRAY", fieldType: "Ljava/awt/Color;", fieldCache: &LIGHT_GRAY_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.gray

    private static var gray_FieldID: jfieldID?

    open static var gray: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "gray", fieldType: "Ljava/awt/Color;", fieldCache: &gray_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.GRAY

    private static var GRAY_FieldID: jfieldID?

    open static var GRAY: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "GRAY", fieldType: "Ljava/awt/Color;", fieldCache: &GRAY_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.darkGray

    private static var darkGray_FieldID: jfieldID?

    open static var darkGray: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "darkGray", fieldType: "Ljava/awt/Color;", fieldCache: &darkGray_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.DARK_GRAY

    private static var DARK_GRAY_FieldID: jfieldID?

    open static var DARK_GRAY: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DARK_GRAY", fieldType: "Ljava/awt/Color;", fieldCache: &DARK_GRAY_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.black

    private static var black_FieldID: jfieldID?

    open static var black: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "black", fieldType: "Ljava/awt/Color;", fieldCache: &black_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.BLACK

    private static var BLACK_FieldID: jfieldID?

    open static var BLACK: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "BLACK", fieldType: "Ljava/awt/Color;", fieldCache: &BLACK_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.red

    private static var red_FieldID: jfieldID?

    open static var red: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "red", fieldType: "Ljava/awt/Color;", fieldCache: &red_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.RED

    private static var RED_FieldID: jfieldID?

    open static var RED: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "RED", fieldType: "Ljava/awt/Color;", fieldCache: &RED_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.pink

    private static var pink_FieldID: jfieldID?

    open static var pink: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "pink", fieldType: "Ljava/awt/Color;", fieldCache: &pink_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.PINK

    private static var PINK_FieldID: jfieldID?

    open static var PINK: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "PINK", fieldType: "Ljava/awt/Color;", fieldCache: &PINK_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.orange

    private static var orange_FieldID: jfieldID?

    open static var orange: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "orange", fieldType: "Ljava/awt/Color;", fieldCache: &orange_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.ORANGE

    private static var ORANGE_FieldID: jfieldID?

    open static var ORANGE: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "ORANGE", fieldType: "Ljava/awt/Color;", fieldCache: &ORANGE_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.yellow

    private static var yellow_FieldID: jfieldID?

    open static var yellow: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "yellow", fieldType: "Ljava/awt/Color;", fieldCache: &yellow_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.YELLOW

    private static var YELLOW_FieldID: jfieldID?

    open static var YELLOW: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "YELLOW", fieldType: "Ljava/awt/Color;", fieldCache: &YELLOW_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.green

    private static var green_FieldID: jfieldID?

    open static var green: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "green", fieldType: "Ljava/awt/Color;", fieldCache: &green_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.GREEN

    private static var GREEN_FieldID: jfieldID?

    open static var GREEN: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "GREEN", fieldType: "Ljava/awt/Color;", fieldCache: &GREEN_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.magenta

    private static var magenta_FieldID: jfieldID?

    open static var magenta: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "magenta", fieldType: "Ljava/awt/Color;", fieldCache: &magenta_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.MAGENTA

    private static var MAGENTA_FieldID: jfieldID?

    open static var MAGENTA: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "MAGENTA", fieldType: "Ljava/awt/Color;", fieldCache: &MAGENTA_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.cyan

    private static var cyan_FieldID: jfieldID?

    open static var cyan: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "cyan", fieldType: "Ljava/awt/Color;", fieldCache: &cyan_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.CYAN

    private static var CYAN_FieldID: jfieldID?

    open static var CYAN: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "CYAN", fieldType: "Ljava/awt/Color;", fieldCache: &CYAN_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.blue

    private static var blue_FieldID: jfieldID?

    open static var blue: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "blue", fieldType: "Ljava/awt/Color;", fieldCache: &blue_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// public static final java.awt.Color java.awt.Color.BLUE

    private static var BLUE_FieldID: jfieldID?

    open static var BLUE: Color! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "BLUE", fieldType: "Ljava/awt/Color;", fieldCache: &BLUE_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return __value != nil ? Color( javaObject: __value ) : nil
        }
    }

    /// private transient long java.awt.Color.pData

    /// int java.awt.Color.value

    /// private float[] java.awt.Color.frgbvalue

    /// private float[] java.awt.Color.fvalue

    /// private float java.awt.Color.falpha

    /// private java.awt.color.ColorSpace java.awt.Color.cs

    /// private static final long java.awt.Color.serialVersionUID

    /// private static final double java.awt.Color.FACTOR

    /// private transient java.awt.PaintContext java.awt.Color.theContext

    /// public static final int java.awt.Transparency.OPAQUE

    private static var OPAQUE_FieldID: jfieldID?

    open static var OPAQUE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "OPAQUE", fieldType: "I", fieldCache: &OPAQUE_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.BITMASK

    private static var BITMASK_FieldID: jfieldID?

    open static var BITMASK: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BITMASK", fieldType: "I", fieldCache: &BITMASK_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public static final int java.awt.Transparency.TRANSLUCENT

    private static var TRANSLUCENT_FieldID: jfieldID?

    open static var TRANSLUCENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "TRANSLUCENT", fieldType: "I", fieldCache: &TRANSLUCENT_FieldID, className: "java/awt/Color", classCache: &ColorJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public java.awt.Color(float,float,float)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Float, arg1: Float, arg2: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Color", classCache: &Color.ColorJNIClass, methodSig: "(FFF)V", methodCache: &Color.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Float, _ _arg2: Float ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Color(float,float,float,float)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Float, arg1: Float, arg2: Float, arg3: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Color", classCache: &Color.ColorJNIClass, methodSig: "(FFFF)V", methodCache: &Color.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Float, _ _arg1: Float, _ _arg2: Float, _ _arg3: Float ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.Color(java.awt.color.ColorSpace,float[],float)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: ColorSpace?, arg1: [Float]?, arg2: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Color", classCache: &Color.ColorJNIClass, methodSig: "(Ljava/awt/color/ColorSpace;[FF)V", methodCache: &Color.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: ColorSpace?, _ _arg1: [Float]?, _ _arg2: Float ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Color(int,int,int)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Color", classCache: &Color.ColorJNIClass, methodSig: "(III)V", methodCache: &Color.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.awt.Color(int,int,int,int)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Color", classCache: &Color.ColorJNIClass, methodSig: "(IIII)V", methodCache: &Color.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.awt.Color(int)

    private static var new_MethodID_6: jmethodID?

    public convenience init( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Color", classCache: &Color.ColorJNIClass, methodSig: "(I)V", methodCache: &Color.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int ) {
        self.init( arg0: _arg0 )
    }

    /// public java.awt.Color(int,boolean)

    private static var new_MethodID_7: jmethodID?

    public convenience init( arg0: Int, arg1: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/Color", classCache: &Color.ColorJNIClass, methodSig: "(IZ)V", methodCache: &Color.new_MethodID_7, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Bool ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean java.awt.Color.equals(java.lang.Object)

    /// public java.lang.String java.awt.Color.toString()

    /// public int java.awt.Color.hashCode()

    /// public static java.awt.Color java.awt.Color.decode(java.lang.String) throws java.lang.NumberFormatException

    private static var decode_MethodID_8: jmethodID?

    open class func decode( arg0: String? ) throws /* java.lang.NumberFormatException */ -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Color", classCache: &ColorJNIClass, methodName: "decode", methodSig: "(Ljava/lang/String;)Ljava/awt/Color;", methodCache: &decode_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.NumberFormatException( javaObject: throwable )
        }
        return __return != nil ? Color( javaObject: __return ) : nil
    }

    open class func decode( _ _arg0: String? ) throws /* java.lang.NumberFormatException */ -> Color! {
        return try decode( arg0: _arg0 )
    }

    /// private static void java.awt.Color.initIDs()

    /// public float[] java.awt.Color.getComponents(float[])

    private static var getComponents_MethodID_9: jmethodID?

    open func getComponents( arg0: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponents", methodSig: "([F)[F", methodCache: &Color.getComponents_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getComponents( _ _arg0: [Float]? ) -> [Float]! {
        return getComponents( arg0: _arg0 )
    }

    /// public float[] java.awt.Color.getComponents(java.awt.color.ColorSpace,float[])

    private static var getComponents_MethodID_10: jmethodID?

    open func getComponents( arg0: ColorSpace?, arg1: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponents", methodSig: "(Ljava/awt/color/ColorSpace;[F)[F", methodCache: &Color.getComponents_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getComponents( _ _arg0: ColorSpace?, _ _arg1: [Float]? ) -> [Float]! {
        return getComponents( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.Color java.awt.Color.getColor(java.lang.String,java.awt.Color)

    private static var getColor_MethodID_11: jmethodID?

    open class func getColor( arg0: String?, arg1: Color? ) -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Color", classCache: &ColorJNIClass, methodName: "getColor", methodSig: "(Ljava/lang/String;Ljava/awt/Color;)Ljava/awt/Color;", methodCache: &getColor_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Color( javaObject: __return ) : nil
    }

    open class func getColor( _ _arg0: String?, _ _arg1: Color? ) -> Color! {
        return getColor( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.awt.Color java.awt.Color.getColor(java.lang.String)

    private static var getColor_MethodID_12: jmethodID?

    open class func getColor( arg0: String? ) -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Color", classCache: &ColorJNIClass, methodName: "getColor", methodSig: "(Ljava/lang/String;)Ljava/awt/Color;", methodCache: &getColor_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Color( javaObject: __return ) : nil
    }

    open class func getColor( _ _arg0: String? ) -> Color! {
        return getColor( arg0: _arg0 )
    }

    /// public static java.awt.Color java.awt.Color.getColor(java.lang.String,int)

    private static var getColor_MethodID_13: jmethodID?

    open class func getColor( arg0: String?, arg1: Int ) -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Color", classCache: &ColorJNIClass, methodName: "getColor", methodSig: "(Ljava/lang/String;I)Ljava/awt/Color;", methodCache: &getColor_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Color( javaObject: __return ) : nil
    }

    open class func getColor( _ _arg0: String?, _ _arg1: Int ) -> Color! {
        return getColor( arg0: _arg0, arg1: _arg1 )
    }

    /// private static void java.awt.Color.testColorValueRange(int,int,int,int)

    /// private static void java.awt.Color.testColorValueRange(float,float,float,float)

    /// public int java.awt.Color.getRed()

    private static var getRed_MethodID_14: jmethodID?

    open func getRed() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getRed", methodSig: "()I", methodCache: &Color.getRed_MethodID_14, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.Color.getGreen()

    private static var getGreen_MethodID_15: jmethodID?

    open func getGreen() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getGreen", methodSig: "()I", methodCache: &Color.getGreen_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.Color.getBlue()

    private static var getBlue_MethodID_16: jmethodID?

    open func getBlue() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getBlue", methodSig: "()I", methodCache: &Color.getBlue_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.Color.getAlpha()

    private static var getAlpha_MethodID_17: jmethodID?

    open func getAlpha() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAlpha", methodSig: "()I", methodCache: &Color.getAlpha_MethodID_17, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.awt.Color.getRGB()

    private static var getRGB_MethodID_18: jmethodID?

    open func getRGB() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getRGB", methodSig: "()I", methodCache: &Color.getRGB_MethodID_18, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public java.awt.Color java.awt.Color.brighter()

    private static var brighter_MethodID_19: jmethodID?

    open func brighter() -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "brighter", methodSig: "()Ljava/awt/Color;", methodCache: &Color.brighter_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Color( javaObject: __return ) : nil
    }


    /// public java.awt.Color java.awt.Color.darker()

    private static var darker_MethodID_20: jmethodID?

    open func darker() -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "darker", methodSig: "()Ljava/awt/Color;", methodCache: &Color.darker_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Color( javaObject: __return ) : nil
    }


    /// public static int java.awt.Color.HSBtoRGB(float,float,float)

    private static var HSBtoRGB_MethodID_21: jmethodID?

    open class func HSBtoRGB( arg0: Float, arg1: Float, arg2: Float ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/awt/Color", classCache: &ColorJNIClass, methodName: "HSBtoRGB", methodSig: "(FFF)I", methodCache: &HSBtoRGB_MethodID_21, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open class func HSBtoRGB( _ _arg0: Float, _ _arg1: Float, _ _arg2: Float ) -> Int {
        return HSBtoRGB( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static float[] java.awt.Color.RGBtoHSB(int,int,int,float[])

    private static var RGBtoHSB_MethodID_22: jmethodID?

    open class func RGBtoHSB( arg0: Int, arg1: Int, arg2: Int, arg3: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Color", classCache: &ColorJNIClass, methodName: "RGBtoHSB", methodSig: "(III[F)[F", methodCache: &RGBtoHSB_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open class func RGBtoHSB( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: [Float]? ) -> [Float]! {
        return RGBtoHSB( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public static java.awt.Color java.awt.Color.getHSBColor(float,float,float)

    private static var getHSBColor_MethodID_23: jmethodID?

    open class func getHSBColor( arg0: Float, arg1: Float, arg2: Float ) -> Color! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/awt/Color", classCache: &ColorJNIClass, methodName: "getHSBColor", methodSig: "(FFF)Ljava/awt/Color;", methodCache: &getHSBColor_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Color( javaObject: __return ) : nil
    }

    open class func getHSBColor( _ _arg0: Float, _ _arg1: Float, _ _arg2: Float ) -> Color! {
        return getHSBColor( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public float[] java.awt.Color.getRGBComponents(float[])

    private static var getRGBComponents_MethodID_24: jmethodID?

    open func getRGBComponents( arg0: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRGBComponents", methodSig: "([F)[F", methodCache: &Color.getRGBComponents_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getRGBComponents( _ _arg0: [Float]? ) -> [Float]! {
        return getRGBComponents( arg0: _arg0 )
    }

    /// public float[] java.awt.Color.getRGBColorComponents(float[])

    private static var getRGBColorComponents_MethodID_25: jmethodID?

    open func getRGBColorComponents( arg0: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRGBColorComponents", methodSig: "([F)[F", methodCache: &Color.getRGBColorComponents_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getRGBColorComponents( _ _arg0: [Float]? ) -> [Float]! {
        return getRGBColorComponents( arg0: _arg0 )
    }

    /// public float[] java.awt.Color.getColorComponents(float[])

    private static var getColorComponents_MethodID_26: jmethodID?

    open func getColorComponents( arg0: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColorComponents", methodSig: "([F)[F", methodCache: &Color.getColorComponents_MethodID_26, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getColorComponents( _ _arg0: [Float]? ) -> [Float]! {
        return getColorComponents( arg0: _arg0 )
    }

    /// public float[] java.awt.Color.getColorComponents(java.awt.color.ColorSpace,float[])

    private static var getColorComponents_MethodID_27: jmethodID?

    open func getColorComponents( arg0: ColorSpace?, arg1: [Float]? ) -> [Float]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColorComponents", methodSig: "(Ljava/awt/color/ColorSpace;[F)[F", methodCache: &Color.getColorComponents_MethodID_27, args: &__args, locals: &__locals )
        return JNIType.decode( type: [Float](), from: __return )
    }

    open func getColorComponents( _ _arg0: ColorSpace?, _ _arg1: [Float]? ) -> [Float]! {
        return getColorComponents( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.color.ColorSpace java.awt.Color.getColorSpace()

    private static var getColorSpace_MethodID_28: jmethodID?

    open func getColorSpace() -> ColorSpace! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColorSpace", methodSig: "()Ljava/awt/color/ColorSpace;", methodCache: &Color.getColorSpace_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ColorSpace( javaObject: __return ) : nil
    }


    /// public synchronized java.awt.PaintContext java.awt.Color.createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)

    private static var createContext_MethodID_29: jmethodID?

    open func createContext( arg0: ColorModel?, arg1: Rectangle?, arg2: Rectangle2D?, arg3: AffineTransform?, arg4: RenderingHints? ) -> PaintContext! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createContext", methodSig: "(Ljava/awt/image/ColorModel;Ljava/awt/Rectangle;Ljava/awt/geom/Rectangle2D;Ljava/awt/geom/AffineTransform;Ljava/awt/RenderingHints;)Ljava/awt/PaintContext;", methodCache: &Color.createContext_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PaintContextForward( javaObject: __return ) : nil
    }

    open func createContext( _ _arg0: ColorModel?, _ _arg1: Rectangle?, _ _arg2: Rectangle2D?, _ _arg3: AffineTransform?, _ _arg4: RenderingHints? ) -> PaintContext! {
        return createContext( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public int java.awt.Color.getTransparency()

    private static var getTransparency_MethodID_30: jmethodID?

    open func getTransparency() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTransparency", methodSig: "()I", methodCache: &Color.getTransparency_MethodID_30, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
