
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:18 GMT 2016 ///

/// class java.awt.print.Book ///

open class Book: java_lang.JavaObject, Pageable {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.print.Book", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BookJNIClass: jclass?

    /// private java.util.Vector java.awt.print.Book.mPages

    /// public static final int java.awt.print.Pageable.UNKNOWN_NUMBER_OF_PAGES

    private static var UNKNOWN_NUMBER_OF_PAGES_FieldID: jfieldID?

    open static var UNKNOWN_NUMBER_OF_PAGES: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "UNKNOWN_NUMBER_OF_PAGES", fieldType: "I", fieldCache: &UNKNOWN_NUMBER_OF_PAGES_FieldID, className: "java/awt/print/Book", classCache: &BookJNIClass )
            return JNIType.decode( type: Int(), from: __value )
        }
    }

    /// public java.awt.print.Book()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/print/Book", classCache: &Book.BookJNIClass, methodSig: "()V", methodCache: &Book.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void java.awt.print.Book.append(java.awt.print.Printable,java.awt.print.PageFormat,int)

    private static var append_MethodID_2: jmethodID?

    open func append( arg0: Printable?, arg1: PageFormat?, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/awt/print/Printable;Ljava/awt/print/PageFormat;I)V", methodCache: &Book.append_MethodID_2, args: &__args, locals: &__locals )
    }

    open func append( _ _arg0: Printable?, _ _arg1: PageFormat?, _ _arg2: Int ) {
        append( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public void java.awt.print.Book.append(java.awt.print.Printable,java.awt.print.PageFormat)

    private static var append_MethodID_3: jmethodID?

    open func append( arg0: Printable?, arg1: PageFormat? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "append", methodSig: "(Ljava/awt/print/Printable;Ljava/awt/print/PageFormat;)V", methodCache: &Book.append_MethodID_3, args: &__args, locals: &__locals )
    }

    open func append( _ _arg0: Printable?, _ _arg1: PageFormat? ) {
        append( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.awt.print.Printable java.awt.print.Book.getPrintable(int) throws java.lang.IndexOutOfBoundsException

    private static var getPrintable_MethodID_4: jmethodID?

    open func getPrintable( arg0: Int ) throws /* java.lang.IndexOutOfBoundsException */ -> Printable! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPrintable", methodSig: "(I)Ljava/awt/print/Printable;", methodCache: &Book.getPrintable_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.IndexOutOfBoundsException( javaObject: throwable )
        }
        return __return != nil ? PrintableForward( javaObject: __return ) : nil
    }

    open func getPrintable( _ _arg0: Int ) throws /* java.lang.IndexOutOfBoundsException */ -> Printable! {
        return try getPrintable( arg0: _arg0 )
    }

    /// public java.awt.print.PageFormat java.awt.print.Book.getPageFormat(int) throws java.lang.IndexOutOfBoundsException

    private static var getPageFormat_MethodID_5: jmethodID?

    open func getPageFormat( arg0: Int ) throws /* java.lang.IndexOutOfBoundsException */ -> PageFormat! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPageFormat", methodSig: "(I)Ljava/awt/print/PageFormat;", methodCache: &Book.getPageFormat_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.IndexOutOfBoundsException( javaObject: throwable )
        }
        return __return != nil ? PageFormat( javaObject: __return ) : nil
    }

    open func getPageFormat( _ _arg0: Int ) throws /* java.lang.IndexOutOfBoundsException */ -> PageFormat! {
        return try getPageFormat( arg0: _arg0 )
    }

    /// public int java.awt.print.Book.getNumberOfPages()

    private static var getNumberOfPages_MethodID_6: jmethodID?

    open func getNumberOfPages() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNumberOfPages", methodSig: "()I", methodCache: &Book.getNumberOfPages_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.awt.print.Book.setPage(int,java.awt.print.Printable,java.awt.print.PageFormat) throws java.lang.IndexOutOfBoundsException

    private static var setPage_MethodID_7: jmethodID?

    open func setPage( arg0: Int, arg1: Printable?, arg2: PageFormat? ) throws /* java.lang.IndexOutOfBoundsException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPage", methodSig: "(ILjava/awt/print/Printable;Ljava/awt/print/PageFormat;)V", methodCache: &Book.setPage_MethodID_7, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw java_lang.IndexOutOfBoundsException( javaObject: throwable )
        }
    }

    open func setPage( _ _arg0: Int, _ _arg1: Printable?, _ _arg2: PageFormat? ) throws /* java.lang.IndexOutOfBoundsException */ {
        try setPage( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// private java.awt.print.Book$BookPage java.awt.print.Book.getPage(int) throws java.lang.ArrayIndexOutOfBoundsException

}
