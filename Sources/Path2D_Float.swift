
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.awt.geom.Path2D$Float ///

open class Path2D_Float: Path2D, /* java.io.Serializable */ UnclassedProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.awt.geom.Path2D$Float", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var Path2D_FloatJNIClass: jclass?

    /// transient float[] java.awt.geom.Path2D$Float.floatCoords

    /// private static final long java.awt.geom.Path2D$Float.serialVersionUID

    /// static final boolean java.awt.geom.Path2D$Float.$assertionsDisabled

    /// public static final int java.awt.geom.Path2D.WIND_EVEN_ODD

    /// public static final int java.awt.geom.Path2D.WIND_NON_ZERO

    /// private static final byte java.awt.geom.Path2D.SEG_MOVETO

    /// private static final byte java.awt.geom.Path2D.SEG_LINETO

    /// private static final byte java.awt.geom.Path2D.SEG_QUADTO

    /// private static final byte java.awt.geom.Path2D.SEG_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SEG_CLOSE

    /// transient byte[] java.awt.geom.Path2D.pointTypes

    /// transient int java.awt.geom.Path2D.numTypes

    /// transient int java.awt.geom.Path2D.numCoords

    /// transient int java.awt.geom.Path2D.windingRule

    /// static final int java.awt.geom.Path2D.INIT_SIZE

    /// static final int java.awt.geom.Path2D.EXPAND_MAX

    /// static final int java.awt.geom.Path2D.EXPAND_MAX_COORDS

    /// static final int java.awt.geom.Path2D.EXPAND_MIN

    /// private static final byte java.awt.geom.Path2D.SERIAL_STORAGE_FLT_ARRAY

    /// private static final byte java.awt.geom.Path2D.SERIAL_STORAGE_DBL_ARRAY

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_MOVETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_LINETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_QUADTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_FLT_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_MOVETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_LINETO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_QUADTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_DBL_CUBICTO

    /// private static final byte java.awt.geom.Path2D.SERIAL_SEG_CLOSE

    /// private static final byte java.awt.geom.Path2D.SERIAL_PATH_END

    /// static final boolean java.awt.geom.Path2D.$assertionsDisabled

    /// public java.awt.geom.Path2D$Float(java.awt.Shape,java.awt.geom.AffineTransform)

    private static var new_MethodID_1: jmethodID?

    public convenience init( s: Shape?, at: AffineTransform? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = JNIType.toJava( value: at != nil ? at! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Path2D$Float", classCache: &Path2D_Float.Path2D_FloatJNIClass, methodSig: "(Ljava/awt/Shape;Ljava/awt/geom/AffineTransform;)V", methodCache: &Path2D_Float.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _s: Shape?, _ _at: AffineTransform? ) {
        self.init( s: _s, at: _at )
    }

    /// public java.awt.geom.Path2D$Float(java.awt.Shape)

    private static var new_MethodID_2: jmethodID?

    public convenience init( s: Shape? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Path2D$Float", classCache: &Path2D_Float.Path2D_FloatJNIClass, methodSig: "(Ljava/awt/Shape;)V", methodCache: &Path2D_Float.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _s: Shape? ) {
        self.init( s: _s )
    }

    /// public java.awt.geom.Path2D$Float(int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( rule: Int, initialCapacity: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: rule, locals: &__locals )
        __args[1] = JNIType.toJava( value: initialCapacity, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Path2D$Float", classCache: &Path2D_Float.Path2D_FloatJNIClass, methodSig: "(II)V", methodCache: &Path2D_Float.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _rule: Int, _ _initialCapacity: Int ) {
        self.init( rule: _rule, initialCapacity: _initialCapacity )
    }

    /// public java.awt.geom.Path2D$Float(int)

    private static var new_MethodID_4: jmethodID?

    public convenience init( rule: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: rule, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Path2D$Float", classCache: &Path2D_Float.Path2D_FloatJNIClass, methodSig: "(I)V", methodCache: &Path2D_Float.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _rule: Int ) {
        self.init( rule: _rule )
    }

    /// public java.awt.geom.Path2D$Float()

    private static var new_MethodID_5: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/awt/geom/Path2D$Float", classCache: &Path2D_Float.Path2D_FloatJNIClass, methodSig: "()V", methodCache: &Path2D_Float.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// void java.awt.geom.Path2D$Float.append(double,double)

    /// void java.awt.geom.Path2D$Float.append(float,float)

    /// public final void java.awt.geom.Path2D$Float.append(java.awt.geom.PathIterator,boolean)

    /// public final java.lang.Object java.awt.geom.Path2D$Float.clone()

    /// private void java.awt.geom.Path2D$Float.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// private void java.awt.geom.Path2D$Float.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public final synchronized java.awt.geom.Rectangle2D java.awt.geom.Path2D$Float.getBounds2D()

    /// public final java.awt.geom.PathIterator java.awt.geom.Path2D$Float.getPathIterator(java.awt.geom.AffineTransform)

    /// public final void java.awt.geom.Path2D$Float.transform(java.awt.geom.AffineTransform)

    /// java.awt.geom.Point2D java.awt.geom.Path2D$Float.getPoint(int)

    /// public final synchronized void java.awt.geom.Path2D$Float.moveTo(float,float)

    private static var moveTo_MethodID_6: jmethodID?

    open func moveTo( x: Float, y: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "moveTo", methodSig: "(FF)V", methodCache: &Path2D_Float.moveTo_MethodID_6, args: &__args, locals: &__locals )
    }

    open func moveTo( _ _x: Float, _ _y: Float ) {
        moveTo( x: _x, y: _y )
    }

    /// public final synchronized void java.awt.geom.Path2D$Float.moveTo(double,double)

    /// public final synchronized void java.awt.geom.Path2D$Float.lineTo(float,float)

    private static var lineTo_MethodID_7: jmethodID?

    open func lineTo( x: Float, y: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: y, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "lineTo", methodSig: "(FF)V", methodCache: &Path2D_Float.lineTo_MethodID_7, args: &__args, locals: &__locals )
    }

    open func lineTo( _ _x: Float, _ _y: Float ) {
        lineTo( x: _x, y: _y )
    }

    /// public final synchronized void java.awt.geom.Path2D$Float.lineTo(double,double)

    /// float[] java.awt.geom.Path2D$Float.cloneCoordsFloat(java.awt.geom.AffineTransform)

    /// double[] java.awt.geom.Path2D$Float.cloneCoordsDouble(java.awt.geom.AffineTransform)

    /// void java.awt.geom.Path2D$Float.needRoom(boolean,int)

    /// static float[] java.awt.geom.Path2D$Float.expandCoords(float[],int)

    /// public final synchronized void java.awt.geom.Path2D$Float.quadTo(double,double,double,double)

    /// public final synchronized void java.awt.geom.Path2D$Float.quadTo(float,float,float,float)

    private static var quadTo_MethodID_8: jmethodID?

    open func quadTo( x1: Float, y1: Float, x2: Float, y2: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: x2, locals: &__locals )
        __args[3] = JNIType.toJava( value: y2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "quadTo", methodSig: "(FFFF)V", methodCache: &Path2D_Float.quadTo_MethodID_8, args: &__args, locals: &__locals )
    }

    open func quadTo( _ _x1: Float, _ _y1: Float, _ _x2: Float, _ _y2: Float ) {
        quadTo( x1: _x1, y1: _y1, x2: _x2, y2: _y2 )
    }

    /// public final synchronized void java.awt.geom.Path2D$Float.curveTo(double,double,double,double,double,double)

    /// public final synchronized void java.awt.geom.Path2D$Float.curveTo(float,float,float,float,float,float)

    private static var curveTo_MethodID_9: jmethodID?

    open func curveTo( x1: Float, y1: Float, x2: Float, y2: Float, x3: Float, y3: Float ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x1, locals: &__locals )
        __args[1] = JNIType.toJava( value: y1, locals: &__locals )
        __args[2] = JNIType.toJava( value: x2, locals: &__locals )
        __args[3] = JNIType.toJava( value: y2, locals: &__locals )
        __args[4] = JNIType.toJava( value: x3, locals: &__locals )
        __args[5] = JNIType.toJava( value: y3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "curveTo", methodSig: "(FFFFFF)V", methodCache: &Path2D_Float.curveTo_MethodID_9, args: &__args, locals: &__locals )
    }

    open func curveTo( _ _x1: Float, _ _y1: Float, _ _x2: Float, _ _y2: Float, _ _x3: Float, _ _y3: Float ) {
        curveTo( x1: _x1, y1: _y1, x2: _x2, y2: _y2, x3: _x3, y3: _y3 )
    }

    /// int java.awt.geom.Path2D$Float.pointCrossings(double,double)

    /// int java.awt.geom.Path2D$Float.rectCrossings(double,double,double,double)

}

