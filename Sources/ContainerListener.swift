
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:35:57 GMT 2016 ///

/// interface java.awt.event.ContainerListener ///

public protocol ContainerListener: java_util.EventListener {

    /// public abstract void java.awt.event.ContainerListener.componentAdded(java.awt.event.ContainerEvent)

    func componentAdded( arg0: ContainerEvent? )
    func componentAdded( _ _arg0: ContainerEvent? )

    /// public abstract void java.awt.event.ContainerListener.componentRemoved(java.awt.event.ContainerEvent)

    func componentRemoved( arg0: ContainerEvent? )
    func componentRemoved( _ _arg0: ContainerEvent? )

}

open class ContainerListenerForward: java_util.EventListenerForward, ContainerListener {

    private static var ContainerListenerJNIClass: jclass?

    /// public abstract void java.awt.event.ContainerListener.componentAdded(java.awt.event.ContainerEvent)

    private static var componentAdded_MethodID_3: jmethodID?

    open func componentAdded( arg0: ContainerEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentAdded", methodSig: "(Ljava/awt/event/ContainerEvent;)V", methodCache: &ContainerListenerForward.componentAdded_MethodID_3, args: &__args, locals: &__locals )
    }

    open func componentAdded( _ _arg0: ContainerEvent? ) {
        componentAdded( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ContainerListener.componentRemoved(java.awt.event.ContainerEvent)

    private static var componentRemoved_MethodID_4: jmethodID?

    open func componentRemoved( arg0: ContainerEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "componentRemoved", methodSig: "(Ljava/awt/event/ContainerEvent;)V", methodCache: &ContainerListenerForward.componentRemoved_MethodID_4, args: &__args, locals: &__locals )
    }

    open func componentRemoved( _ _arg0: ContainerEvent? ) {
        componentRemoved( arg0: _arg0 )
    }

}


private typealias ContainerListener_componentAdded_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ContainerListener_componentAdded_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ContainerListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).componentAdded( arg0 != nil ? ContainerEvent( javaObject: arg0 ) : nil )
}

private typealias ContainerListener_componentRemoved_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func ContainerListener_componentRemoved_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ arg0: jobject? ) -> () {
    ContainerListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).componentRemoved( arg0 != nil ? ContainerEvent( javaObject: arg0 ) : nil )
}

open class ContainerListenerBase: JNIObjectProxy, ContainerListener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let ContainerListener_componentAdded_0_thunk: ContainerListener_componentAdded_0_type = ContainerListener_componentAdded_0
            natives.append( JNINativeMethod( name: strdup("__componentAdded"), signature: strdup("(Ljava/awt/event/ContainerEvent;)V"), fnPtr: unsafeBitCast( ContainerListener_componentAdded_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let ContainerListener_componentRemoved_1_thunk: ContainerListener_componentRemoved_1_type = ContainerListener_componentRemoved_1
            natives.append( JNINativeMethod( name: strdup("__componentRemoved"), signature: strdup("(Ljava/awt/event/ContainerEvent;)V"), fnPtr: unsafeBitCast( ContainerListener_componentRemoved_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/java_awt/ContainerListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        ContainerListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/java_awt/ContainerListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> ContainerListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: ContainerListenerBase.self )
    }

    /// public abstract void java.awt.event.ContainerListener.componentAdded(java.awt.event.ContainerEvent)

    open func componentAdded( arg0: ContainerEvent? ) /**/ {
    }

    open func componentAdded( _ _arg0: ContainerEvent? ) /**/ {
        componentAdded( arg0: _arg0 )
    }

    /// public abstract void java.awt.event.ContainerListener.componentRemoved(java.awt.event.ContainerEvent)

    open func componentRemoved( arg0: ContainerEvent? ) /**/ {
    }

    open func componentRemoved( _ _arg0: ContainerEvent? ) /**/ {
        componentRemoved( arg0: _arg0 )
    }

}
